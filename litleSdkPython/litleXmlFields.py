# ./litleXmlFields/py.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:f03bd2be92cca0df00d3d054794f8a47756ec009
# Generated 2018-04-04 09:57:08.641286 by PyXB version 1.2.5 using Python 2.7.14.final.0
# Namespace http://www.litle.com/schema

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import xml.dom
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:0f1e4e7a-3810-11e8-a1af-001a4a010781')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.5'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.litle.com/schema', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.litle.com/schema}string20Type
class string20Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string20Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 14, 4)
    _Documentation = None
string20Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
string20Type._InitializeFacetMap(string20Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string20Type', string20Type)
_module_typeBindings.string20Type = string20Type

# Atomic simple type: {http://www.litle.com/schema}versionType
class versionType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'versionType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 20, 4)
    _Documentation = None
versionType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
versionType._InitializeFacetMap(versionType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'versionType', versionType)
_module_typeBindings.versionType = versionType

# Atomic simple type: {http://www.litle.com/schema}messageType
class messageType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'messageType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 26, 4)
    _Documentation = None
messageType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(512))
messageType._InitializeFacetMap(messageType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'messageType', messageType)
_module_typeBindings.messageType = messageType

# Atomic simple type: {http://www.litle.com/schema}string2Type
class string2Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string2Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 32, 4)
    _Documentation = None
string2Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
string2Type._InitializeFacetMap(string2Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string2Type', string2Type)
_module_typeBindings.string2Type = string2Type

# Atomic simple type: {http://www.litle.com/schema}string3Type
class string3Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string3Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 38, 4)
    _Documentation = None
string3Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(3))
string3Type._InitializeFacetMap(string3Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string3Type', string3Type)
_module_typeBindings.string3Type = string3Type

# Atomic simple type: {http://www.litle.com/schema}responseType
class responseType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'responseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 44, 4)
    _Documentation = None
responseType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(3))
responseType._InitializeFacetMap(responseType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'responseType', responseType)
_module_typeBindings.responseType = responseType

# Atomic simple type: {http://www.litle.com/schema}litleIdType
class litleIdType (pyxb.binding.datatypes.long):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'litleIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 50, 4)
    _Documentation = None
litleIdType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(19))
litleIdType._InitializeFacetMap(litleIdType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', 'litleIdType', litleIdType)
_module_typeBindings.litleIdType = litleIdType

# Atomic simple type: {http://www.litle.com/schema}string25Type
class string25Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string25Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 56, 4)
    _Documentation = None
string25Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
string25Type._InitializeFacetMap(string25Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string25Type', string25Type)
_module_typeBindings.string25Type = string25Type

# Atomic simple type: {http://www.litle.com/schema}string50Type
class string50Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string50Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 62, 4)
    _Documentation = None
string50Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
string50Type._InitializeFacetMap(string50Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string50Type', string50Type)
_module_typeBindings.string50Type = string50Type

# Atomic simple type: {http://www.litle.com/schema}string256Type
class string256Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string256Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 68, 4)
    _Documentation = None
string256Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256))
string256Type._InitializeFacetMap(string256Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string256Type', string256Type)
_module_typeBindings.string256Type = string256Type

# Atomic simple type: {http://www.litle.com/schema}string512Type
class string512Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string512Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 74, 4)
    _Documentation = None
string512Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(512))
string512Type._InitializeFacetMap(string512Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string512Type', string512Type)
_module_typeBindings.string512Type = string512Type

# Atomic simple type: {http://www.litle.com/schema}cardNumberLast4Type
class cardNumberLast4Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardNumberLast4Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 80, 4)
    _Documentation = None
cardNumberLast4Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
cardNumberLast4Type._InitializeFacetMap(cardNumberLast4Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'cardNumberLast4Type', cardNumberLast4Type)
_module_typeBindings.cardNumberLast4Type = cardNumberLast4Type

# Atomic simple type: {http://www.litle.com/schema}virtualAuthenticationKeyData
class virtualAuthenticationKeyData (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyData')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 85, 4)
    _Documentation = None
virtualAuthenticationKeyData._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
virtualAuthenticationKeyData._InitializeFacetMap(virtualAuthenticationKeyData._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'virtualAuthenticationKeyData', virtualAuthenticationKeyData)
_module_typeBindings.virtualAuthenticationKeyData = virtualAuthenticationKeyData

# Atomic simple type: {http://www.litle.com/schema}virtualAuthenticationKeyPresenceIndicator
class virtualAuthenticationKeyPresenceIndicator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyPresenceIndicator')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 91, 4)
    _Documentation = None
virtualAuthenticationKeyPresenceIndicator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
virtualAuthenticationKeyPresenceIndicator._InitializeFacetMap(virtualAuthenticationKeyPresenceIndicator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'virtualAuthenticationKeyPresenceIndicator', virtualAuthenticationKeyPresenceIndicator)
_module_typeBindings.virtualAuthenticationKeyPresenceIndicator = virtualAuthenticationKeyPresenceIndicator

# Atomic simple type: {http://www.litle.com/schema}authorizationSourcePlatform
class authorizationSourcePlatform (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'authorizationSourcePlatform')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 96, 4)
    _Documentation = None
authorizationSourcePlatform._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
authorizationSourcePlatform._InitializeFacetMap(authorizationSourcePlatform._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'authorizationSourcePlatform', authorizationSourcePlatform)
_module_typeBindings.authorizationSourcePlatform = authorizationSourcePlatform

# Atomic simple type: {http://www.litle.com/schema}addressIndicator
class addressIndicator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addressIndicator')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 101, 4)
    _Documentation = None
addressIndicator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
addressIndicator._InitializeFacetMap(addressIndicator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'addressIndicator', addressIndicator)
_module_typeBindings.addressIndicator = addressIndicator

# Atomic simple type: {http://www.litle.com/schema}authenticationResultType
class authenticationResultType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'authenticationResultType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 106, 4)
    _Documentation = None
authenticationResultType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
authenticationResultType._InitializeFacetMap(authenticationResultType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'authenticationResultType', authenticationResultType)
_module_typeBindings.authenticationResultType = authenticationResultType

# Atomic simple type: {http://www.litle.com/schema}methodOfPaymentTypeEnum
class methodOfPaymentTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'methodOfPaymentTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 112, 4)
    _Documentation = None
methodOfPaymentTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=methodOfPaymentTypeEnum, enum_prefix=None)
methodOfPaymentTypeEnum.MC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='MC', tag='MC')
methodOfPaymentTypeEnum.VI = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='VI', tag='VI')
methodOfPaymentTypeEnum.AX = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='AX', tag='AX')
methodOfPaymentTypeEnum.DC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='DC', tag='DC')
methodOfPaymentTypeEnum.DI = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='DI', tag='DI')
methodOfPaymentTypeEnum.PP = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='PP', tag='PP')
methodOfPaymentTypeEnum.JC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='JC', tag='JC')
methodOfPaymentTypeEnum.BL = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='BL', tag='BL')
methodOfPaymentTypeEnum.EC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='EC', tag='EC')
methodOfPaymentTypeEnum.GC = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='GC', tag='GC')
methodOfPaymentTypeEnum.emptyString = methodOfPaymentTypeEnum._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
methodOfPaymentTypeEnum._InitializeFacetMap(methodOfPaymentTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'methodOfPaymentTypeEnum', methodOfPaymentTypeEnum)
_module_typeBindings.methodOfPaymentTypeEnum = methodOfPaymentTypeEnum

# Atomic simple type: {http://www.litle.com/schema}govtTaxTypeEnum
class govtTaxTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'govtTaxTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 128, 4)
    _Documentation = None
govtTaxTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=govtTaxTypeEnum, enum_prefix=None)
govtTaxTypeEnum.payment = govtTaxTypeEnum._CF_enumeration.addEnumeration(unicode_value='payment', tag='payment')
govtTaxTypeEnum.fee = govtTaxTypeEnum._CF_enumeration.addEnumeration(unicode_value='fee', tag='fee')
govtTaxTypeEnum._InitializeFacetMap(govtTaxTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'govtTaxTypeEnum', govtTaxTypeEnum)
_module_typeBindings.govtTaxTypeEnum = govtTaxTypeEnum

# Atomic simple type: {http://www.litle.com/schema}transactionAmountType
class transactionAmountType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionAmountType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 135, 4)
    _Documentation = None
transactionAmountType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(12))
transactionAmountType._InitializeFacetMap(transactionAmountType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', 'transactionAmountType', transactionAmountType)
_module_typeBindings.transactionAmountType = transactionAmountType

# Atomic simple type: {http://www.litle.com/schema}loanToValueEstimator
class loanToValueEstimator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'loanToValueEstimator')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 141, 4)
    _Documentation = None
loanToValueEstimator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
loanToValueEstimator._InitializeFacetMap(loanToValueEstimator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'loanToValueEstimator', loanToValueEstimator)
_module_typeBindings.loanToValueEstimator = loanToValueEstimator

# Atomic simple type: {http://www.litle.com/schema}riskEstimator
class riskEstimator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'riskEstimator')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 146, 4)
    _Documentation = None
riskEstimator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
riskEstimator._InitializeFacetMap(riskEstimator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'riskEstimator', riskEstimator)
_module_typeBindings.riskEstimator = riskEstimator

# Atomic simple type: {http://www.litle.com/schema}riskQueueAssignment
class riskQueueAssignment (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'riskQueueAssignment')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 151, 4)
    _Documentation = None
riskQueueAssignment._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
riskQueueAssignment._InitializeFacetMap(riskQueueAssignment._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'riskQueueAssignment', riskQueueAssignment)
_module_typeBindings.riskQueueAssignment = riskQueueAssignment

# Atomic simple type: {http://www.litle.com/schema}merchantIdentificationType
class merchantIdentificationType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'merchantIdentificationType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 157, 4)
    _Documentation = None
merchantIdentificationType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
merchantIdentificationType._InitializeFacetMap(merchantIdentificationType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'merchantIdentificationType', merchantIdentificationType)
_module_typeBindings.merchantIdentificationType = merchantIdentificationType

# Atomic simple type: {http://www.litle.com/schema}currencyCodeEnum
class currencyCodeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'currencyCodeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 163, 4)
    _Documentation = None
currencyCodeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=currencyCodeEnum, enum_prefix=None)
currencyCodeEnum.AUD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='AUD', tag='AUD')
currencyCodeEnum.CAD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='CAD', tag='CAD')
currencyCodeEnum.CHF = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='CHF', tag='CHF')
currencyCodeEnum.DKK = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='DKK', tag='DKK')
currencyCodeEnum.EUR = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='EUR', tag='EUR')
currencyCodeEnum.GBP = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='GBP', tag='GBP')
currencyCodeEnum.HKD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='HKD', tag='HKD')
currencyCodeEnum.JPY = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='JPY', tag='JPY')
currencyCodeEnum.NOK = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='NOK', tag='NOK')
currencyCodeEnum.NZD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='NZD', tag='NZD')
currencyCodeEnum.SEK = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='SEK', tag='SEK')
currencyCodeEnum.SGD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='SGD', tag='SGD')
currencyCodeEnum.USD = currencyCodeEnum._CF_enumeration.addEnumeration(unicode_value='USD', tag='USD')
currencyCodeEnum._InitializeFacetMap(currencyCodeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'currencyCodeEnum', currencyCodeEnum)
_module_typeBindings.currencyCodeEnum = currencyCodeEnum

# Atomic simple type: {http://www.litle.com/schema}countryTypeEnum
class countryTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'countryTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 181, 4)
    _Documentation = None
countryTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=countryTypeEnum, enum_prefix=None)
countryTypeEnum.USA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='USA', tag='USA')
countryTypeEnum.AF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AF', tag='AF')
countryTypeEnum.AX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AX', tag='AX')
countryTypeEnum.AL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AL', tag='AL')
countryTypeEnum.DZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='DZ', tag='DZ')
countryTypeEnum.AS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AS', tag='AS')
countryTypeEnum.AD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AD', tag='AD')
countryTypeEnum.AO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AO', tag='AO')
countryTypeEnum.AI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AI', tag='AI')
countryTypeEnum.AQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AQ', tag='AQ')
countryTypeEnum.AG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AG', tag='AG')
countryTypeEnum.AR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AR', tag='AR')
countryTypeEnum.AM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AM', tag='AM')
countryTypeEnum.AW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AW', tag='AW')
countryTypeEnum.AU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AU', tag='AU')
countryTypeEnum.AT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AT', tag='AT')
countryTypeEnum.AZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AZ', tag='AZ')
countryTypeEnum.BS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BS', tag='BS')
countryTypeEnum.BH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BH', tag='BH')
countryTypeEnum.BD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BD', tag='BD')
countryTypeEnum.BB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BB', tag='BB')
countryTypeEnum.BY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BY', tag='BY')
countryTypeEnum.BE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BE', tag='BE')
countryTypeEnum.BZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BZ', tag='BZ')
countryTypeEnum.BJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BJ', tag='BJ')
countryTypeEnum.BM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BM', tag='BM')
countryTypeEnum.BT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BT', tag='BT')
countryTypeEnum.BO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BO', tag='BO')
countryTypeEnum.BQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BQ', tag='BQ')
countryTypeEnum.BA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BA', tag='BA')
countryTypeEnum.BW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BW', tag='BW')
countryTypeEnum.BV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BV', tag='BV')
countryTypeEnum.BR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BR', tag='BR')
countryTypeEnum.IO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IO', tag='IO')
countryTypeEnum.BN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BN', tag='BN')
countryTypeEnum.BG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BG', tag='BG')
countryTypeEnum.BF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BF', tag='BF')
countryTypeEnum.BI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BI', tag='BI')
countryTypeEnum.KH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KH', tag='KH')
countryTypeEnum.CM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CM', tag='CM')
countryTypeEnum.CA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CA', tag='CA')
countryTypeEnum.CV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CV', tag='CV')
countryTypeEnum.KY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KY', tag='KY')
countryTypeEnum.CF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CF', tag='CF')
countryTypeEnum.TD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TD', tag='TD')
countryTypeEnum.CL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CL', tag='CL')
countryTypeEnum.CN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CN', tag='CN')
countryTypeEnum.CX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CX', tag='CX')
countryTypeEnum.CC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CC', tag='CC')
countryTypeEnum.CO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CO', tag='CO')
countryTypeEnum.KM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KM', tag='KM')
countryTypeEnum.CG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CG', tag='CG')
countryTypeEnum.CD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CD', tag='CD')
countryTypeEnum.CK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CK', tag='CK')
countryTypeEnum.CR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CR', tag='CR')
countryTypeEnum.CI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CI', tag='CI')
countryTypeEnum.HR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='HR', tag='HR')
countryTypeEnum.CU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CU', tag='CU')
countryTypeEnum.CW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CW', tag='CW')
countryTypeEnum.CY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CY', tag='CY')
countryTypeEnum.CZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CZ', tag='CZ')
countryTypeEnum.DK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='DK', tag='DK')
countryTypeEnum.DJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='DJ', tag='DJ')
countryTypeEnum.DM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='DM', tag='DM')
countryTypeEnum.DO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='DO', tag='DO')
countryTypeEnum.TL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TL', tag='TL')
countryTypeEnum.EC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='EC', tag='EC')
countryTypeEnum.EG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='EG', tag='EG')
countryTypeEnum.SV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SV', tag='SV')
countryTypeEnum.GQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GQ', tag='GQ')
countryTypeEnum.ER = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ER', tag='ER')
countryTypeEnum.EE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='EE', tag='EE')
countryTypeEnum.ET = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ET', tag='ET')
countryTypeEnum.FK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='FK', tag='FK')
countryTypeEnum.FO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='FO', tag='FO')
countryTypeEnum.FJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='FJ', tag='FJ')
countryTypeEnum.FI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='FI', tag='FI')
countryTypeEnum.FR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='FR', tag='FR')
countryTypeEnum.GF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GF', tag='GF')
countryTypeEnum.PF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PF', tag='PF')
countryTypeEnum.TF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TF', tag='TF')
countryTypeEnum.GA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GA', tag='GA')
countryTypeEnum.GM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GM', tag='GM')
countryTypeEnum.GE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GE', tag='GE')
countryTypeEnum.DE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='DE', tag='DE')
countryTypeEnum.GH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GH', tag='GH')
countryTypeEnum.GI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GI', tag='GI')
countryTypeEnum.GR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GR', tag='GR')
countryTypeEnum.GL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GL', tag='GL')
countryTypeEnum.GD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GD', tag='GD')
countryTypeEnum.GP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GP', tag='GP')
countryTypeEnum.GU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GU', tag='GU')
countryTypeEnum.GT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GT', tag='GT')
countryTypeEnum.GG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GG', tag='GG')
countryTypeEnum.GN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GN', tag='GN')
countryTypeEnum.GW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GW', tag='GW')
countryTypeEnum.GY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GY', tag='GY')
countryTypeEnum.HT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='HT', tag='HT')
countryTypeEnum.HM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='HM', tag='HM')
countryTypeEnum.HN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='HN', tag='HN')
countryTypeEnum.HK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='HK', tag='HK')
countryTypeEnum.HU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='HU', tag='HU')
countryTypeEnum.IS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IS', tag='IS')
countryTypeEnum.IN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IN', tag='IN')
countryTypeEnum.ID = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ID', tag='ID')
countryTypeEnum.IR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IR', tag='IR')
countryTypeEnum.IQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IQ', tag='IQ')
countryTypeEnum.IE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IE', tag='IE')
countryTypeEnum.IM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IM', tag='IM')
countryTypeEnum.IL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IL', tag='IL')
countryTypeEnum.IT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='IT', tag='IT')
countryTypeEnum.JM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='JM', tag='JM')
countryTypeEnum.JP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='JP', tag='JP')
countryTypeEnum.JE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='JE', tag='JE')
countryTypeEnum.JO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='JO', tag='JO')
countryTypeEnum.KZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KZ', tag='KZ')
countryTypeEnum.KE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KE', tag='KE')
countryTypeEnum.KI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KI', tag='KI')
countryTypeEnum.KP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KP', tag='KP')
countryTypeEnum.KR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KR', tag='KR')
countryTypeEnum.KW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KW', tag='KW')
countryTypeEnum.KG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KG', tag='KG')
countryTypeEnum.LA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LA', tag='LA')
countryTypeEnum.LV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LV', tag='LV')
countryTypeEnum.LB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LB', tag='LB')
countryTypeEnum.LS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LS', tag='LS')
countryTypeEnum.LR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LR', tag='LR')
countryTypeEnum.LY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LY', tag='LY')
countryTypeEnum.LI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LI', tag='LI')
countryTypeEnum.LT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LT', tag='LT')
countryTypeEnum.LU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LU', tag='LU')
countryTypeEnum.MO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MO', tag='MO')
countryTypeEnum.MK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MK', tag='MK')
countryTypeEnum.MG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MG', tag='MG')
countryTypeEnum.MW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MW', tag='MW')
countryTypeEnum.MY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MY', tag='MY')
countryTypeEnum.MV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MV', tag='MV')
countryTypeEnum.ML = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ML', tag='ML')
countryTypeEnum.MT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MT', tag='MT')
countryTypeEnum.MH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MH', tag='MH')
countryTypeEnum.MQ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MQ', tag='MQ')
countryTypeEnum.MR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MR', tag='MR')
countryTypeEnum.MU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MU', tag='MU')
countryTypeEnum.YT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='YT', tag='YT')
countryTypeEnum.MX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MX', tag='MX')
countryTypeEnum.FM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='FM', tag='FM')
countryTypeEnum.MD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MD', tag='MD')
countryTypeEnum.MC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MC', tag='MC')
countryTypeEnum.MN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MN', tag='MN')
countryTypeEnum.MS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MS', tag='MS')
countryTypeEnum.MA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MA', tag='MA')
countryTypeEnum.MZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MZ', tag='MZ')
countryTypeEnum.MM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MM', tag='MM')
countryTypeEnum.NA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NA', tag='NA')
countryTypeEnum.NR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NR', tag='NR')
countryTypeEnum.NP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NP', tag='NP')
countryTypeEnum.NL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NL', tag='NL')
countryTypeEnum.AN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AN', tag='AN')
countryTypeEnum.NC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NC', tag='NC')
countryTypeEnum.NZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NZ', tag='NZ')
countryTypeEnum.NI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NI', tag='NI')
countryTypeEnum.NE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NE', tag='NE')
countryTypeEnum.NG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NG', tag='NG')
countryTypeEnum.NU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NU', tag='NU')
countryTypeEnum.NF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NF', tag='NF')
countryTypeEnum.MP = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MP', tag='MP')
countryTypeEnum.NO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='NO', tag='NO')
countryTypeEnum.OM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='OM', tag='OM')
countryTypeEnum.PK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PK', tag='PK')
countryTypeEnum.PW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PW', tag='PW')
countryTypeEnum.PS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PS', tag='PS')
countryTypeEnum.PA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PA', tag='PA')
countryTypeEnum.PG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PG', tag='PG')
countryTypeEnum.PY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PY', tag='PY')
countryTypeEnum.PE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PE', tag='PE')
countryTypeEnum.PH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PH', tag='PH')
countryTypeEnum.PN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PN', tag='PN')
countryTypeEnum.PL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PL', tag='PL')
countryTypeEnum.PT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PT', tag='PT')
countryTypeEnum.PR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PR', tag='PR')
countryTypeEnum.QA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='QA', tag='QA')
countryTypeEnum.RE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='RE', tag='RE')
countryTypeEnum.RO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='RO', tag='RO')
countryTypeEnum.RU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='RU', tag='RU')
countryTypeEnum.RW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='RW', tag='RW')
countryTypeEnum.BL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='BL', tag='BL')
countryTypeEnum.KN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='KN', tag='KN')
countryTypeEnum.LC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LC', tag='LC')
countryTypeEnum.MF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='MF', tag='MF')
countryTypeEnum.VC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VC', tag='VC')
countryTypeEnum.WS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='WS', tag='WS')
countryTypeEnum.SM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SM', tag='SM')
countryTypeEnum.ST = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ST', tag='ST')
countryTypeEnum.SA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SA', tag='SA')
countryTypeEnum.SN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SN', tag='SN')
countryTypeEnum.SC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SC', tag='SC')
countryTypeEnum.SL = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SL', tag='SL')
countryTypeEnum.SG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SG', tag='SG')
countryTypeEnum.SX = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SX', tag='SX')
countryTypeEnum.SK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SK', tag='SK')
countryTypeEnum.SI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SI', tag='SI')
countryTypeEnum.SB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SB', tag='SB')
countryTypeEnum.SO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SO', tag='SO')
countryTypeEnum.ZA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ZA', tag='ZA')
countryTypeEnum.GS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GS', tag='GS')
countryTypeEnum.ES = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ES', tag='ES')
countryTypeEnum.LK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='LK', tag='LK')
countryTypeEnum.SH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SH', tag='SH')
countryTypeEnum.PM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='PM', tag='PM')
countryTypeEnum.SD = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SD', tag='SD')
countryTypeEnum.SR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SR', tag='SR')
countryTypeEnum.SJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SJ', tag='SJ')
countryTypeEnum.SZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SZ', tag='SZ')
countryTypeEnum.SE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SE', tag='SE')
countryTypeEnum.CH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='CH', tag='CH')
countryTypeEnum.SY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SY', tag='SY')
countryTypeEnum.TW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TW', tag='TW')
countryTypeEnum.TJ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TJ', tag='TJ')
countryTypeEnum.TZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TZ', tag='TZ')
countryTypeEnum.TH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TH', tag='TH')
countryTypeEnum.TG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TG', tag='TG')
countryTypeEnum.TK = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TK', tag='TK')
countryTypeEnum.TO = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TO', tag='TO')
countryTypeEnum.TT = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TT', tag='TT')
countryTypeEnum.TN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TN', tag='TN')
countryTypeEnum.TR = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TR', tag='TR')
countryTypeEnum.TM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TM', tag='TM')
countryTypeEnum.TC = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TC', tag='TC')
countryTypeEnum.TV = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='TV', tag='TV')
countryTypeEnum.UG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='UG', tag='UG')
countryTypeEnum.UA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='UA', tag='UA')
countryTypeEnum.AE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='AE', tag='AE')
countryTypeEnum.GB = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='GB', tag='GB')
countryTypeEnum.US = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='US', tag='US')
countryTypeEnum.UM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='UM', tag='UM')
countryTypeEnum.UY = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='UY', tag='UY')
countryTypeEnum.UZ = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='UZ', tag='UZ')
countryTypeEnum.VU = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VU', tag='VU')
countryTypeEnum.VA = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VA', tag='VA')
countryTypeEnum.VE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VE', tag='VE')
countryTypeEnum.VN = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VN', tag='VN')
countryTypeEnum.VG = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VG', tag='VG')
countryTypeEnum.VI = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='VI', tag='VI')
countryTypeEnum.WF = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='WF', tag='WF')
countryTypeEnum.EH = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='EH', tag='EH')
countryTypeEnum.YE = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='YE', tag='YE')
countryTypeEnum.ZM = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ZM', tag='ZM')
countryTypeEnum.ZW = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ZW', tag='ZW')
countryTypeEnum.RS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='RS', tag='RS')
countryTypeEnum.ME = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='ME', tag='ME')
countryTypeEnum.SS = countryTypeEnum._CF_enumeration.addEnumeration(unicode_value='SS', tag='SS')
countryTypeEnum._InitializeFacetMap(countryTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'countryTypeEnum', countryTypeEnum)
_module_typeBindings.countryTypeEnum = countryTypeEnum

# Atomic simple type: {http://www.litle.com/schema}addressLineType
class addressLineType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addressLineType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 437, 4)
    _Documentation = None
addressLineType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35))
addressLineType._InitializeFacetMap(addressLineType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'addressLineType', addressLineType)
_module_typeBindings.addressLineType = addressLineType

# Atomic simple type: {http://www.litle.com/schema}cityType
class cityType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cityType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 442, 4)
    _Documentation = None
cityType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35))
cityType._InitializeFacetMap(cityType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'cityType', cityType)
_module_typeBindings.cityType = cityType

# Atomic simple type: {http://www.litle.com/schema}customBillingCityType
class customBillingCityType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'customBillingCityType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 447, 4)
    _Documentation = None
customBillingCityType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35))
customBillingCityType._InitializeFacetMap(customBillingCityType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'customBillingCityType', customBillingCityType)
_module_typeBindings.customBillingCityType = customBillingCityType

# Atomic simple type: {http://www.litle.com/schema}stateType
class stateType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stateType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 452, 4)
    _Documentation = None
stateType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stateType._InitializeFacetMap(stateType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stateType', stateType)
_module_typeBindings.stateType = stateType

# Atomic simple type: {http://www.litle.com/schema}zipType
class zipType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'zipType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 457, 4)
    _Documentation = None
zipType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
zipType._InitializeFacetMap(zipType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'zipType', zipType)
_module_typeBindings.zipType = zipType

# Atomic simple type: {http://www.litle.com/schema}emailType
class emailType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'emailType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 463, 4)
    _Documentation = None
emailType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
emailType._InitializeFacetMap(emailType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'emailType', emailType)
_module_typeBindings.emailType = emailType

# Atomic simple type: {http://www.litle.com/schema}phoneType
class phoneType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'phoneType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 468, 4)
    _Documentation = None
phoneType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
phoneType._InitializeFacetMap(phoneType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'phoneType', phoneType)
_module_typeBindings.phoneType = phoneType

# Atomic simple type: {http://www.litle.com/schema}nameType
class nameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 473, 4)
    _Documentation = None
nameType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
nameType._InitializeFacetMap(nameType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'nameType', nameType)
_module_typeBindings.nameType = nameType

# Atomic simple type: {http://www.litle.com/schema}cvNumType
class cvNumType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cvNumType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 478, 4)
    _Documentation = None
cvNumType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
cvNumType._InitializeFacetMap(cvNumType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'cvNumType', cvNumType)
_module_typeBindings.cvNumType = cvNumType

# Atomic simple type: {http://www.litle.com/schema}authCodeType
class authCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'authCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 483, 4)
    _Documentation = None
authCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(6))
authCodeType._InitializeFacetMap(authCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'authCodeType', authCodeType)
_module_typeBindings.authCodeType = authCodeType

# Atomic simple type: {http://www.litle.com/schema}customerIdType
class customerIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'customerIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 488, 4)
    _Documentation = None
customerIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
customerIdType._InitializeFacetMap(customerIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'customerIdType', customerIdType)
_module_typeBindings.customerIdType = customerIdType

# Atomic simple type: {http://www.litle.com/schema}customBillingUrlType
class customBillingUrlType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'customBillingUrlType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 493, 4)
    _Documentation = None
customBillingUrlType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(13))
customBillingUrlType._CF_pattern = pyxb.binding.facets.CF_pattern()
customBillingUrlType._CF_pattern.addPattern(pattern='[A-Z,a-z,0-9,/,\\-,_,.]*')
customBillingUrlType._InitializeFacetMap(customBillingUrlType._CF_maxLength,
   customBillingUrlType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'customBillingUrlType', customBillingUrlType)
_module_typeBindings.customBillingUrlType = customBillingUrlType

# Atomic simple type: {http://www.litle.com/schema}IIASFlagType
class IIASFlagType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IIASFlagType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 500, 4)
    _Documentation = None
IIASFlagType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IIASFlagType, enum_prefix=None)
IIASFlagType.Y = IIASFlagType._CF_enumeration.addEnumeration(unicode_value='Y', tag='Y')
IIASFlagType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
IIASFlagType._InitializeFacetMap(IIASFlagType._CF_enumeration,
   IIASFlagType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'IIASFlagType', IIASFlagType)
_module_typeBindings.IIASFlagType = IIASFlagType

# Atomic simple type: {http://www.litle.com/schema}driversLicenseType
class driversLicenseType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'driversLicenseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 507, 4)
    _Documentation = None
driversLicenseType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
driversLicenseType._InitializeFacetMap(driversLicenseType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'driversLicenseType', driversLicenseType)
_module_typeBindings.driversLicenseType = driversLicenseType

# Atomic simple type: {http://www.litle.com/schema}stateCodeType
class stateCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stateCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 513, 4)
    _Documentation = None
stateCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
stateCodeType._InitializeFacetMap(stateCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stateCodeType', stateCodeType)
_module_typeBindings.stateCodeType = stateCodeType

# Atomic simple type: {http://www.litle.com/schema}dateOfBirthType
class dateOfBirthType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dateOfBirthType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 519, 4)
    _Documentation = None
dateOfBirthType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
dateOfBirthType._InitializeFacetMap(dateOfBirthType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'dateOfBirthType', dateOfBirthType)
_module_typeBindings.dateOfBirthType = dateOfBirthType

# Atomic simple type: {http://www.litle.com/schema}firstNameType
class firstNameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'firstNameType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 525, 4)
    _Documentation = None
firstNameType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
firstNameType._InitializeFacetMap(firstNameType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'firstNameType', firstNameType)
_module_typeBindings.firstNameType = firstNameType

# Atomic simple type: {http://www.litle.com/schema}lastNameType
class lastNameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'lastNameType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 531, 4)
    _Documentation = None
lastNameType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
lastNameType._InitializeFacetMap(lastNameType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'lastNameType', lastNameType)
_module_typeBindings.lastNameType = lastNameType

# Atomic simple type: {http://www.litle.com/schema}middleInitialType
class middleInitialType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'middleInitialType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 537, 4)
    _Documentation = None
middleInitialType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
middleInitialType._InitializeFacetMap(middleInitialType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'middleInitialType', middleInitialType)
_module_typeBindings.middleInitialType = middleInitialType

# Atomic simple type: {http://www.litle.com/schema}companyName
class companyName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'companyName')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 543, 4)
    _Documentation = None
companyName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(40))
companyName._InitializeFacetMap(companyName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'companyName', companyName)
_module_typeBindings.companyName = companyName

# Atomic simple type: {http://www.litle.com/schema}redeliveryCycle
class redeliveryCycle (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'redeliveryCycle')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 549, 4)
    _Documentation = None
redeliveryCycle._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(1))
redeliveryCycle._InitializeFacetMap(redeliveryCycle._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', 'redeliveryCycle', redeliveryCycle)
_module_typeBindings.redeliveryCycle = redeliveryCycle

# Atomic simple type: {http://www.litle.com/schema}numberOfDeposits
class numberOfDeposits (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'numberOfDeposits')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 555, 4)
    _Documentation = None
numberOfDeposits._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(1))
numberOfDeposits._InitializeFacetMap(numberOfDeposits._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', 'numberOfDeposits', numberOfDeposits)
_module_typeBindings.numberOfDeposits = numberOfDeposits

# Atomic simple type: {http://www.litle.com/schema}ksnType
class ksnType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ksnType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 643, 4)
    _Documentation = None
ksnType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
ksnType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1028))
ksnType._InitializeFacetMap(ksnType._CF_minLength,
   ksnType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ksnType', ksnType)
_module_typeBindings.ksnType = ksnType

# Atomic simple type: {http://www.litle.com/schema}formatIdType
class formatIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'formatIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 650, 4)
    _Documentation = None
formatIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
formatIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1028))
formatIdType._InitializeFacetMap(formatIdType._CF_minLength,
   formatIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'formatIdType', formatIdType)
_module_typeBindings.formatIdType = formatIdType

# Atomic simple type: {http://www.litle.com/schema}encryptedTrackType
class encryptedTrackType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'encryptedTrackType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 657, 4)
    _Documentation = None
encryptedTrackType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
encryptedTrackType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1028))
encryptedTrackType._InitializeFacetMap(encryptedTrackType._CF_minLength,
   encryptedTrackType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'encryptedTrackType', encryptedTrackType)
_module_typeBindings.encryptedTrackType = encryptedTrackType

# Atomic simple type: {http://www.litle.com/schema}trackStatusType
class trackStatusType (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'trackStatusType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 664, 4)
    _Documentation = None
trackStatusType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=trackStatusType, value=pyxb.binding.datatypes.int(1028))
trackStatusType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=trackStatusType, value=pyxb.binding.datatypes.int(0))
trackStatusType._InitializeFacetMap(trackStatusType._CF_maxInclusive,
   trackStatusType._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'trackStatusType', trackStatusType)
_module_typeBindings.trackStatusType = trackStatusType

# Atomic simple type: {http://www.litle.com/schema}ccAccountNumberType
class ccAccountNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ccAccountNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 671, 4)
    _Documentation = None
ccAccountNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(13))
ccAccountNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
ccAccountNumberType._InitializeFacetMap(ccAccountNumberType._CF_minLength,
   ccAccountNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ccAccountNumberType', ccAccountNumberType)
_module_typeBindings.ccAccountNumberType = ccAccountNumberType

# Atomic simple type: {http://www.litle.com/schema}expDateType
class expDateType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'expDateType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 677, 4)
    _Documentation = None
expDateType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
expDateType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
expDateType._InitializeFacetMap(expDateType._CF_minLength,
   expDateType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'expDateType', expDateType)
_module_typeBindings.expDateType = expDateType

# Atomic simple type: {http://www.litle.com/schema}trackDataType
class trackDataType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'trackDataType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 683, 4)
    _Documentation = None
trackDataType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
trackDataType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
trackDataType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256))
trackDataType._InitializeFacetMap(trackDataType._CF_minLength,
   trackDataType._CF_whiteSpace,
   trackDataType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'trackDataType', trackDataType)
_module_typeBindings.trackDataType = trackDataType

# Atomic simple type: {http://www.litle.com/schema}threatMetrixSessionIdType
class threatMetrixSessionIdType (pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 697, 4)
    _Documentation = None
threatMetrixSessionIdType._CF_pattern = pyxb.binding.facets.CF_pattern()
threatMetrixSessionIdType._CF_pattern.addPattern(pattern='[-a-zA-Z0-9_]{1,128}')
threatMetrixSessionIdType._InitializeFacetMap(threatMetrixSessionIdType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'threatMetrixSessionIdType', threatMetrixSessionIdType)
_module_typeBindings.threatMetrixSessionIdType = threatMetrixSessionIdType

# Atomic simple type: {http://www.litle.com/schema}string30Type
class string30Type (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'string30Type')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 711, 4)
    _Documentation = None
string30Type._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
string30Type._InitializeFacetMap(string30Type._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'string30Type', string30Type)
_module_typeBindings.string30Type = string30Type

# Atomic simple type: {http://www.litle.com/schema}numberOfPaymentsType
class numberOfPaymentsType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'numberOfPaymentsType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 864, 4)
    _Documentation = None
numberOfPaymentsType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=numberOfPaymentsType, value=pyxb.binding.datatypes.integer(99))
numberOfPaymentsType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=numberOfPaymentsType, value=pyxb.binding.datatypes.integer(1))
numberOfPaymentsType._InitializeFacetMap(numberOfPaymentsType._CF_maxInclusive,
   numberOfPaymentsType._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'numberOfPaymentsType', numberOfPaymentsType)
_module_typeBindings.numberOfPaymentsType = numberOfPaymentsType

# Atomic simple type: {http://www.litle.com/schema}intervalTypeEnum
class intervalTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'intervalTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 871, 4)
    _Documentation = None
intervalTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=intervalTypeEnum, enum_prefix=None)
intervalTypeEnum.ANNUAL = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='ANNUAL', tag='ANNUAL')
intervalTypeEnum.SEMIANNUAL = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='SEMIANNUAL', tag='SEMIANNUAL')
intervalTypeEnum.QUARTERLY = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='QUARTERLY', tag='QUARTERLY')
intervalTypeEnum.MONTHLY = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='MONTHLY', tag='MONTHLY')
intervalTypeEnum.WEEKLY = intervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='WEEKLY', tag='WEEKLY')
intervalTypeEnum._InitializeFacetMap(intervalTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'intervalTypeEnum', intervalTypeEnum)
_module_typeBindings.intervalTypeEnum = intervalTypeEnum

# Atomic simple type: {http://www.litle.com/schema}trialIntervalTypeEnum
class trialIntervalTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'trialIntervalTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 881, 4)
    _Documentation = None
trialIntervalTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=trialIntervalTypeEnum, enum_prefix=None)
trialIntervalTypeEnum.MONTH = trialIntervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='MONTH', tag='MONTH')
trialIntervalTypeEnum.DAY = trialIntervalTypeEnum._CF_enumeration.addEnumeration(unicode_value='DAY', tag='DAY')
trialIntervalTypeEnum._InitializeFacetMap(trialIntervalTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'trialIntervalTypeEnum', trialIntervalTypeEnum)
_module_typeBindings.trialIntervalTypeEnum = trialIntervalTypeEnum

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1015, 20)
    _Documentation = None
STD_ANON._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON._CF_pattern.addPattern(pattern='(\\d{5})?\\d{4}')
STD_ANON._InitializeFacetMap(STD_ANON._CF_pattern)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1024, 20)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.New = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='New', tag='New')
STD_ANON_.Existing = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='Existing', tag='Existing')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1038, 20)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.Own = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Own', tag='Own')
STD_ANON_2.Rent = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Rent', tag='Rent')
STD_ANON_2.Other = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1047, 20)
    _Documentation = None
STD_ANON_3._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(2))
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_totalDigits)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1054, 20)
    _Documentation = None
STD_ANON_4._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(2))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_totalDigits)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1065, 8)
    _Documentation = None
STD_ANON_5._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2))
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_length)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1079, 20)
    _Documentation = None
STD_ANON_6._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(5))
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_totalDigits)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1087, 20)
    _Documentation = None
STD_ANON_7._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(4))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_totalDigits)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1106, 20)
    _Documentation = None
STD_ANON_8._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(4))
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_totalDigits)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1126, 20)
    _Documentation = None
STD_ANON_9._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(8))
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_totalDigits)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1399, 52)
    _Documentation = None
STD_ANON_10._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
STD_ANON_10._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
STD_ANON_10._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(17))
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_minLength,
   STD_ANON_10._CF_whiteSpace,
   STD_ANON_10._CF_maxLength)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1408, 52)
    _Documentation = None
STD_ANON_11._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
STD_ANON_11._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
STD_ANON_11._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(127))
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_minLength,
   STD_ANON_11._CF_whiteSpace,
   STD_ANON_11._CF_maxLength)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1554, 20)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.CNC = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='CNC', tag='CNC')
STD_ANON_12.DIG = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='DIG', tag='DIG')
STD_ANON_12.PHY = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='PHY', tag='PHY')
STD_ANON_12.SVC = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='SVC', tag='SVC')
STD_ANON_12.TBD = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='TBD', tag='TBD')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: {http://www.litle.com/schema}payPalNotesType
class payPalNotesType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'payPalNotesType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1645, 4)
    _Documentation = None
payPalNotesType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
payPalNotesType._InitializeFacetMap(payPalNotesType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'payPalNotesType', payPalNotesType)
_module_typeBindings.payPalNotesType = payPalNotesType

# Atomic simple type: {http://www.litle.com/schema}actionReasonType
class actionReasonType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'actionReasonType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1651, 4)
    _Documentation = None
actionReasonType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
actionReasonType._InitializeFacetMap(actionReasonType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'actionReasonType', actionReasonType)
_module_typeBindings.actionReasonType = actionReasonType

# Atomic simple type: {http://www.litle.com/schema}taxTypeIdentifierEnum
class taxTypeIdentifierEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifierEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1672, 4)
    _Documentation = None
taxTypeIdentifierEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=taxTypeIdentifierEnum, enum_prefix=None)
taxTypeIdentifierEnum.n00 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='00', tag='n00')
taxTypeIdentifierEnum.n01 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='01', tag='n01')
taxTypeIdentifierEnum.n02 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='02', tag='n02')
taxTypeIdentifierEnum.n03 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='03', tag='n03')
taxTypeIdentifierEnum.n04 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='04', tag='n04')
taxTypeIdentifierEnum.n05 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='05', tag='n05')
taxTypeIdentifierEnum.n06 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='06', tag='n06')
taxTypeIdentifierEnum.n10 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='10', tag='n10')
taxTypeIdentifierEnum.n11 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='11', tag='n11')
taxTypeIdentifierEnum.n12 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='12', tag='n12')
taxTypeIdentifierEnum.n13 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='13', tag='n13')
taxTypeIdentifierEnum.n14 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='14', tag='n14')
taxTypeIdentifierEnum.n20 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='20', tag='n20')
taxTypeIdentifierEnum.n21 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='21', tag='n21')
taxTypeIdentifierEnum.n22 = taxTypeIdentifierEnum._CF_enumeration.addEnumeration(unicode_value='22', tag='n22')
taxTypeIdentifierEnum._InitializeFacetMap(taxTypeIdentifierEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'taxTypeIdentifierEnum', taxTypeIdentifierEnum)
_module_typeBindings.taxTypeIdentifierEnum = taxTypeIdentifierEnum

# Atomic simple type: {http://www.litle.com/schema}fundingSourceTypeEnum
class fundingSourceTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fundingSourceTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1792, 4)
    _Documentation = None
fundingSourceTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=fundingSourceTypeEnum, enum_prefix=None)
fundingSourceTypeEnum.UNKNOWN = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value='UNKNOWN', tag='UNKNOWN')
fundingSourceTypeEnum.PREPAID = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value='PREPAID', tag='PREPAID')
fundingSourceTypeEnum.FSA = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value='FSA', tag='FSA')
fundingSourceTypeEnum.CREDIT = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value='CREDIT', tag='CREDIT')
fundingSourceTypeEnum.DEBIT = fundingSourceTypeEnum._CF_enumeration.addEnumeration(unicode_value='DEBIT', tag='DEBIT')
fundingSourceTypeEnum._InitializeFacetMap(fundingSourceTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'fundingSourceTypeEnum', fundingSourceTypeEnum)
_module_typeBindings.fundingSourceTypeEnum = fundingSourceTypeEnum

# Atomic simple type: {http://www.litle.com/schema}affluenceTypeEnum
class affluenceTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'affluenceTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1802, 4)
    _Documentation = None
affluenceTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=affluenceTypeEnum, enum_prefix=None)
affluenceTypeEnum.AFFLUENT = affluenceTypeEnum._CF_enumeration.addEnumeration(unicode_value='AFFLUENT', tag='AFFLUENT')
affluenceTypeEnum.MASS_AFFLUENT = affluenceTypeEnum._CF_enumeration.addEnumeration(unicode_value='MASS AFFLUENT', tag='MASS_AFFLUENT')
affluenceTypeEnum._InitializeFacetMap(affluenceTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'affluenceTypeEnum', affluenceTypeEnum)
_module_typeBindings.affluenceTypeEnum = affluenceTypeEnum

# Atomic simple type: {http://www.litle.com/schema}reloadablePrepaidTypeEnum
class reloadablePrepaidTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'reloadablePrepaidTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1809, 4)
    _Documentation = None
reloadablePrepaidTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=reloadablePrepaidTypeEnum, enum_prefix=None)
reloadablePrepaidTypeEnum.UNKNOWN = reloadablePrepaidTypeEnum._CF_enumeration.addEnumeration(unicode_value='UNKNOWN', tag='UNKNOWN')
reloadablePrepaidTypeEnum.YES = reloadablePrepaidTypeEnum._CF_enumeration.addEnumeration(unicode_value='YES', tag='YES')
reloadablePrepaidTypeEnum.NO = reloadablePrepaidTypeEnum._CF_enumeration.addEnumeration(unicode_value='NO', tag='NO')
reloadablePrepaidTypeEnum._InitializeFacetMap(reloadablePrepaidTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'reloadablePrepaidTypeEnum', reloadablePrepaidTypeEnum)
_module_typeBindings.reloadablePrepaidTypeEnum = reloadablePrepaidTypeEnum

# Atomic simple type: {http://www.litle.com/schema}cardProductTypeEnum
class cardProductTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardProductTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1817, 4)
    _Documentation = None
cardProductTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cardProductTypeEnum, enum_prefix=None)
cardProductTypeEnum.UNKNOWN = cardProductTypeEnum._CF_enumeration.addEnumeration(unicode_value='UNKNOWN', tag='UNKNOWN')
cardProductTypeEnum.COMMERCIAL = cardProductTypeEnum._CF_enumeration.addEnumeration(unicode_value='COMMERCIAL', tag='COMMERCIAL')
cardProductTypeEnum.CONSUMER = cardProductTypeEnum._CF_enumeration.addEnumeration(unicode_value='CONSUMER', tag='CONSUMER')
cardProductTypeEnum._InitializeFacetMap(cardProductTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'cardProductTypeEnum', cardProductTypeEnum)
_module_typeBindings.cardProductTypeEnum = cardProductTypeEnum

# Atomic simple type: {http://www.litle.com/schema}recycleByTypeEnum
class recycleByTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recycleByTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1832, 4)
    _Documentation = None
recycleByTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=recycleByTypeEnum, enum_prefix=None)
recycleByTypeEnum.Merchant = recycleByTypeEnum._CF_enumeration.addEnumeration(unicode_value='Merchant', tag='Merchant')
recycleByTypeEnum.Litle = recycleByTypeEnum._CF_enumeration.addEnumeration(unicode_value='Litle', tag='Litle')
recycleByTypeEnum.None_ = recycleByTypeEnum._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
recycleByTypeEnum._InitializeFacetMap(recycleByTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'recycleByTypeEnum', recycleByTypeEnum)
_module_typeBindings.recycleByTypeEnum = recycleByTypeEnum

# Atomic simple type: {http://www.litle.com/schema}echeckAccountTypeEnum
class echeckAccountTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckAccountTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2560, 4)
    _Documentation = None
echeckAccountTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=echeckAccountTypeEnum, enum_prefix=None)
echeckAccountTypeEnum.Checking = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value='Checking', tag='Checking')
echeckAccountTypeEnum.Savings = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value='Savings', tag='Savings')
echeckAccountTypeEnum.Corporate = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value='Corporate', tag='Corporate')
echeckAccountTypeEnum.Corp_Savings = echeckAccountTypeEnum._CF_enumeration.addEnumeration(unicode_value='Corp Savings', tag='Corp_Savings')
echeckAccountTypeEnum._InitializeFacetMap(echeckAccountTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'echeckAccountTypeEnum', echeckAccountTypeEnum)
_module_typeBindings.echeckAccountTypeEnum = echeckAccountTypeEnum

# Atomic simple type: {http://www.litle.com/schema}echeckAccountNumberType
class echeckAccountNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckAccountNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2568, 4)
    _Documentation = None
echeckAccountNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(17))
echeckAccountNumberType._InitializeFacetMap(echeckAccountNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'echeckAccountNumberType', echeckAccountNumberType)
_module_typeBindings.echeckAccountNumberType = echeckAccountNumberType

# Atomic simple type: {http://www.litle.com/schema}routingNumberType
class routingNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'routingNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2573, 4)
    _Documentation = None
routingNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
routingNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(9))
routingNumberType._InitializeFacetMap(routingNumberType._CF_minLength,
   routingNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'routingNumberType', routingNumberType)
_module_typeBindings.routingNumberType = routingNumberType

# Atomic simple type: {http://www.litle.com/schema}checkNumberType
class checkNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'checkNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2579, 4)
    _Documentation = None
checkNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
checkNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(15))
checkNumberType._InitializeFacetMap(checkNumberType._CF_minLength,
   checkNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'checkNumberType', checkNumberType)
_module_typeBindings.checkNumberType = checkNumberType

# Atomic simple type: {http://www.litle.com/schema}authenticationValueType
class authenticationValueType (pyxb.binding.datatypes.base64Binary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'authenticationValueType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2587, 4)
    _Documentation = None
authenticationValueType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(56))
authenticationValueType._InitializeFacetMap(authenticationValueType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'authenticationValueType', authenticationValueType)
_module_typeBindings.authenticationValueType = authenticationValueType

# Atomic simple type: {http://www.litle.com/schema}authenticationTransactionIdType
class authenticationTransactionIdType (pyxb.binding.datatypes.base64Binary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2592, 4)
    _Documentation = None
authenticationTransactionIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(28))
authenticationTransactionIdType._InitializeFacetMap(authenticationTransactionIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'authenticationTransactionIdType', authenticationTransactionIdType)
_module_typeBindings.authenticationTransactionIdType = authenticationTransactionIdType

# Atomic simple type: {http://www.litle.com/schema}reportGroupType
class reportGroupType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'reportGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2598, 4)
    _Documentation = None
reportGroupType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
reportGroupType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
reportGroupType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
reportGroupType._InitializeFacetMap(reportGroupType._CF_minLength,
   reportGroupType._CF_whiteSpace,
   reportGroupType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'reportGroupType', reportGroupType)
_module_typeBindings.reportGroupType = reportGroupType

# Atomic simple type: {http://www.litle.com/schema}merchantCategoryCodeType
class merchantCategoryCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'merchantCategoryCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2605, 4)
    _Documentation = None
merchantCategoryCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
merchantCategoryCodeType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
merchantCategoryCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
merchantCategoryCodeType._InitializeFacetMap(merchantCategoryCodeType._CF_minLength,
   merchantCategoryCodeType._CF_whiteSpace,
   merchantCategoryCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'merchantCategoryCodeType', merchantCategoryCodeType)
_module_typeBindings.merchantCategoryCodeType = merchantCategoryCodeType

# Atomic simple type: {http://www.litle.com/schema}sellerIdType
class sellerIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sellerIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2612, 4)
    _Documentation = None
sellerIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
sellerIdType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
sellerIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(16))
sellerIdType._InitializeFacetMap(sellerIdType._CF_minLength,
   sellerIdType._CF_whiteSpace,
   sellerIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'sellerIdType', sellerIdType)
_module_typeBindings.sellerIdType = sellerIdType

# Atomic simple type: {http://www.litle.com/schema}orderSourceType
class orderSourceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'orderSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2619, 4)
    _Documentation = None
orderSourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=orderSourceType, enum_prefix=None)
orderSourceType.ecommerce = orderSourceType._CF_enumeration.addEnumeration(unicode_value='ecommerce', tag='ecommerce')
orderSourceType.installment = orderSourceType._CF_enumeration.addEnumeration(unicode_value='installment', tag='installment')
orderSourceType.mailorder = orderSourceType._CF_enumeration.addEnumeration(unicode_value='mailorder', tag='mailorder')
orderSourceType.recurring = orderSourceType._CF_enumeration.addEnumeration(unicode_value='recurring', tag='recurring')
orderSourceType.retail = orderSourceType._CF_enumeration.addEnumeration(unicode_value='retail', tag='retail')
orderSourceType.telephone = orderSourceType._CF_enumeration.addEnumeration(unicode_value='telephone', tag='telephone')
orderSourceType.n3dsAuthenticated = orderSourceType._CF_enumeration.addEnumeration(unicode_value='3dsAuthenticated', tag='n3dsAuthenticated')
orderSourceType.n3dsAttempted = orderSourceType._CF_enumeration.addEnumeration(unicode_value='3dsAttempted', tag='n3dsAttempted')
orderSourceType.recurringtel = orderSourceType._CF_enumeration.addEnumeration(unicode_value='recurringtel', tag='recurringtel')
orderSourceType.echeckppd = orderSourceType._CF_enumeration.addEnumeration(unicode_value='echeckppd', tag='echeckppd')
orderSourceType.applepay = orderSourceType._CF_enumeration.addEnumeration(unicode_value='applepay', tag='applepay')
orderSourceType._InitializeFacetMap(orderSourceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'orderSourceType', orderSourceType)
_module_typeBindings.orderSourceType = orderSourceType

# Atomic simple type: {http://www.litle.com/schema}posCapabilityTypeEnum
class posCapabilityTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posCapabilityTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2637, 4)
    _Documentation = None
posCapabilityTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posCapabilityTypeEnum, enum_prefix=None)
posCapabilityTypeEnum.notused = posCapabilityTypeEnum._CF_enumeration.addEnumeration(unicode_value='notused', tag='notused')
posCapabilityTypeEnum.magstripe = posCapabilityTypeEnum._CF_enumeration.addEnumeration(unicode_value='magstripe', tag='magstripe')
posCapabilityTypeEnum.keyedonly = posCapabilityTypeEnum._CF_enumeration.addEnumeration(unicode_value='keyedonly', tag='keyedonly')
posCapabilityTypeEnum._InitializeFacetMap(posCapabilityTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'posCapabilityTypeEnum', posCapabilityTypeEnum)
_module_typeBindings.posCapabilityTypeEnum = posCapabilityTypeEnum

# Atomic simple type: {http://www.litle.com/schema}posEntryModeTypeEnum
class posEntryModeTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posEntryModeTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2644, 4)
    _Documentation = None
posEntryModeTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posEntryModeTypeEnum, enum_prefix=None)
posEntryModeTypeEnum.notused = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value='notused', tag='notused')
posEntryModeTypeEnum.keyed = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value='keyed', tag='keyed')
posEntryModeTypeEnum.track1 = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value='track1', tag='track1')
posEntryModeTypeEnum.track2 = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value='track2', tag='track2')
posEntryModeTypeEnum.completeread = posEntryModeTypeEnum._CF_enumeration.addEnumeration(unicode_value='completeread', tag='completeread')
posEntryModeTypeEnum._InitializeFacetMap(posEntryModeTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'posEntryModeTypeEnum', posEntryModeTypeEnum)
_module_typeBindings.posEntryModeTypeEnum = posEntryModeTypeEnum

# Atomic simple type: {http://www.litle.com/schema}posCardholderIdTypeEnum
class posCardholderIdTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posCardholderIdTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2653, 4)
    _Documentation = None
posCardholderIdTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posCardholderIdTypeEnum, enum_prefix=None)
posCardholderIdTypeEnum.signature = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value='signature', tag='signature')
posCardholderIdTypeEnum.pin = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value='pin', tag='pin')
posCardholderIdTypeEnum.nopin = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value='nopin', tag='nopin')
posCardholderIdTypeEnum.directmarket = posCardholderIdTypeEnum._CF_enumeration.addEnumeration(unicode_value='directmarket', tag='directmarket')
posCardholderIdTypeEnum._InitializeFacetMap(posCardholderIdTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'posCardholderIdTypeEnum', posCardholderIdTypeEnum)
_module_typeBindings.posCardholderIdTypeEnum = posCardholderIdTypeEnum

# Atomic simple type: {http://www.litle.com/schema}posCatLevelEnum
class posCatLevelEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'posCatLevelEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2661, 4)
    _Documentation = None
posCatLevelEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=posCatLevelEnum, enum_prefix=None)
posCatLevelEnum.self_service = posCatLevelEnum._CF_enumeration.addEnumeration(unicode_value='self service', tag='self_service')
posCatLevelEnum._InitializeFacetMap(posCatLevelEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'posCatLevelEnum', posCatLevelEnum)
_module_typeBindings.posCatLevelEnum = posCatLevelEnum

# Atomic simple type: {http://www.litle.com/schema}descriptorType
class descriptorType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'descriptorType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2666, 4)
    _Documentation = None
descriptorType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
descriptorType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
descriptorType._CF_pattern = pyxb.binding.facets.CF_pattern()
descriptorType._CF_pattern.addPattern(pattern="[A-Z,a-z,0-9, ,\\*,,,\\-,',#,&,.]*")
descriptorType._InitializeFacetMap(descriptorType._CF_minLength,
   descriptorType._CF_maxLength,
   descriptorType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'descriptorType', descriptorType)
_module_typeBindings.descriptorType = descriptorType

# Atomic simple type: {http://www.litle.com/schema}customBillingPhoneType
class customBillingPhoneType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'customBillingPhoneType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2673, 4)
    _Documentation = None
customBillingPhoneType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(13))
customBillingPhoneType._CF_pattern = pyxb.binding.facets.CF_pattern()
customBillingPhoneType._CF_pattern.addPattern(pattern='[0-9]*')
customBillingPhoneType._InitializeFacetMap(customBillingPhoneType._CF_maxLength,
   customBillingPhoneType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'customBillingPhoneType', customBillingPhoneType)
_module_typeBindings.customBillingPhoneType = customBillingPhoneType

# Atomic simple type: {http://www.litle.com/schema}customerReferenceType
class customerReferenceType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'customerReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2679, 4)
    _Documentation = None
customerReferenceType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
customerReferenceType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
customerReferenceType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(17))
customerReferenceType._InitializeFacetMap(customerReferenceType._CF_minLength,
   customerReferenceType._CF_whiteSpace,
   customerReferenceType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'customerReferenceType', customerReferenceType)
_module_typeBindings.customerReferenceType = customerReferenceType

# Atomic simple type: {http://www.litle.com/schema}invoiceReferenceNumberType
class invoiceReferenceNumberType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2686, 4)
    _Documentation = None
invoiceReferenceNumberType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
invoiceReferenceNumberType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(15))
invoiceReferenceNumberType._InitializeFacetMap(invoiceReferenceNumberType._CF_minLength,
   invoiceReferenceNumberType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'invoiceReferenceNumberType', invoiceReferenceNumberType)
_module_typeBindings.invoiceReferenceNumberType = invoiceReferenceNumberType

# Atomic simple type: {http://www.litle.com/schema}cardAcceptorTaxIdType
class cardAcceptorTaxIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2693, 4)
    _Documentation = None
cardAcceptorTaxIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
cardAcceptorTaxIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
cardAcceptorTaxIdType._InitializeFacetMap(cardAcceptorTaxIdType._CF_minLength,
   cardAcceptorTaxIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'cardAcceptorTaxIdType', cardAcceptorTaxIdType)
_module_typeBindings.cardAcceptorTaxIdType = cardAcceptorTaxIdType

# Atomic simple type: {http://www.litle.com/schema}taxRateType
class taxRateType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'taxRateType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2699, 4)
    _Documentation = None
taxRateType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(5))
taxRateType._InitializeFacetMap(taxRateType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', 'taxRateType', taxRateType)
_module_typeBindings.taxRateType = taxRateType

# Atomic simple type: {http://www.litle.com/schema}itemSequenceNumberType
class itemSequenceNumberType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2704, 4)
    _Documentation = None
itemSequenceNumberType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=itemSequenceNumberType, value=pyxb.binding.datatypes.integer(99))
itemSequenceNumberType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=itemSequenceNumberType, value=pyxb.binding.datatypes.integer(1))
itemSequenceNumberType._InitializeFacetMap(itemSequenceNumberType._CF_maxInclusive,
   itemSequenceNumberType._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'itemSequenceNumberType', itemSequenceNumberType)
_module_typeBindings.itemSequenceNumberType = itemSequenceNumberType

# Atomic simple type: {http://www.litle.com/schema}itemDescriptionType
class itemDescriptionType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'itemDescriptionType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2710, 4)
    _Documentation = None
itemDescriptionType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
itemDescriptionType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(26))
itemDescriptionType._InitializeFacetMap(itemDescriptionType._CF_minLength,
   itemDescriptionType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'itemDescriptionType', itemDescriptionType)
_module_typeBindings.itemDescriptionType = itemDescriptionType

# Atomic simple type: {http://www.litle.com/schema}productCodeType
class productCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'productCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2716, 4)
    _Documentation = None
productCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
productCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12))
productCodeType._InitializeFacetMap(productCodeType._CF_minLength,
   productCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'productCodeType', productCodeType)
_module_typeBindings.productCodeType = productCodeType

# Atomic simple type: {http://www.litle.com/schema}commodityCodeType
class commodityCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'commodityCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2723, 4)
    _Documentation = None
commodityCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
commodityCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12))
commodityCodeType._InitializeFacetMap(commodityCodeType._CF_minLength,
   commodityCodeType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'commodityCodeType', commodityCodeType)
_module_typeBindings.commodityCodeType = commodityCodeType

# Atomic simple type: {http://www.litle.com/schema}quantityType
class quantityType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'quantityType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2729, 4)
    _Documentation = None
quantityType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(12))
quantityType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=quantityType, value=pyxb.binding.datatypes.decimal('0.0'))
quantityType._InitializeFacetMap(quantityType._CF_totalDigits,
   quantityType._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'quantityType', quantityType)
_module_typeBindings.quantityType = quantityType

# Atomic simple type: {http://www.litle.com/schema}unitOfMeasureType
class unitOfMeasureType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasureType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2735, 4)
    _Documentation = None
unitOfMeasureType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
unitOfMeasureType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12))
unitOfMeasureType._InitializeFacetMap(unitOfMeasureType._CF_minLength,
   unitOfMeasureType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'unitOfMeasureType', unitOfMeasureType)
_module_typeBindings.unitOfMeasureType = unitOfMeasureType

# Atomic simple type: {http://www.litle.com/schema}unitCostType
class unitCostType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unitCostType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2741, 4)
    _Documentation = None
unitCostType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(12))
unitCostType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=unitCostType, value=pyxb.binding.datatypes.decimal('0.0'))
unitCostType._InitializeFacetMap(unitCostType._CF_totalDigits,
   unitCostType._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'unitCostType', unitCostType)
_module_typeBindings.unitCostType = unitCostType

# Atomic simple type: {http://www.litle.com/schema}ipAddress
class ipAddress (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ipAddress')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2748, 4)
    _Documentation = None
ipAddress._CF_pattern = pyxb.binding.facets.CF_pattern()
ipAddress._CF_pattern.addPattern(pattern='(\\d{1,3}.){3}\\d{1,3}')
ipAddress._InitializeFacetMap(ipAddress._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ipAddress', ipAddress)
_module_typeBindings.ipAddress = ipAddress

# Atomic simple type: {http://www.litle.com/schema}campaignType
class campaignType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'campaignType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2762, 4)
    _Documentation = None
campaignType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
campaignType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
campaignType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
campaignType._InitializeFacetMap(campaignType._CF_minLength,
   campaignType._CF_whiteSpace,
   campaignType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'campaignType', campaignType)
_module_typeBindings.campaignType = campaignType

# Atomic simple type: {http://www.litle.com/schema}affiliateType
class affiliateType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'affiliateType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2770, 4)
    _Documentation = None
affiliateType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
affiliateType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
affiliateType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
affiliateType._InitializeFacetMap(affiliateType._CF_minLength,
   affiliateType._CF_whiteSpace,
   affiliateType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'affiliateType', affiliateType)
_module_typeBindings.affiliateType = affiliateType

# Atomic simple type: {http://www.litle.com/schema}merchantGroupingIdType
class merchantGroupingIdType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingIdType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2778, 4)
    _Documentation = None
merchantGroupingIdType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
merchantGroupingIdType._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
merchantGroupingIdType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
merchantGroupingIdType._InitializeFacetMap(merchantGroupingIdType._CF_minLength,
   merchantGroupingIdType._CF_whiteSpace,
   merchantGroupingIdType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'merchantGroupingIdType', merchantGroupingIdType)
_module_typeBindings.merchantGroupingIdType = merchantGroupingIdType

# Atomic simple type: {http://www.litle.com/schema}walletSourceType
class walletSourceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'walletSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2851, 4)
    _Documentation = None
walletSourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=walletSourceType, enum_prefix=None)
walletSourceType.MasterPass = walletSourceType._CF_enumeration.addEnumeration(unicode_value='MasterPass', tag='MasterPass')
walletSourceType._InitializeFacetMap(walletSourceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'walletSourceType', walletSourceType)
_module_typeBindings.walletSourceType = walletSourceType

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2869, 16)
    _Documentation = None
STD_ANON_13._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2000))
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_maxLength)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2877, 16)
    _Documentation = None
STD_ANON_14._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10000))
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_maxLength)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2884, 16)
    _Documentation = None
STD_ANON_15._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(5))
STD_ANON_15._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_minLength,
   STD_ANON_15._CF_maxLength)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2897, 16)
    _Documentation = None
STD_ANON_16._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10000))
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_maxLength)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2904, 16)
    _Documentation = None
STD_ANON_17._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(400))
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_maxLength)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2911, 16)
    _Documentation = None
STD_ANON_18._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(200))
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_maxLength)
_module_typeBindings.STD_ANON_18 = STD_ANON_18

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2918, 16)
    _Documentation = None
STD_ANON_19._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(250))
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_maxLength)
_module_typeBindings.STD_ANON_19 = STD_ANON_19

# Atomic simple type: {http://www.litle.com/schema}processingTypeEnum
class processingTypeEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'processingTypeEnum')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2943, 4)
    _Documentation = None
processingTypeEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=processingTypeEnum, enum_prefix=None)
processingTypeEnum.accountFunding = processingTypeEnum._CF_enumeration.addEnumeration(unicode_value='accountFunding', tag='accountFunding')
processingTypeEnum.initialRecurring = processingTypeEnum._CF_enumeration.addEnumeration(unicode_value='initialRecurring', tag='initialRecurring')
processingTypeEnum.initialInstallment = processingTypeEnum._CF_enumeration.addEnumeration(unicode_value='initialInstallment', tag='initialInstallment')
processingTypeEnum.initialCOF = processingTypeEnum._CF_enumeration.addEnumeration(unicode_value='initialCOF', tag='initialCOF')
processingTypeEnum.merchantInitiatedCOF = processingTypeEnum._CF_enumeration.addEnumeration(unicode_value='merchantInitiatedCOF', tag='merchantInitiatedCOF')
processingTypeEnum.cardholderInitiatedCOF = processingTypeEnum._CF_enumeration.addEnumeration(unicode_value='cardholderInitiatedCOF', tag='cardholderInitiatedCOF')
processingTypeEnum._InitializeFacetMap(processingTypeEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'processingTypeEnum', processingTypeEnum)
_module_typeBindings.processingTypeEnum = processingTypeEnum

# Atomic simple type: {http://www.litle.com/schema}batchTotalAmountType
class batchTotalAmountType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'batchTotalAmountType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3162, 4)
    _Documentation = None
batchTotalAmountType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(10))
batchTotalAmountType._InitializeFacetMap(batchTotalAmountType._CF_totalDigits)
Namespace.addCategoryObject('typeBinding', 'batchTotalAmountType', batchTotalAmountType)
_module_typeBindings.batchTotalAmountType = batchTotalAmountType

# Atomic simple type: {http://www.litle.com/schema}template
class template (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'template')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3168, 4)
    _Documentation = None
template._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
template._InitializeFacetMap(template._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'template', template)
_module_typeBindings.template = template

# Atomic simple type: [anonymous]
class STD_ANON_20 (emailType):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 576, 16)
    _Documentation = None
STD_ANON_20._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_maxLength)
_module_typeBindings.STD_ANON_20 = STD_ANON_20

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}user uses Python identifier user
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'user'), 'user', '__httpwww_litle_comschema_CTD_ANON_httpwww_litle_comschemauser', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 8, 16), )

    
    user = property(__user.value, __user.set, None, None)

    
    # Element {http://www.litle.com/schema}password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'password'), 'password', '__httpwww_litle_comschema_CTD_ANON_httpwww_litle_comschemapassword', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 9, 16), )

    
    password = property(__password.value, __password.set, None, None)

    _ElementMap.update({
        __user.name() : __user,
        __password.name() : __password
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.litle.com/schema}contact with content type ELEMENT_ONLY
class contact (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}contact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'contact')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 561, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 563, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.litle.com/schema}firstName uses Python identifier firstName
    __firstName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'firstName'), 'firstName', '__httpwww_litle_comschema_contact_httpwww_litle_comschemafirstName', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 564, 12), )

    
    firstName = property(__firstName.value, __firstName.set, None, None)

    
    # Element {http://www.litle.com/schema}middleInitial uses Python identifier middleInitial
    __middleInitial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'middleInitial'), 'middleInitial', '__httpwww_litle_comschema_contact_httpwww_litle_comschemamiddleInitial', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 565, 12), )

    
    middleInitial = property(__middleInitial.value, __middleInitial.set, None, None)

    
    # Element {http://www.litle.com/schema}lastName uses Python identifier lastName
    __lastName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lastName'), 'lastName', '__httpwww_litle_comschema_contact_httpwww_litle_comschemalastName', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 566, 12), )

    
    lastName = property(__lastName.value, __lastName.set, None, None)

    
    # Element {http://www.litle.com/schema}companyName uses Python identifier companyName
    __companyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'companyName'), 'companyName', '__httpwww_litle_comschema_contact_httpwww_litle_comschemacompanyName', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 567, 12), )

    
    companyName = property(__companyName.value, __companyName.set, None, None)

    
    # Element {http://www.litle.com/schema}addressLine1 uses Python identifier addressLine1
    __addressLine1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressLine1'), 'addressLine1', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaaddressLine1', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 568, 12), )

    
    addressLine1 = property(__addressLine1.value, __addressLine1.set, None, None)

    
    # Element {http://www.litle.com/schema}addressLine2 uses Python identifier addressLine2
    __addressLine2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressLine2'), 'addressLine2', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaaddressLine2', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 569, 12), )

    
    addressLine2 = property(__addressLine2.value, __addressLine2.set, None, None)

    
    # Element {http://www.litle.com/schema}addressLine3 uses Python identifier addressLine3
    __addressLine3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressLine3'), 'addressLine3', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaaddressLine3', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 570, 12), )

    
    addressLine3 = property(__addressLine3.value, __addressLine3.set, None, None)

    
    # Element {http://www.litle.com/schema}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'city'), 'city', '__httpwww_litle_comschema_contact_httpwww_litle_comschemacity', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 571, 12), )

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {http://www.litle.com/schema}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_litle_comschema_contact_httpwww_litle_comschemastate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 572, 12), )

    
    state = property(__state.value, __state.set, None, None)

    
    # Element {http://www.litle.com/schema}zip uses Python identifier zip
    __zip = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zip'), 'zip', '__httpwww_litle_comschema_contact_httpwww_litle_comschemazip', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 573, 12), )

    
    zip = property(__zip.value, __zip.set, None, None)

    
    # Element {http://www.litle.com/schema}country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'country'), 'country', '__httpwww_litle_comschema_contact_httpwww_litle_comschemacountry', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 574, 12), )

    
    country = property(__country.value, __country.set, None, None)

    
    # Element {http://www.litle.com/schema}email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'email'), 'email', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaemail', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 575, 12), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element {http://www.litle.com/schema}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phone'), 'phone', '__httpwww_litle_comschema_contact_httpwww_litle_comschemaphone', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 582, 12), )

    
    phone = property(__phone.value, __phone.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __firstName.name() : __firstName,
        __middleInitial.name() : __middleInitial,
        __lastName.name() : __lastName,
        __companyName.name() : __companyName,
        __addressLine1.name() : __addressLine1,
        __addressLine2.name() : __addressLine2,
        __addressLine3.name() : __addressLine3,
        __city.name() : __city,
        __state.name() : __state,
        __zip.name() : __zip,
        __country.name() : __country,
        __email.name() : __email,
        __phone.name() : __phone
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.contact = contact
Namespace.addCategoryObject('typeBinding', 'contact', contact)


# Complex type {http://www.litle.com/schema}mposType with content type ELEMENT_ONLY
class mposType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}mposType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'mposType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 588, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}ksn uses Python identifier ksn
    __ksn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ksn'), 'ksn', '__httpwww_litle_comschema_mposType_httpwww_litle_comschemaksn', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 590, 12), )

    
    ksn = property(__ksn.value, __ksn.set, None, None)

    
    # Element {http://www.litle.com/schema}formatId uses Python identifier formatId
    __formatId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formatId'), 'formatId', '__httpwww_litle_comschema_mposType_httpwww_litle_comschemaformatId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 591, 12), )

    
    formatId = property(__formatId.value, __formatId.set, None, None)

    
    # Element {http://www.litle.com/schema}encryptedTrack uses Python identifier encryptedTrack
    __encryptedTrack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'encryptedTrack'), 'encryptedTrack', '__httpwww_litle_comschema_mposType_httpwww_litle_comschemaencryptedTrack', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 592, 12), )

    
    encryptedTrack = property(__encryptedTrack.value, __encryptedTrack.set, None, None)

    
    # Element {http://www.litle.com/schema}track1Status uses Python identifier track1Status
    __track1Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track1Status'), 'track1Status', '__httpwww_litle_comschema_mposType_httpwww_litle_comschematrack1Status', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 593, 12), )

    
    track1Status = property(__track1Status.value, __track1Status.set, None, None)

    
    # Element {http://www.litle.com/schema}track2Status uses Python identifier track2Status
    __track2Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track2Status'), 'track2Status', '__httpwww_litle_comschema_mposType_httpwww_litle_comschematrack2Status', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 594, 12), )

    
    track2Status = property(__track2Status.value, __track2Status.set, None, None)

    _ElementMap.update({
        __ksn.name() : __ksn,
        __formatId.name() : __formatId,
        __encryptedTrack.name() : __encryptedTrack,
        __track1Status.name() : __track1Status,
        __track2Status.name() : __track2Status
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.mposType = mposType
Namespace.addCategoryObject('typeBinding', 'mposType', mposType)


# Complex type {http://www.litle.com/schema}cardType with content type ELEMENT_ONLY
class cardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 598, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_cardType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 602, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_litle_comschema_cardType_httpwww_litle_comschemanumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 603, 20), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_litle_comschema_cardType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 604, 20), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.litle.com/schema}track uses Python identifier track
    __track = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track'), 'track', '__httpwww_litle_comschema_cardType_httpwww_litle_comschematrack', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 607, 20), )

    
    track = property(__track.value, __track.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_cardType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 610, 12), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __expDate.name() : __expDate,
        __track.name() : __track,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardType = cardType
Namespace.addCategoryObject('typeBinding', 'cardType', cardType)


# Complex type {http://www.litle.com/schema}cardTokenType with content type ELEMENT_ONLY
class cardTokenType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardTokenType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 614, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 616, 12), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 617, 12), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 618, 12), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_cardTokenType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 619, 12), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __expDate.name() : __expDate,
        __cardValidationNum.name() : __cardValidationNum,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardTokenType = cardTokenType
Namespace.addCategoryObject('typeBinding', 'cardTokenType', cardTokenType)


# Complex type {http://www.litle.com/schema}cardPaypageType with content type ELEMENT_ONLY
class cardPaypageType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardPaypageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardPaypageType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 623, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 625, 12), )

    
    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)

    
    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 626, 12), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 627, 12), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_cardPaypageType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 628, 12), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __expDate.name() : __expDate,
        __cardValidationNum.name() : __cardValidationNum,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardPaypageType = cardPaypageType
Namespace.addCategoryObject('typeBinding', 'cardPaypageType', cardPaypageType)


# Complex type {http://www.litle.com/schema}tokenResponseType with content type ELEMENT_ONLY
class tokenResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}tokenResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'tokenResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 632, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 634, 12), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponseCode uses Python identifier tokenResponseCode
    __tokenResponseCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponseCode'), 'tokenResponseCode', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschematokenResponseCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 635, 12), )

    
    tokenResponseCode = property(__tokenResponseCode.value, __tokenResponseCode.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenMessage uses Python identifier tokenMessage
    __tokenMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenMessage'), 'tokenMessage', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschematokenMessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 636, 12), )

    
    tokenMessage = property(__tokenMessage.value, __tokenMessage.set, None, None)

    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 637, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 638, 12), )

    
    bin = property(__bin.value, __bin.set, None, None)

    
    # Element {http://www.litle.com/schema}eCheckAccountSuffix uses Python identifier eCheckAccountSuffix
    __eCheckAccountSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), 'eCheckAccountSuffix', '__httpwww_litle_comschema_tokenResponseType_httpwww_litle_comschemaeCheckAccountSuffix', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 639, 12), )

    
    eCheckAccountSuffix = property(__eCheckAccountSuffix.value, __eCheckAccountSuffix.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __tokenResponseCode.name() : __tokenResponseCode,
        __tokenMessage.name() : __tokenMessage,
        __type.name() : __type,
        __bin.name() : __bin,
        __eCheckAccountSuffix.name() : __eCheckAccountSuffix
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.tokenResponseType = tokenResponseType
Namespace.addCategoryObject('typeBinding', 'tokenResponseType', tokenResponseType)


# Complex type {http://www.litle.com/schema}advancedFraudChecksType with content type ELEMENT_ONLY
class advancedFraudChecksType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}advancedFraudChecksType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecksType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 691, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}threatMetrixSessionId uses Python identifier threatMetrixSessionId
    __threatMetrixSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionId'), 'threatMetrixSessionId', '__httpwww_litle_comschema_advancedFraudChecksType_httpwww_litle_comschemathreatMetrixSessionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 693, 12), )

    
    threatMetrixSessionId = property(__threatMetrixSessionId.value, __threatMetrixSessionId.set, None, None)

    _ElementMap.update({
        __threatMetrixSessionId.name() : __threatMetrixSessionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.advancedFraudChecksType = advancedFraudChecksType
Namespace.addCategoryObject('typeBinding', 'advancedFraudChecksType', advancedFraudChecksType)


# Complex type {http://www.litle.com/schema}advancedFraudResultsType with content type ELEMENT_ONLY
class advancedFraudResultsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}advancedFraudResultsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResultsType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 703, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}deviceReviewStatus uses Python identifier deviceReviewStatus
    __deviceReviewStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deviceReviewStatus'), 'deviceReviewStatus', '__httpwww_litle_comschema_advancedFraudResultsType_httpwww_litle_comschemadeviceReviewStatus', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 705, 12), )

    
    deviceReviewStatus = property(__deviceReviewStatus.value, __deviceReviewStatus.set, None, None)

    
    # Element {http://www.litle.com/schema}deviceReputationScore uses Python identifier deviceReputationScore
    __deviceReputationScore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deviceReputationScore'), 'deviceReputationScore', '__httpwww_litle_comschema_advancedFraudResultsType_httpwww_litle_comschemadeviceReputationScore', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 706, 12), )

    
    deviceReputationScore = property(__deviceReputationScore.value, __deviceReputationScore.set, None, None)

    
    # Element {http://www.litle.com/schema}triggeredRule uses Python identifier triggeredRule
    __triggeredRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'triggeredRule'), 'triggeredRule', '__httpwww_litle_comschema_advancedFraudResultsType_httpwww_litle_comschematriggeredRule', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 707, 12), )

    
    triggeredRule = property(__triggeredRule.value, __triggeredRule.set, None, None)

    _ElementMap.update({
        __deviceReviewStatus.name() : __deviceReviewStatus,
        __deviceReputationScore.name() : __deviceReputationScore,
        __triggeredRule.name() : __triggeredRule
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.advancedFraudResultsType = advancedFraudResultsType
Namespace.addCategoryObject('typeBinding', 'advancedFraudResultsType', advancedFraudResultsType)


# Complex type {http://www.litle.com/schema}recurringTransactionType with content type EMPTY
class recurringTransactionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringTransactionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 720, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringTransactionType = recurringTransactionType
Namespace.addCategoryObject('typeBinding', 'recurringTransactionType', recurringTransactionType)


# Complex type {http://www.litle.com/schema}recurringTransactionResponseType with content type ELEMENT_ONLY
class recurringTransactionResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringTransactionResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 723, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_recurringTransactionResponseType_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringTransactionResponseType = recurringTransactionResponseType
Namespace.addCategoryObject('typeBinding', 'recurringTransactionResponseType', recurringTransactionResponseType)


# Complex type {http://www.litle.com/schema}recurringSubscriptionType with content type ELEMENT_ONLY
class recurringSubscriptionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringSubscriptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringSubscriptionType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 853, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 855, 12), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.litle.com/schema}numberOfPayments uses Python identifier numberOfPayments
    __numberOfPayments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), 'numberOfPayments', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemanumberOfPayments', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 856, 12), )

    
    numberOfPayments = property(__numberOfPayments.value, __numberOfPayments.set, None, None)

    
    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 857, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 858, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}createDiscount uses Python identifier createDiscount
    __createDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), 'createDiscount', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemacreateDiscount', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 859, 12), )

    
    createDiscount = property(__createDiscount.value, __createDiscount.set, None, None)

    
    # Element {http://www.litle.com/schema}createAddOn uses Python identifier createAddOn
    __createAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), 'createAddOn', '__httpwww_litle_comschema_recurringSubscriptionType_httpwww_litle_comschemacreateAddOn', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 860, 12), )

    
    createAddOn = property(__createAddOn.value, __createAddOn.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __numberOfPayments.name() : __numberOfPayments,
        __startDate.name() : __startDate,
        __amount.name() : __amount,
        __createDiscount.name() : __createDiscount,
        __createAddOn.name() : __createAddOn
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringSubscriptionType = recurringSubscriptionType
Namespace.addCategoryObject('typeBinding', 'recurringSubscriptionType', recurringSubscriptionType)


# Complex type {http://www.litle.com/schema}litleInternalRecurringRequestType with content type ELEMENT_ONLY
class litleInternalRecurringRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}litleInternalRecurringRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'litleInternalRecurringRequestType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 888, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_litleInternalRecurringRequestType_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 890, 12), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringTxnId uses Python identifier recurringTxnId
    __recurringTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), 'recurringTxnId', '__httpwww_litle_comschema_litleInternalRecurringRequestType_httpwww_litle_comschemarecurringTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 891, 12), )

    
    recurringTxnId = property(__recurringTxnId.value, __recurringTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}finalPayment uses Python identifier finalPayment
    __finalPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'finalPayment'), 'finalPayment', '__httpwww_litle_comschema_litleInternalRecurringRequestType_httpwww_litle_comschemafinalPayment', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 892, 12), )

    
    finalPayment = property(__finalPayment.value, __finalPayment.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __recurringTxnId.name() : __recurringTxnId,
        __finalPayment.name() : __finalPayment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.litleInternalRecurringRequestType = litleInternalRecurringRequestType
Namespace.addCategoryObject('typeBinding', 'litleInternalRecurringRequestType', litleInternalRecurringRequestType)


# Complex type {http://www.litle.com/schema}recurringRequestType with content type ELEMENT_ONLY
class recurringRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringRequestType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 896, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscription'), 'subscription', '__httpwww_litle_comschema_recurringRequestType_httpwww_litle_comschemasubscription', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 898, 12), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    _ElementMap.update({
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringRequestType = recurringRequestType
Namespace.addCategoryObject('typeBinding', 'recurringRequestType', recurringRequestType)


# Complex type {http://www.litle.com/schema}recurringResponseType with content type ELEMENT_ONLY
class recurringResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recurringResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recurringResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 902, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 904, 12), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.litle.com/schema}responseCode uses Python identifier responseCode
    __responseCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseCode'), 'responseCode', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemaresponseCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 905, 12), )

    
    responseCode = property(__responseCode.value, __responseCode.set, None, None)

    
    # Element {http://www.litle.com/schema}responseMessage uses Python identifier responseMessage
    __responseMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseMessage'), 'responseMessage', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemaresponseMessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 906, 12), )

    
    responseMessage = property(__responseMessage.value, __responseMessage.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringTxnId uses Python identifier recurringTxnId
    __recurringTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), 'recurringTxnId', '__httpwww_litle_comschema_recurringResponseType_httpwww_litle_comschemarecurringTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 907, 12), )

    
    recurringTxnId = property(__recurringTxnId.value, __recurringTxnId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __responseCode.name() : __responseCode,
        __responseMessage.name() : __responseMessage,
        __recurringTxnId.name() : __recurringTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recurringResponseType = recurringResponseType
Namespace.addCategoryObject('typeBinding', 'recurringResponseType', recurringResponseType)


# Complex type {http://www.litle.com/schema}createDiscountType with content type ELEMENT_ONLY
class createDiscountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}createDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'createDiscountType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 911, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), 'discountCode', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemadiscountCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 913, 12), )

    
    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    
    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 914, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 915, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 916, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_litle_comschema_createDiscountType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 917, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.createDiscountType = createDiscountType
Namespace.addCategoryObject('typeBinding', 'createDiscountType', createDiscountType)


# Complex type {http://www.litle.com/schema}updateDiscountType with content type ELEMENT_ONLY
class updateDiscountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}updateDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'updateDiscountType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 921, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), 'discountCode', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemadiscountCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 923, 12), )

    
    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    
    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 924, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 925, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 926, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_litle_comschema_updateDiscountType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 927, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.updateDiscountType = updateDiscountType
Namespace.addCategoryObject('typeBinding', 'updateDiscountType', updateDiscountType)


# Complex type {http://www.litle.com/schema}deleteDiscountType with content type ELEMENT_ONLY
class deleteDiscountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}deleteDiscountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'deleteDiscountType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 931, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}discountCode uses Python identifier discountCode
    __discountCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), 'discountCode', '__httpwww_litle_comschema_deleteDiscountType_httpwww_litle_comschemadiscountCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 933, 12), )

    
    discountCode = property(__discountCode.value, __discountCode.set, None, None)

    _ElementMap.update({
        __discountCode.name() : __discountCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.deleteDiscountType = deleteDiscountType
Namespace.addCategoryObject('typeBinding', 'deleteDiscountType', deleteDiscountType)


# Complex type {http://www.litle.com/schema}createAddOnType with content type ELEMENT_ONLY
class createAddOnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}createAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'createAddOnType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 937, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), 'addOnCode', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaaddOnCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 939, 12), )

    
    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    
    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 940, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 941, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 942, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_litle_comschema_createAddOnType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 943, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.createAddOnType = createAddOnType
Namespace.addCategoryObject('typeBinding', 'createAddOnType', createAddOnType)


# Complex type {http://www.litle.com/schema}updateAddOnType with content type ELEMENT_ONLY
class updateAddOnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}updateAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'updateAddOnType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 947, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), 'addOnCode', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaaddOnCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 949, 12), )

    
    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    
    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 950, 12), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 951, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemastartDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 952, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://www.litle.com/schema}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httpwww_litle_comschema_updateAddOnType_httpwww_litle_comschemaendDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 953, 12), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode,
        __name.name() : __name,
        __amount.name() : __amount,
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.updateAddOnType = updateAddOnType
Namespace.addCategoryObject('typeBinding', 'updateAddOnType', updateAddOnType)


# Complex type {http://www.litle.com/schema}deleteAddOnType with content type ELEMENT_ONLY
class deleteAddOnType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}deleteAddOnType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'deleteAddOnType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 957, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}addOnCode uses Python identifier addOnCode
    __addOnCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), 'addOnCode', '__httpwww_litle_comschema_deleteAddOnType_httpwww_litle_comschemaaddOnCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 959, 12), )

    
    addOnCode = property(__addOnCode.value, __addOnCode.set, None, None)

    _ElementMap.update({
        __addOnCode.name() : __addOnCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.deleteAddOnType = deleteAddOnType
Namespace.addCategoryObject('typeBinding', 'deleteAddOnType', deleteAddOnType)


# Complex type {http://www.litle.com/schema}merchantDataType with content type ELEMENT_ONLY
class merchantDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}merchantDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'merchantDataType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 978, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}campaign uses Python identifier campaign
    __campaign = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'campaign'), 'campaign', '__httpwww_litle_comschema_merchantDataType_httpwww_litle_comschemacampaign', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 980, 12), )

    
    campaign = property(__campaign.value, __campaign.set, None, None)

    
    # Element {http://www.litle.com/schema}affiliate uses Python identifier affiliate
    __affiliate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'affiliate'), 'affiliate', '__httpwww_litle_comschema_merchantDataType_httpwww_litle_comschemaaffiliate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 981, 12), )

    
    affiliate = property(__affiliate.value, __affiliate.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantGroupingId uses Python identifier merchantGroupingId
    __merchantGroupingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingId'), 'merchantGroupingId', '__httpwww_litle_comschema_merchantDataType_httpwww_litle_comschemamerchantGroupingId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 982, 12), )

    
    merchantGroupingId = property(__merchantGroupingId.value, __merchantGroupingId.set, None, None)

    _ElementMap.update({
        __campaign.name() : __campaign,
        __affiliate.name() : __affiliate,
        __merchantGroupingId.name() : __merchantGroupingId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.merchantDataType = merchantDataType
Namespace.addCategoryObject('typeBinding', 'merchantDataType', merchantDataType)


# Complex type {http://www.litle.com/schema}driversLicenseInfo with content type ELEMENT_ONLY
class driversLicenseInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}driversLicenseInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'driversLicenseInfo')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1003, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}licenseNumber uses Python identifier licenseNumber
    __licenseNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'licenseNumber'), 'licenseNumber', '__httpwww_litle_comschema_driversLicenseInfo_httpwww_litle_comschemalicenseNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1005, 12), )

    
    licenseNumber = property(__licenseNumber.value, __licenseNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_litle_comschema_driversLicenseInfo_httpwww_litle_comschemastate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1006, 12), )

    
    state = property(__state.value, __state.set, None, None)

    
    # Element {http://www.litle.com/schema}dateOfBirth uses Python identifier dateOfBirth
    __dateOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), 'dateOfBirth', '__httpwww_litle_comschema_driversLicenseInfo_httpwww_litle_comschemadateOfBirth', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1007, 12), )

    
    dateOfBirth = property(__dateOfBirth.value, __dateOfBirth.set, None, None)

    _ElementMap.update({
        __licenseNumber.name() : __licenseNumber,
        __state.name() : __state,
        __dateOfBirth.name() : __dateOfBirth
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.driversLicenseInfo = driversLicenseInfo
Namespace.addCategoryObject('typeBinding', 'driversLicenseInfo', driversLicenseInfo)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1012, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}ssn uses Python identifier ssn
    __ssn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ssn'), 'ssn', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemassn', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1014, 16), )

    
    ssn = property(__ssn.value, __ssn.set, None, None)

    
    # Element {http://www.litle.com/schema}dob uses Python identifier dob
    __dob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dob'), 'dob', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemadob', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1021, 16), )

    
    dob = property(__dob.value, __dob.set, None, None)

    
    # Element {http://www.litle.com/schema}customerRegistrationDate uses Python identifier customerRegistrationDate
    __customerRegistrationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerRegistrationDate'), 'customerRegistrationDate', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemacustomerRegistrationDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1022, 16), )

    
    customerRegistrationDate = property(__customerRegistrationDate.value, __customerRegistrationDate.set, None, None)

    
    # Element {http://www.litle.com/schema}customerType uses Python identifier customerType
    __customerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerType'), 'customerType', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemacustomerType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1023, 16), )

    
    customerType = property(__customerType.value, __customerType.set, None, None)

    
    # Element {http://www.litle.com/schema}incomeAmount uses Python identifier incomeAmount
    __incomeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'incomeAmount'), 'incomeAmount', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemaincomeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1031, 16), )

    
    incomeAmount = property(__incomeAmount.value, __incomeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}incomeCurrency uses Python identifier incomeCurrency
    __incomeCurrency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'incomeCurrency'), 'incomeCurrency', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemaincomeCurrency', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1032, 16), )

    
    incomeCurrency = property(__incomeCurrency.value, __incomeCurrency.set, None, None)

    
    # Element {http://www.litle.com/schema}customerCheckingAccount uses Python identifier customerCheckingAccount
    __customerCheckingAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerCheckingAccount'), 'customerCheckingAccount', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemacustomerCheckingAccount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1033, 16), )

    
    customerCheckingAccount = property(__customerCheckingAccount.value, __customerCheckingAccount.set, None, None)

    
    # Element {http://www.litle.com/schema}customerSavingAccount uses Python identifier customerSavingAccount
    __customerSavingAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerSavingAccount'), 'customerSavingAccount', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemacustomerSavingAccount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1034, 16), )

    
    customerSavingAccount = property(__customerSavingAccount.value, __customerSavingAccount.set, None, None)

    
    # Element {http://www.litle.com/schema}employerName uses Python identifier employerName
    __employerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'employerName'), 'employerName', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemaemployerName', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1035, 16), )

    
    employerName = property(__employerName.value, __employerName.set, None, None)

    
    # Element {http://www.litle.com/schema}customerWorkTelephone uses Python identifier customerWorkTelephone
    __customerWorkTelephone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerWorkTelephone'), 'customerWorkTelephone', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemacustomerWorkTelephone', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1036, 16), )

    
    customerWorkTelephone = property(__customerWorkTelephone.value, __customerWorkTelephone.set, None, None)

    
    # Element {http://www.litle.com/schema}residenceStatus uses Python identifier residenceStatus
    __residenceStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'residenceStatus'), 'residenceStatus', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemaresidenceStatus', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1037, 16), )

    
    residenceStatus = property(__residenceStatus.value, __residenceStatus.set, None, None)

    
    # Element {http://www.litle.com/schema}yearsAtResidence uses Python identifier yearsAtResidence
    __yearsAtResidence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yearsAtResidence'), 'yearsAtResidence', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemayearsAtResidence', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1046, 16), )

    
    yearsAtResidence = property(__yearsAtResidence.value, __yearsAtResidence.set, None, None)

    
    # Element {http://www.litle.com/schema}yearsAtEmployer uses Python identifier yearsAtEmployer
    __yearsAtEmployer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yearsAtEmployer'), 'yearsAtEmployer', '__httpwww_litle_comschema_CTD_ANON__httpwww_litle_comschemayearsAtEmployer', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1053, 16), )

    
    yearsAtEmployer = property(__yearsAtEmployer.value, __yearsAtEmployer.set, None, None)

    _ElementMap.update({
        __ssn.name() : __ssn,
        __dob.name() : __dob,
        __customerRegistrationDate.name() : __customerRegistrationDate,
        __customerType.name() : __customerType,
        __incomeAmount.name() : __incomeAmount,
        __incomeCurrency.name() : __incomeCurrency,
        __customerCheckingAccount.name() : __customerCheckingAccount,
        __customerSavingAccount.name() : __customerSavingAccount,
        __employerName.name() : __employerName,
        __customerWorkTelephone.name() : __customerWorkTelephone,
        __residenceStatus.name() : __residenceStatus,
        __yearsAtResidence.name() : __yearsAtResidence,
        __yearsAtEmployer.name() : __yearsAtEmployer
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1073, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}bmlProductType uses Python identifier bmlProductType
    __bmlProductType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bmlProductType'), 'bmlProductType', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemabmlProductType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1064, 4), )

    
    bmlProductType = property(__bmlProductType.value, __bmlProductType.set, None, None)

    
    # Element {http://www.litle.com/schema}bmlMerchantId uses Python identifier bmlMerchantId
    __bmlMerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bmlMerchantId'), 'bmlMerchantId', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemabmlMerchantId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1075, 16), )

    
    bmlMerchantId = property(__bmlMerchantId.value, __bmlMerchantId.set, None, None)

    
    # Element {http://www.litle.com/schema}termsAndConditions uses Python identifier termsAndConditions
    __termsAndConditions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'termsAndConditions'), 'termsAndConditions', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschematermsAndConditions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1078, 16), )

    
    termsAndConditions = property(__termsAndConditions.value, __termsAndConditions.set, None, None)

    
    # Element {http://www.litle.com/schema}preapprovalNumber uses Python identifier preapprovalNumber
    __preapprovalNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preapprovalNumber'), 'preapprovalNumber', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemapreapprovalNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1085, 16), )

    
    preapprovalNumber = property(__preapprovalNumber.value, __preapprovalNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantPromotionalCode uses Python identifier merchantPromotionalCode
    __merchantPromotionalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantPromotionalCode'), 'merchantPromotionalCode', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemamerchantPromotionalCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1086, 16), )

    
    merchantPromotionalCode = property(__merchantPromotionalCode.value, __merchantPromotionalCode.set, None, None)

    
    # Element {http://www.litle.com/schema}customerPasswordChanged uses Python identifier customerPasswordChanged
    __customerPasswordChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerPasswordChanged'), 'customerPasswordChanged', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemacustomerPasswordChanged', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1094, 16), )

    
    customerPasswordChanged = property(__customerPasswordChanged.value, __customerPasswordChanged.set, None, None)

    
    # Element {http://www.litle.com/schema}customerBillingAddressChanged uses Python identifier customerBillingAddressChanged
    __customerBillingAddressChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerBillingAddressChanged'), 'customerBillingAddressChanged', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemacustomerBillingAddressChanged', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1095, 16), )

    
    customerBillingAddressChanged = property(__customerBillingAddressChanged.value, __customerBillingAddressChanged.set, None, None)

    
    # Element {http://www.litle.com/schema}customerEmailChanged uses Python identifier customerEmailChanged
    __customerEmailChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerEmailChanged'), 'customerEmailChanged', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemacustomerEmailChanged', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1096, 16), )

    
    customerEmailChanged = property(__customerEmailChanged.value, __customerEmailChanged.set, None, None)

    
    # Element {http://www.litle.com/schema}customerPhoneChanged uses Python identifier customerPhoneChanged
    __customerPhoneChanged = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerPhoneChanged'), 'customerPhoneChanged', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemacustomerPhoneChanged', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1097, 16), )

    
    customerPhoneChanged = property(__customerPhoneChanged.value, __customerPhoneChanged.set, None, None)

    
    # Element {http://www.litle.com/schema}secretQuestionCode uses Python identifier secretQuestionCode
    __secretQuestionCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secretQuestionCode'), 'secretQuestionCode', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemasecretQuestionCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1099, 16), )

    
    secretQuestionCode = property(__secretQuestionCode.value, __secretQuestionCode.set, None, None)

    
    # Element {http://www.litle.com/schema}secretQuestionAnswer uses Python identifier secretQuestionAnswer
    __secretQuestionAnswer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secretQuestionAnswer'), 'secretQuestionAnswer', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemasecretQuestionAnswer', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1100, 16), )

    
    secretQuestionAnswer = property(__secretQuestionAnswer.value, __secretQuestionAnswer.set, None, None)

    
    # Element {http://www.litle.com/schema}virtualAuthenticationKeyPresenceIndicator uses Python identifier virtualAuthenticationKeyPresenceIndicator
    __virtualAuthenticationKeyPresenceIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyPresenceIndicator'), 'virtualAuthenticationKeyPresenceIndicator', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemavirtualAuthenticationKeyPresenceIndicator', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1101, 16), )

    
    virtualAuthenticationKeyPresenceIndicator = property(__virtualAuthenticationKeyPresenceIndicator.value, __virtualAuthenticationKeyPresenceIndicator.set, None, None)

    
    # Element {http://www.litle.com/schema}virtualAuthenticationKeyData uses Python identifier virtualAuthenticationKeyData
    __virtualAuthenticationKeyData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyData'), 'virtualAuthenticationKeyData', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemavirtualAuthenticationKeyData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1103, 16), )

    
    virtualAuthenticationKeyData = property(__virtualAuthenticationKeyData.value, __virtualAuthenticationKeyData.set, None, None)

    
    # Element {http://www.litle.com/schema}itemCategoryCode uses Python identifier itemCategoryCode
    __itemCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemCategoryCode'), 'itemCategoryCode', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemaitemCategoryCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1105, 16), )

    
    itemCategoryCode = property(__itemCategoryCode.value, __itemCategoryCode.set, None, None)

    
    # Element {http://www.litle.com/schema}authorizationSourcePlatform uses Python identifier authorizationSourcePlatform
    __authorizationSourcePlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationSourcePlatform'), 'authorizationSourcePlatform', '__httpwww_litle_comschema_CTD_ANON_2_httpwww_litle_comschemaauthorizationSourcePlatform', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1113, 16), )

    
    authorizationSourcePlatform = property(__authorizationSourcePlatform.value, __authorizationSourcePlatform.set, None, None)

    _ElementMap.update({
        __bmlProductType.name() : __bmlProductType,
        __bmlMerchantId.name() : __bmlMerchantId,
        __termsAndConditions.name() : __termsAndConditions,
        __preapprovalNumber.name() : __preapprovalNumber,
        __merchantPromotionalCode.name() : __merchantPromotionalCode,
        __customerPasswordChanged.name() : __customerPasswordChanged,
        __customerBillingAddressChanged.name() : __customerBillingAddressChanged,
        __customerEmailChanged.name() : __customerEmailChanged,
        __customerPhoneChanged.name() : __customerPhoneChanged,
        __secretQuestionCode.name() : __secretQuestionCode,
        __secretQuestionAnswer.name() : __secretQuestionAnswer,
        __virtualAuthenticationKeyPresenceIndicator.name() : __virtualAuthenticationKeyPresenceIndicator,
        __virtualAuthenticationKeyData.name() : __virtualAuthenticationKeyData,
        __itemCategoryCode.name() : __itemCategoryCode,
        __authorizationSourcePlatform.name() : __authorizationSourcePlatform
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1119, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}bmlMerchantId uses Python identifier bmlMerchantId
    __bmlMerchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bmlMerchantId'), 'bmlMerchantId', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemabmlMerchantId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1121, 16), )

    
    bmlMerchantId = property(__bmlMerchantId.value, __bmlMerchantId.set, None, None)

    
    # Element {http://www.litle.com/schema}promotionalOfferCode uses Python identifier promotionalOfferCode
    __promotionalOfferCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'promotionalOfferCode'), 'promotionalOfferCode', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemapromotionalOfferCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1123, 16), )

    
    promotionalOfferCode = property(__promotionalOfferCode.value, __promotionalOfferCode.set, None, None)

    
    # Element {http://www.litle.com/schema}approvedTermsCode uses Python identifier approvedTermsCode
    __approvedTermsCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedTermsCode'), 'approvedTermsCode', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaapprovedTermsCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1125, 16), )

    
    approvedTermsCode = property(__approvedTermsCode.value, __approvedTermsCode.set, None, None)

    
    # Element {http://www.litle.com/schema}creditLine uses Python identifier creditLine
    __creditLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditLine'), 'creditLine', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemacreditLine', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1132, 16), )

    
    creditLine = property(__creditLine.value, __creditLine.set, None, None)

    
    # Element {http://www.litle.com/schema}addressIndicator uses Python identifier addressIndicator
    __addressIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressIndicator'), 'addressIndicator', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaaddressIndicator', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1134, 16), )

    
    addressIndicator = property(__addressIndicator.value, __addressIndicator.set, None, None)

    
    # Element {http://www.litle.com/schema}loanToValueEstimator uses Python identifier loanToValueEstimator
    __loanToValueEstimator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loanToValueEstimator'), 'loanToValueEstimator', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemaloanToValueEstimator', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1135, 16), )

    
    loanToValueEstimator = property(__loanToValueEstimator.value, __loanToValueEstimator.set, None, None)

    
    # Element {http://www.litle.com/schema}riskEstimator uses Python identifier riskEstimator
    __riskEstimator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'riskEstimator'), 'riskEstimator', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemariskEstimator', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1136, 16), )

    
    riskEstimator = property(__riskEstimator.value, __riskEstimator.set, None, None)

    
    # Element {http://www.litle.com/schema}riskQueueAssignment uses Python identifier riskQueueAssignment
    __riskQueueAssignment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'riskQueueAssignment'), 'riskQueueAssignment', '__httpwww_litle_comschema_CTD_ANON_3_httpwww_litle_comschemariskQueueAssignment', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1137, 16), )

    
    riskQueueAssignment = property(__riskQueueAssignment.value, __riskQueueAssignment.set, None, None)

    _ElementMap.update({
        __bmlMerchantId.name() : __bmlMerchantId,
        __promotionalOfferCode.name() : __promotionalOfferCode,
        __approvedTermsCode.name() : __approvedTermsCode,
        __creditLine.name() : __creditLine,
        __addressIndicator.name() : __addressIndicator,
        __loanToValueEstimator.name() : __loanToValueEstimator,
        __riskEstimator.name() : __riskEstimator,
        __riskQueueAssignment.name() : __riskQueueAssignment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type {http://www.litle.com/schema}fraudCheckType with content type ELEMENT_ONLY
class fraudCheckType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}fraudCheckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fraudCheckType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1142, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}authenticationValue uses Python identifier authenticationValue
    __authenticationValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationValue'), 'authenticationValue', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemaauthenticationValue', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1144, 12), )

    
    authenticationValue = property(__authenticationValue.value, __authenticationValue.set, None, None)

    
    # Element {http://www.litle.com/schema}authenticationTransactionId uses Python identifier authenticationTransactionId
    __authenticationTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionId'), 'authenticationTransactionId', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemaauthenticationTransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1145, 12), )

    
    authenticationTransactionId = property(__authenticationTransactionId.value, __authenticationTransactionId.set, None, None)

    
    # Element {http://www.litle.com/schema}customerIpAddress uses Python identifier customerIpAddress
    __customerIpAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerIpAddress'), 'customerIpAddress', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemacustomerIpAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1146, 12), )

    
    customerIpAddress = property(__customerIpAddress.value, __customerIpAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}authenticatedByMerchant uses Python identifier authenticatedByMerchant
    __authenticatedByMerchant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticatedByMerchant'), 'authenticatedByMerchant', '__httpwww_litle_comschema_fraudCheckType_httpwww_litle_comschemaauthenticatedByMerchant', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1147, 12), )

    
    authenticatedByMerchant = property(__authenticatedByMerchant.value, __authenticatedByMerchant.set, None, None)

    _ElementMap.update({
        __authenticationValue.name() : __authenticationValue,
        __authenticationTransactionId.name() : __authenticationTransactionId,
        __customerIpAddress.name() : __customerIpAddress,
        __authenticatedByMerchant.name() : __authenticatedByMerchant
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.fraudCheckType = fraudCheckType
Namespace.addCategoryObject('typeBinding', 'fraudCheckType', fraudCheckType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1396, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}payerId uses Python identifier payerId
    __payerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payerId'), 'payerId', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemapayerId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1398, 48), )

    
    payerId = property(__payerId.value, __payerId.set, None, None)

    
    # Element {http://www.litle.com/schema}payerEmail uses Python identifier payerEmail
    __payerEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payerEmail'), 'payerEmail', '__httpwww_litle_comschema_CTD_ANON_4_httpwww_litle_comschemapayerEmail', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1407, 48), )

    
    payerEmail = property(__payerEmail.value, __payerEmail.set, None, None)

    _ElementMap.update({
        __payerId.name() : __payerId,
        __payerEmail.name() : __payerEmail
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1503, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}authDate uses Python identifier authDate
    __authDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authDate'), 'authDate', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemaauthDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1505, 16), )

    
    authDate = property(__authDate.value, __authDate.set, None, None)

    
    # Element {http://www.litle.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authCode'), 'authCode', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemaauthCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1506, 16), )

    
    authCode = property(__authCode.value, __authCode.set, None, None)

    
    # Element {http://www.litle.com/schema}authAmount uses Python identifier authAmount
    __authAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authAmount'), 'authAmount', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemaauthAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1508, 16), )

    
    authAmount = property(__authAmount.value, __authAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_5_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    _ElementMap.update({
        __authDate.name() : __authDate,
        __authCode.name() : __authCode,
        __authAmount.name() : __authAmount,
        __fraudResult.name() : __fraudResult
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1528, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}IIASFlag uses Python identifier IIASFlag
    __IIASFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IIASFlag'), 'IIASFlag', '__httpwww_litle_comschema_CTD_ANON_6_httpwww_litle_comschemaIIASFlag', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1531, 16), )

    
    IIASFlag = property(__IIASFlag.value, __IIASFlag.set, None, None)

    
    # Element {http://www.litle.com/schema}healthcareAmounts uses Python identifier healthcareAmounts
    __healthcareAmounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts'), 'healthcareAmounts', '__httpwww_litle_comschema_CTD_ANON_6_httpwww_litle_comschemahealthcareAmounts', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1536, 4), )

    
    healthcareAmounts = property(__healthcareAmounts.value, __healthcareAmounts.set, None, None)

    _ElementMap.update({
        __IIASFlag.name() : __IIASFlag,
        __healthcareAmounts.name() : __healthcareAmounts
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1537, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}totalHealthcareAmount uses Python identifier totalHealthcareAmount
    __totalHealthcareAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalHealthcareAmount'), 'totalHealthcareAmount', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschematotalHealthcareAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1539, 16), )

    
    totalHealthcareAmount = property(__totalHealthcareAmount.value, __totalHealthcareAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}RxAmount uses Python identifier RxAmount
    __RxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RxAmount'), 'RxAmount', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemaRxAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1540, 16), )

    
    RxAmount = property(__RxAmount.value, __RxAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}visionAmount uses Python identifier visionAmount
    __visionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'visionAmount'), 'visionAmount', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemavisionAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1541, 16), )

    
    visionAmount = property(__visionAmount.value, __visionAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}clinicOtherAmount uses Python identifier clinicOtherAmount
    __clinicOtherAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clinicOtherAmount'), 'clinicOtherAmount', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemaclinicOtherAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1542, 16), )

    
    clinicOtherAmount = property(__clinicOtherAmount.value, __clinicOtherAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}dentalAmount uses Python identifier dentalAmount
    __dentalAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dentalAmount'), 'dentalAmount', '__httpwww_litle_comschema_CTD_ANON_7_httpwww_litle_comschemadentalAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1543, 16), )

    
    dentalAmount = property(__dentalAmount.value, __dentalAmount.set, None, None)

    _ElementMap.update({
        __totalHealthcareAmount.name() : __totalHealthcareAmount,
        __RxAmount.name() : __RxAmount,
        __visionAmount.name() : __visionAmount,
        __clinicOtherAmount.name() : __clinicOtherAmount,
        __dentalAmount.name() : __dentalAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1549, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}customerReference uses Python identifier customerReference
    __customerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerReference'), 'customerReference', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemacustomerReference', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1551, 16), )

    
    customerReference = property(__customerReference.value, __customerReference.set, None, None)

    
    # Element {http://www.litle.com/schema}salesTax uses Python identifier salesTax
    __salesTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'salesTax'), 'salesTax', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemasalesTax', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1552, 16), )

    
    salesTax = property(__salesTax.value, __salesTax.set, None, None)

    
    # Element {http://www.litle.com/schema}deliveryType uses Python identifier deliveryType
    __deliveryType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deliveryType'), 'deliveryType', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemadeliveryType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1553, 16), )

    
    deliveryType = property(__deliveryType.value, __deliveryType.set, None, None)

    
    # Element {http://www.litle.com/schema}taxExempt uses Python identifier taxExempt
    __taxExempt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxExempt'), 'taxExempt', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemataxExempt', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1564, 16), )

    
    taxExempt = property(__taxExempt.value, __taxExempt.set, None, None)

    
    # Element {http://www.litle.com/schema}discountAmount uses Python identifier discountAmount
    __discountAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'discountAmount'), 'discountAmount', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemadiscountAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1565, 16), )

    
    discountAmount = property(__discountAmount.value, __discountAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}shippingAmount uses Python identifier shippingAmount
    __shippingAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shippingAmount'), 'shippingAmount', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemashippingAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1566, 16), )

    
    shippingAmount = property(__shippingAmount.value, __shippingAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}dutyAmount uses Python identifier dutyAmount
    __dutyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dutyAmount'), 'dutyAmount', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemadutyAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1567, 16), )

    
    dutyAmount = property(__dutyAmount.value, __dutyAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}shipFromPostalCode uses Python identifier shipFromPostalCode
    __shipFromPostalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipFromPostalCode'), 'shipFromPostalCode', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemashipFromPostalCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1568, 16), )

    
    shipFromPostalCode = property(__shipFromPostalCode.value, __shipFromPostalCode.set, None, None)

    
    # Element {http://www.litle.com/schema}destinationPostalCode uses Python identifier destinationPostalCode
    __destinationPostalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationPostalCode'), 'destinationPostalCode', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemadestinationPostalCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1569, 16), )

    
    destinationPostalCode = property(__destinationPostalCode.value, __destinationPostalCode.set, None, None)

    
    # Element {http://www.litle.com/schema}destinationCountryCode uses Python identifier destinationCountryCode
    __destinationCountryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationCountryCode'), 'destinationCountryCode', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemadestinationCountryCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1570, 16), )

    
    destinationCountryCode = property(__destinationCountryCode.value, __destinationCountryCode.set, None, None)

    
    # Element {http://www.litle.com/schema}invoiceReferenceNumber uses Python identifier invoiceReferenceNumber
    __invoiceReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumber'), 'invoiceReferenceNumber', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemainvoiceReferenceNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1571, 16), )

    
    invoiceReferenceNumber = property(__invoiceReferenceNumber.value, __invoiceReferenceNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}orderDate uses Python identifier orderDate
    __orderDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderDate'), 'orderDate', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemaorderDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1572, 16), )

    
    orderDate = property(__orderDate.value, __orderDate.set, None, None)

    
    # Element {http://www.litle.com/schema}detailTax uses Python identifier detailTax
    __detailTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), 'detailTax', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemadetailTax', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1588, 4), )

    
    detailTax = property(__detailTax.value, __detailTax.set, None, None)

    
    # Element {http://www.litle.com/schema}lineItemData uses Python identifier lineItemData
    __lineItemData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lineItemData'), 'lineItemData', '__httpwww_litle_comschema_CTD_ANON_8_httpwww_litle_comschemalineItemData', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1600, 4), )

    
    lineItemData = property(__lineItemData.value, __lineItemData.set, None, None)

    _ElementMap.update({
        __customerReference.name() : __customerReference,
        __salesTax.name() : __salesTax,
        __deliveryType.name() : __deliveryType,
        __taxExempt.name() : __taxExempt,
        __discountAmount.name() : __discountAmount,
        __shippingAmount.name() : __shippingAmount,
        __dutyAmount.name() : __dutyAmount,
        __shipFromPostalCode.name() : __shipFromPostalCode,
        __destinationPostalCode.name() : __destinationPostalCode,
        __destinationCountryCode.name() : __destinationCountryCode,
        __invoiceReferenceNumber.name() : __invoiceReferenceNumber,
        __orderDate.name() : __orderDate,
        __detailTax.name() : __detailTax,
        __lineItemData.name() : __lineItemData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1580, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}sellerId uses Python identifier sellerId
    __sellerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sellerId'), 'sellerId', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschemasellerId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1582, 16), )

    
    sellerId = property(__sellerId.value, __sellerId.set, None, None)

    
    # Element {http://www.litle.com/schema}sellerMerchantCategoryCode uses Python identifier sellerMerchantCategoryCode
    __sellerMerchantCategoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sellerMerchantCategoryCode'), 'sellerMerchantCategoryCode', '__httpwww_litle_comschema_CTD_ANON_9_httpwww_litle_comschemasellerMerchantCategoryCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1583, 16), )

    
    sellerMerchantCategoryCode = property(__sellerMerchantCategoryCode.value, __sellerMerchantCategoryCode.set, None, None)

    _ElementMap.update({
        __sellerId.name() : __sellerId,
        __sellerMerchantCategoryCode.name() : __sellerMerchantCategoryCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1589, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}taxIncludedInTotal uses Python identifier taxIncludedInTotal
    __taxIncludedInTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxIncludedInTotal'), 'taxIncludedInTotal', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemataxIncludedInTotal', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1591, 16), )

    
    taxIncludedInTotal = property(__taxIncludedInTotal.value, __taxIncludedInTotal.set, None, None)

    
    # Element {http://www.litle.com/schema}taxAmount uses Python identifier taxAmount
    __taxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), 'taxAmount', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemataxAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1592, 16), )

    
    taxAmount = property(__taxAmount.value, __taxAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}taxRate uses Python identifier taxRate
    __taxRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxRate'), 'taxRate', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemataxRate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1593, 16), )

    
    taxRate = property(__taxRate.value, __taxRate.set, None, None)

    
    # Element {http://www.litle.com/schema}taxTypeIdentifier uses Python identifier taxTypeIdentifier
    __taxTypeIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifier'), 'taxTypeIdentifier', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemataxTypeIdentifier', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1594, 16), )

    
    taxTypeIdentifier = property(__taxTypeIdentifier.value, __taxTypeIdentifier.set, None, None)

    
    # Element {http://www.litle.com/schema}cardAcceptorTaxId uses Python identifier cardAcceptorTaxId
    __cardAcceptorTaxId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxId'), 'cardAcceptorTaxId', '__httpwww_litle_comschema_CTD_ANON_10_httpwww_litle_comschemacardAcceptorTaxId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1595, 16), )

    
    cardAcceptorTaxId = property(__cardAcceptorTaxId.value, __cardAcceptorTaxId.set, None, None)

    _ElementMap.update({
        __taxIncludedInTotal.name() : __taxIncludedInTotal,
        __taxAmount.name() : __taxAmount,
        __taxRate.name() : __taxRate,
        __taxTypeIdentifier.name() : __taxTypeIdentifier,
        __cardAcceptorTaxId.name() : __cardAcceptorTaxId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1601, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}detailTax uses Python identifier detailTax
    __detailTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), 'detailTax', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemadetailTax', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1588, 4), )

    
    detailTax = property(__detailTax.value, __detailTax.set, None, None)

    
    # Element {http://www.litle.com/schema}itemSequenceNumber uses Python identifier itemSequenceNumber
    __itemSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumber'), 'itemSequenceNumber', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaitemSequenceNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1603, 16), )

    
    itemSequenceNumber = property(__itemSequenceNumber.value, __itemSequenceNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}itemDescription uses Python identifier itemDescription
    __itemDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemDescription'), 'itemDescription', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaitemDescription', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1604, 16), )

    
    itemDescription = property(__itemDescription.value, __itemDescription.set, None, None)

    
    # Element {http://www.litle.com/schema}productCode uses Python identifier productCode
    __productCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'productCode'), 'productCode', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaproductCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1605, 16), )

    
    productCode = property(__productCode.value, __productCode.set, None, None)

    
    # Element {http://www.litle.com/schema}quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'quantity'), 'quantity', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaquantity', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1606, 16), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element {http://www.litle.com/schema}unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasure'), 'unitOfMeasure', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaunitOfMeasure', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1607, 16), )

    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)

    
    # Element {http://www.litle.com/schema}taxAmount uses Python identifier taxAmount
    __taxAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), 'taxAmount', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemataxAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1608, 16), )

    
    taxAmount = property(__taxAmount.value, __taxAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}lineItemTotal uses Python identifier lineItemTotal
    __lineItemTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotal'), 'lineItemTotal', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemalineItemTotal', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1609, 16), )

    
    lineItemTotal = property(__lineItemTotal.value, __lineItemTotal.set, None, None)

    
    # Element {http://www.litle.com/schema}lineItemTotalWithTax uses Python identifier lineItemTotalWithTax
    __lineItemTotalWithTax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotalWithTax'), 'lineItemTotalWithTax', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemalineItemTotalWithTax', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1611, 16), )

    
    lineItemTotalWithTax = property(__lineItemTotalWithTax.value, __lineItemTotalWithTax.set, None, None)

    
    # Element {http://www.litle.com/schema}itemDiscountAmount uses Python identifier itemDiscountAmount
    __itemDiscountAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'itemDiscountAmount'), 'itemDiscountAmount', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaitemDiscountAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1613, 16), )

    
    itemDiscountAmount = property(__itemDiscountAmount.value, __itemDiscountAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}commodityCode uses Python identifier commodityCode
    __commodityCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commodityCode'), 'commodityCode', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemacommodityCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1614, 16), )

    
    commodityCode = property(__commodityCode.value, __commodityCode.set, None, None)

    
    # Element {http://www.litle.com/schema}unitCost uses Python identifier unitCost
    __unitCost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'unitCost'), 'unitCost', '__httpwww_litle_comschema_CTD_ANON_11_httpwww_litle_comschemaunitCost', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1615, 16), )

    
    unitCost = property(__unitCost.value, __unitCost.set, None, None)

    _ElementMap.update({
        __detailTax.name() : __detailTax,
        __itemSequenceNumber.name() : __itemSequenceNumber,
        __itemDescription.name() : __itemDescription,
        __productCode.name() : __productCode,
        __quantity.name() : __quantity,
        __unitOfMeasure.name() : __unitOfMeasure,
        __taxAmount.name() : __taxAmount,
        __lineItemTotal.name() : __lineItemTotal,
        __lineItemTotalWithTax.name() : __lineItemTotalWithTax,
        __itemDiscountAmount.name() : __itemDiscountAmount,
        __commodityCode.name() : __commodityCode,
        __unitCost.name() : __unitCost
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type {http://www.litle.com/schema}accountInfoType with content type ELEMENT_ONLY
class accountInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}accountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'accountInfoType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1621, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_accountInfoType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1623, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_litle_comschema_accountInfoType_httpwww_litle_comschemanumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1624, 12), )

    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.accountInfoType = accountInfoType
Namespace.addCategoryObject('typeBinding', 'accountInfoType', accountInfoType)


# Complex type {http://www.litle.com/schema}echeckTokenType with content type ELEMENT_ONLY
class echeckTokenType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckTokenType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1628, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1630, 12), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1631, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    
    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1632, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.litle.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), 'checkNum', '__httpwww_litle_comschema_echeckTokenType_httpwww_litle_comschemacheckNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1633, 12), )

    
    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __routingNum.name() : __routingNum,
        __accType.name() : __accType,
        __checkNum.name() : __checkNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckTokenType = echeckTokenType
Namespace.addCategoryObject('typeBinding', 'echeckTokenType', echeckTokenType)


# Complex type {http://www.litle.com/schema}payPal with content type ELEMENT_ONLY
class payPal (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}payPal with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'payPal')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1637, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}payerId uses Python identifier payerId
    __payerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payerId'), 'payerId', '__httpwww_litle_comschema_payPal_httpwww_litle_comschemapayerId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1639, 12), )

    
    payerId = property(__payerId.value, __payerId.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_payPal_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1640, 12), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}transactionId uses Python identifier transactionId
    __transactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), 'transactionId', '__httpwww_litle_comschema_payPal_httpwww_litle_comschematransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1641, 12), )

    
    transactionId = property(__transactionId.value, __transactionId.set, None, None)

    _ElementMap.update({
        __payerId.name() : __payerId,
        __token.name() : __token,
        __transactionId.name() : __transactionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.payPal = payPal
Namespace.addCategoryObject('typeBinding', 'payPal', payPal)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1660, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phone'), 'phone', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemaphone', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1663, 20), )

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element {http://www.litle.com/schema}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'city'), 'city', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemacity', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1664, 20), )

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {http://www.litle.com/schema}url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'url'), 'url', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemaurl', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1665, 20), )

    
    url = property(__url.value, __url.set, None, None)

    
    # Element {http://www.litle.com/schema}descriptor uses Python identifier descriptor
    __descriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'descriptor'), 'descriptor', '__httpwww_litle_comschema_CTD_ANON_12_httpwww_litle_comschemadescriptor', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1667, 16), )

    
    descriptor = property(__descriptor.value, __descriptor.set, None, None)

    _ElementMap.update({
        __phone.name() : __phone,
        __city.name() : __city,
        __url.name() : __url,
        __descriptor.name() : __descriptor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1693, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}bypassVelocityCheck uses Python identifier bypassVelocityCheck
    __bypassVelocityCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bypassVelocityCheck'), 'bypassVelocityCheck', '__httpwww_litle_comschema_CTD_ANON_13_httpwww_litle_comschemabypassVelocityCheck', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1695, 16), )

    
    bypassVelocityCheck = property(__bypassVelocityCheck.value, __bypassVelocityCheck.set, None, None)

    _ElementMap.update({
        __bypassVelocityCheck.name() : __bypassVelocityCheck
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1701, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}capability uses Python identifier capability
    __capability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'capability'), 'capability', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemacapability', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1703, 16), )

    
    capability = property(__capability.value, __capability.set, None, None)

    
    # Element {http://www.litle.com/schema}entryMode uses Python identifier entryMode
    __entryMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entryMode'), 'entryMode', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemaentryMode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1704, 16), )

    
    entryMode = property(__entryMode.value, __entryMode.set, None, None)

    
    # Element {http://www.litle.com/schema}cardholderId uses Python identifier cardholderId
    __cardholderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderId'), 'cardholderId', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemacardholderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1705, 16), )

    
    cardholderId = property(__cardholderId.value, __cardholderId.set, None, None)

    
    # Element {http://www.litle.com/schema}terminalId uses Python identifier terminalId
    __terminalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'terminalId'), 'terminalId', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschematerminalId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1706, 16), )

    
    terminalId = property(__terminalId.value, __terminalId.set, None, None)

    
    # Element {http://www.litle.com/schema}catLevel uses Python identifier catLevel
    __catLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'catLevel'), 'catLevel', '__httpwww_litle_comschema_CTD_ANON_14_httpwww_litle_comschemacatLevel', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1707, 16), )

    
    catLevel = property(__catLevel.value, __catLevel.set, None, None)

    _ElementMap.update({
        __capability.name() : __capability,
        __entryMode.name() : __entryMode,
        __cardholderId.name() : __cardholderId,
        __terminalId.name() : __terminalId,
        __catLevel.name() : __catLevel
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type {http://www.litle.com/schema}recycleAdviceType with content type ELEMENT_ONLY
class recycleAdviceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recycleAdviceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1825, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}nextRecycleTime uses Python identifier nextRecycleTime
    __nextRecycleTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nextRecycleTime'), 'nextRecycleTime', '__httpwww_litle_comschema_recycleAdviceType_httpwww_litle_comschemanextRecycleTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1827, 12), )

    
    nextRecycleTime = property(__nextRecycleTime.value, __nextRecycleTime.set, None, None)

    
    # Element {http://www.litle.com/schema}recycleAdviceEnd uses Python identifier recycleAdviceEnd
    __recycleAdviceEnd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceEnd'), 'recycleAdviceEnd', '__httpwww_litle_comschema_recycleAdviceType_httpwww_litle_comschemarecycleAdviceEnd', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1828, 12), )

    
    recycleAdviceEnd = property(__recycleAdviceEnd.value, __recycleAdviceEnd.set, None, None)

    _ElementMap.update({
        __nextRecycleTime.name() : __nextRecycleTime,
        __recycleAdviceEnd.name() : __recycleAdviceEnd
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recycleAdviceType = recycleAdviceType
Namespace.addCategoryObject('typeBinding', 'recycleAdviceType', recycleAdviceType)


# Complex type {http://www.litle.com/schema}recyclingType with content type ELEMENT_ONLY
class recyclingType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recyclingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recyclingType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1840, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}recycleAdvice uses Python identifier recycleAdvice
    __recycleAdvice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleAdvice'), 'recycleAdvice', '__httpwww_litle_comschema_recyclingType_httpwww_litle_comschemarecycleAdvice', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1842, 12), )

    
    recycleAdvice = property(__recycleAdvice.value, __recycleAdvice.set, None, None)

    
    # Element {http://www.litle.com/schema}recycleEngineActive uses Python identifier recycleEngineActive
    __recycleEngineActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleEngineActive'), 'recycleEngineActive', '__httpwww_litle_comschema_recyclingType_httpwww_litle_comschemarecycleEngineActive', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1843, 12), )

    
    recycleEngineActive = property(__recycleEngineActive.value, __recycleEngineActive.set, None, None)

    _ElementMap.update({
        __recycleAdvice.name() : __recycleAdvice,
        __recycleEngineActive.name() : __recycleEngineActive
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recyclingType = recyclingType
Namespace.addCategoryObject('typeBinding', 'recyclingType', recyclingType)


# Complex type {http://www.litle.com/schema}recyclingRequestType with content type ELEMENT_ONLY
class recyclingRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}recyclingRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'recyclingRequestType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1847, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}recycleBy uses Python identifier recycleBy
    __recycleBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleBy'), 'recycleBy', '__httpwww_litle_comschema_recyclingRequestType_httpwww_litle_comschemarecycleBy', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1849, 12), )

    
    recycleBy = property(__recycleBy.value, __recycleBy.set, None, None)

    
    # Element {http://www.litle.com/schema}recycleId uses Python identifier recycleId
    __recycleId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycleId'), 'recycleId', '__httpwww_litle_comschema_recyclingRequestType_httpwww_litle_comschemarecycleId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1850, 12), )

    
    recycleId = property(__recycleId.value, __recycleId.set, None, None)

    _ElementMap.update({
        __recycleBy.name() : __recycleBy,
        __recycleId.name() : __recycleId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.recyclingRequestType = recyclingRequestType
Namespace.addCategoryObject('typeBinding', 'recyclingRequestType', recyclingRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1855, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}fundingSource uses Python identifier fundingSource
    __fundingSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fundingSource'), 'fundingSource', '__httpwww_litle_comschema_CTD_ANON_15_httpwww_litle_comschemafundingSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1857, 16), )

    
    fundingSource = property(__fundingSource.value, __fundingSource.set, None, None)

    
    # Element {http://www.litle.com/schema}affluence uses Python identifier affluence
    __affluence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'affluence'), 'affluence', '__httpwww_litle_comschema_CTD_ANON_15_httpwww_litle_comschemaaffluence', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1867, 16), )

    
    affluence = property(__affluence.value, __affluence.set, None, None)

    
    # Element {http://www.litle.com/schema}issuerCountry uses Python identifier issuerCountry
    __issuerCountry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'issuerCountry'), 'issuerCountry', '__httpwww_litle_comschema_CTD_ANON_15_httpwww_litle_comschemaissuerCountry', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1868, 16), )

    
    issuerCountry = property(__issuerCountry.value, __issuerCountry.set, None, None)

    
    # Element {http://www.litle.com/schema}cardProductType uses Python identifier cardProductType
    __cardProductType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardProductType'), 'cardProductType', '__httpwww_litle_comschema_CTD_ANON_15_httpwww_litle_comschemacardProductType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1869, 16), )

    
    cardProductType = property(__cardProductType.value, __cardProductType.set, None, None)

    
    # Element {http://www.litle.com/schema}virtualAccountNumber uses Python identifier virtualAccountNumber
    __virtualAccountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualAccountNumber'), 'virtualAccountNumber', '__httpwww_litle_comschema_CTD_ANON_15_httpwww_litle_comschemavirtualAccountNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1870, 16), )

    
    virtualAccountNumber = property(__virtualAccountNumber.value, __virtualAccountNumber.set, None, None)

    _ElementMap.update({
        __fundingSource.name() : __fundingSource,
        __affluence.name() : __affluence,
        __issuerCountry.name() : __issuerCountry,
        __cardProductType.name() : __cardProductType,
        __virtualAccountNumber.name() : __virtualAccountNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1858, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1860, 28), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}availableBalance uses Python identifier availableBalance
    __availableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), 'availableBalance', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschemaavailableBalance', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1861, 28), )

    
    availableBalance = property(__availableBalance.value, __availableBalance.set, None, None)

    
    # Element {http://www.litle.com/schema}reloadable uses Python identifier reloadable
    __reloadable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reloadable'), 'reloadable', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschemareloadable', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1862, 28), )

    
    reloadable = property(__reloadable.value, __reloadable.set, None, None)

    
    # Element {http://www.litle.com/schema}prepaidCardType uses Python identifier prepaidCardType
    __prepaidCardType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prepaidCardType'), 'prepaidCardType', '__httpwww_litle_comschema_CTD_ANON_16_httpwww_litle_comschemaprepaidCardType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1863, 28), )

    
    prepaidCardType = property(__prepaidCardType.value, __prepaidCardType.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __availableBalance.name() : __availableBalance,
        __reloadable.name() : __reloadable,
        __prepaidCardType.name() : __prepaidCardType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2154, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}avsResult uses Python identifier avsResult
    __avsResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'avsResult'), 'avsResult', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemaavsResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2156, 16), )

    
    avsResult = property(__avsResult.value, __avsResult.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationResult uses Python identifier cardValidationResult
    __cardValidationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationResult'), 'cardValidationResult', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemacardValidationResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2157, 16), )

    
    cardValidationResult = property(__cardValidationResult.value, __cardValidationResult.set, None, None)

    
    # Element {http://www.litle.com/schema}authenticationResult uses Python identifier authenticationResult
    __authenticationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authenticationResult'), 'authenticationResult', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemaauthenticationResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2159, 16), )

    
    authenticationResult = property(__authenticationResult.value, __authenticationResult.set, None, None)

    
    # Element {http://www.litle.com/schema}advancedAVSResult uses Python identifier advancedAVSResult
    __advancedAVSResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedAVSResult'), 'advancedAVSResult', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemaadvancedAVSResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2160, 16), )

    
    advancedAVSResult = property(__advancedAVSResult.value, __advancedAVSResult.set, None, None)

    
    # Element {http://www.litle.com/schema}advancedFraudResults uses Python identifier advancedFraudResults
    __advancedFraudResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), 'advancedFraudResults', '__httpwww_litle_comschema_CTD_ANON_17_httpwww_litle_comschemaadvancedFraudResults', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2161, 16), )

    
    advancedFraudResults = property(__advancedFraudResults.value, __advancedFraudResults.set, None, None)

    _ElementMap.update({
        __avsResult.name() : __avsResult,
        __cardValidationResult.name() : __cardValidationResult,
        __authenticationResult.name() : __authenticationResult,
        __advancedAVSResult.name() : __advancedAVSResult,
        __advancedFraudResults.name() : __advancedFraudResults
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2234, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}availableBalance uses Python identifier availableBalance
    __availableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), 'availableBalance', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemaavailableBalance', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2236, 13), )

    
    availableBalance = property(__availableBalance.value, __availableBalance.set, None, None)

    
    # Element {http://www.litle.com/schema}beginningBalance uses Python identifier beginningBalance
    __beginningBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'beginningBalance'), 'beginningBalance', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemabeginningBalance', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2237, 13), )

    
    beginningBalance = property(__beginningBalance.value, __beginningBalance.set, None, None)

    
    # Element {http://www.litle.com/schema}endingBalance uses Python identifier endingBalance
    __endingBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endingBalance'), 'endingBalance', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemaendingBalance', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2238, 13), )

    
    endingBalance = property(__endingBalance.value, __endingBalance.set, None, None)

    
    # Element {http://www.litle.com/schema}cashBackAmount uses Python identifier cashBackAmount
    __cashBackAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cashBackAmount'), 'cashBackAmount', '__httpwww_litle_comschema_CTD_ANON_18_httpwww_litle_comschemacashBackAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2239, 13), )

    
    cashBackAmount = property(__cashBackAmount.value, __cashBackAmount.set, None, None)

    _ElementMap.update({
        __availableBalance.name() : __availableBalance,
        __beginningBalance.name() : __beginningBalance,
        __endingBalance.name() : __endingBalance,
        __cashBackAmount.name() : __cashBackAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2245, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}accountNumber uses Python identifier accountNumber
    __accountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), 'accountNumber', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemaaccountNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2247, 13), )

    
    accountNumber = property(__accountNumber.value, __accountNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_CTD_ANON_19_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2248, 13), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    _ElementMap.update({
        __accountNumber.name() : __accountNumber,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type {http://www.litle.com/schema}echeckAccountInfoType with content type ELEMENT_ONLY
class echeckAccountInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckAccountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckAccountInfoType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2417, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_litle_comschema_echeckAccountInfoType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2419, 16), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.litle.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_litle_comschema_echeckAccountInfoType_httpwww_litle_comschemaaccNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2420, 16), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckAccountInfoType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2421, 16), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckAccountInfoType = echeckAccountInfoType
Namespace.addCategoryObject('typeBinding', 'echeckAccountInfoType', echeckAccountInfoType)


# Complex type {http://www.litle.com/schema}echeckTokenInfoType with content type ELEMENT_ONLY
class echeckTokenInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckTokenInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckTokenInfoType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2425, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_litle_comschema_echeckTokenInfoType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2427, 16), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_echeckTokenInfoType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2428, 16), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckTokenInfoType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2429, 16), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __litleToken.name() : __litleToken,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckTokenInfoType = echeckTokenInfoType
Namespace.addCategoryObject('typeBinding', 'echeckTokenInfoType', echeckTokenInfoType)


# Complex type {http://www.litle.com/schema}cardAccountInfoType with content type ELEMENT_ONLY
class cardAccountInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardAccountInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardAccountInfoType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2434, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_cardAccountInfoType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2436, 16), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_litle_comschema_cardAccountInfoType_httpwww_litle_comschemanumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2437, 16), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_litle_comschema_cardAccountInfoType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2438, 16), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __expDate.name() : __expDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardAccountInfoType = cardAccountInfoType
Namespace.addCategoryObject('typeBinding', 'cardAccountInfoType', cardAccountInfoType)


# Complex type {http://www.litle.com/schema}cardTokenInfoType with content type ELEMENT_ONLY
class cardTokenInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}cardTokenInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardTokenInfoType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2442, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2444, 16), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2445, 16), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}expDate uses Python identifier expDate
    __expDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expDate'), 'expDate', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschemaexpDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2446, 16), )

    
    expDate = property(__expDate.value, __expDate.set, None, None)

    
    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_litle_comschema_cardTokenInfoType_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2447, 16), )

    
    bin = property(__bin.value, __bin.set, None, None)

    _ElementMap.update({
        __litleToken.name() : __litleToken,
        __type.name() : __type,
        __expDate.name() : __expDate,
        __bin.name() : __bin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardTokenInfoType = cardTokenInfoType
Namespace.addCategoryObject('typeBinding', 'cardTokenInfoType', cardTokenInfoType)


# Complex type {http://www.litle.com/schema}extendedCardResponseType with content type ELEMENT_ONLY
class extendedCardResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}extendedCardResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2452, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_extendedCardResponseType_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2454, 16), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'code'), 'code', '__httpwww_litle_comschema_extendedCardResponseType_httpwww_litle_comschemacode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2455, 16), )

    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __code.name() : __code
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.extendedCardResponseType = extendedCardResponseType
Namespace.addCategoryObject('typeBinding', 'extendedCardResponseType', extendedCardResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2461, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}originalAccountInfo uses Python identifier originalAccountInfo
    __originalAccountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalAccountInfo'), 'originalAccountInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaoriginalAccountInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2464, 20), )

    
    originalAccountInfo = property(__originalAccountInfo.value, __originalAccountInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}newAccountInfo uses Python identifier newAccountInfo
    __newAccountInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newAccountInfo'), 'newAccountInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemanewAccountInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2465, 20), )

    
    newAccountInfo = property(__newAccountInfo.value, __newAccountInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}originalTokenInfo uses Python identifier originalTokenInfo
    __originalTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTokenInfo'), 'originalTokenInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaoriginalTokenInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2469, 20), )

    
    originalTokenInfo = property(__originalTokenInfo.value, __originalTokenInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}newTokenInfo uses Python identifier newTokenInfo
    __newTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newTokenInfo'), 'newTokenInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemanewTokenInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2470, 20), )

    
    newTokenInfo = property(__newTokenInfo.value, __newTokenInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}originalCardInfo uses Python identifier originalCardInfo
    __originalCardInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalCardInfo'), 'originalCardInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaoriginalCardInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2474, 20), )

    
    originalCardInfo = property(__originalCardInfo.value, __originalCardInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}newCardInfo uses Python identifier newCardInfo
    __newCardInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newCardInfo'), 'newCardInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemanewCardInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2475, 20), )

    
    newCardInfo = property(__newCardInfo.value, __newCardInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}extendedCardResponse uses Python identifier extendedCardResponse
    __extendedCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse'), 'extendedCardResponse', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaextendedCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2476, 20), )

    
    extendedCardResponse = property(__extendedCardResponse.value, __extendedCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}originalCardTokenInfo uses Python identifier originalCardTokenInfo
    __originalCardTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalCardTokenInfo'), 'originalCardTokenInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemaoriginalCardTokenInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2480, 20), )

    
    originalCardTokenInfo = property(__originalCardTokenInfo.value, __originalCardTokenInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}newCardTokenInfo uses Python identifier newCardTokenInfo
    __newCardTokenInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'newCardTokenInfo'), 'newCardTokenInfo', '__httpwww_litle_comschema_CTD_ANON_20_httpwww_litle_comschemanewCardTokenInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2481, 20), )

    
    newCardTokenInfo = property(__newCardTokenInfo.value, __newCardTokenInfo.set, None, None)

    _ElementMap.update({
        __originalAccountInfo.name() : __originalAccountInfo,
        __newAccountInfo.name() : __newAccountInfo,
        __originalTokenInfo.name() : __originalTokenInfo,
        __newTokenInfo.name() : __newTokenInfo,
        __originalCardInfo.name() : __originalCardInfo,
        __newCardInfo.name() : __newCardInfo,
        __extendedCardResponse.name() : __extendedCardResponse,
        __originalCardTokenInfo.name() : __originalCardTokenInfo,
        __newCardTokenInfo.name() : __newCardTokenInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type {http://www.litle.com/schema}echeckType with content type ELEMENT_ONLY
class echeckType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2544, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}accType uses Python identifier accType
    __accType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accType'), 'accType', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemaaccType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2546, 12), )

    
    accType = property(__accType.value, __accType.set, None, None)

    
    # Element {http://www.litle.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemaaccNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2547, 12), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2548, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    
    # Element {http://www.litle.com/schema}checkNum uses Python identifier checkNum
    __checkNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), 'checkNum', '__httpwww_litle_comschema_echeckType_httpwww_litle_comschemacheckNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2549, 12), )

    
    checkNum = property(__checkNum.value, __checkNum.set, None, None)

    _ElementMap.update({
        __accType.name() : __accType,
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum,
        __checkNum.name() : __checkNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckType = echeckType
Namespace.addCategoryObject('typeBinding', 'echeckType', echeckType)


# Complex type {http://www.litle.com/schema}echeckForTokenType with content type ELEMENT_ONLY
class echeckForTokenType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}echeckForTokenType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'echeckForTokenType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2553, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}accNum uses Python identifier accNum
    __accNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accNum'), 'accNum', '__httpwww_litle_comschema_echeckForTokenType_httpwww_litle_comschemaaccNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2555, 12), )

    
    accNum = property(__accNum.value, __accNum.set, None, None)

    
    # Element {http://www.litle.com/schema}routingNum uses Python identifier routingNum
    __routingNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), 'routingNum', '__httpwww_litle_comschema_echeckForTokenType_httpwww_litle_comschemaroutingNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2556, 12), )

    
    routingNum = property(__routingNum.value, __routingNum.set, None, None)

    _ElementMap.update({
        __accNum.name() : __accNum,
        __routingNum.name() : __routingNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.echeckForTokenType = echeckForTokenType
Namespace.addCategoryObject('typeBinding', 'echeckForTokenType', echeckForTokenType)


# Complex type {http://www.litle.com/schema}filteringType with content type ELEMENT_ONLY
class filteringType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}filteringType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'filteringType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2754, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}prepaid uses Python identifier prepaid
    __prepaid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prepaid'), 'prepaid', '__httpwww_litle_comschema_filteringType_httpwww_litle_comschemaprepaid', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2756, 12), )

    
    prepaid = property(__prepaid.value, __prepaid.set, None, None)

    
    # Element {http://www.litle.com/schema}international uses Python identifier international
    __international = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'international'), 'international', '__httpwww_litle_comschema_filteringType_httpwww_litle_comschemainternational', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2757, 12), )

    
    international = property(__international.value, __international.set, None, None)

    
    # Element {http://www.litle.com/schema}chargeback uses Python identifier chargeback
    __chargeback = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'chargeback'), 'chargeback', '__httpwww_litle_comschema_filteringType_httpwww_litle_comschemachargeback', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2758, 12), )

    
    chargeback = property(__chargeback.value, __chargeback.set, None, None)

    _ElementMap.update({
        __prepaid.name() : __prepaid,
        __international.name() : __international,
        __chargeback.name() : __chargeback
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.filteringType = filteringType
Namespace.addCategoryObject('typeBinding', 'filteringType', filteringType)


# Complex type {http://www.litle.com/schema}virtualGiftCardType with content type ELEMENT_ONLY
class virtualGiftCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}virtualGiftCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2816, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}accountNumberLength uses Python identifier accountNumberLength
    __accountNumberLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountNumberLength'), 'accountNumberLength', '__httpwww_litle_comschema_virtualGiftCardType_httpwww_litle_comschemaaccountNumberLength', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2818, 20), )

    
    accountNumberLength = property(__accountNumberLength.value, __accountNumberLength.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardBin uses Python identifier giftCardBin
    __giftCardBin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardBin'), 'giftCardBin', '__httpwww_litle_comschema_virtualGiftCardType_httpwww_litle_comschemagiftCardBin', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2819, 20), )

    
    giftCardBin = property(__giftCardBin.value, __giftCardBin.set, None, None)

    _ElementMap.update({
        __accountNumberLength.name() : __accountNumberLength,
        __giftCardBin.name() : __giftCardBin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.virtualGiftCardType = virtualGiftCardType
Namespace.addCategoryObject('typeBinding', 'virtualGiftCardType', virtualGiftCardType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2858, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}walletSourceType uses Python identifier walletSourceType
    __walletSourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'walletSourceType'), 'walletSourceType', '__httpwww_litle_comschema_CTD_ANON_21_httpwww_litle_comschemawalletSourceType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2860, 16), )

    
    walletSourceType = property(__walletSourceType.value, __walletSourceType.set, None, None)

    
    # Element {http://www.litle.com/schema}walletSourceTypeId uses Python identifier walletSourceTypeId
    __walletSourceTypeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'walletSourceTypeId'), 'walletSourceTypeId', '__httpwww_litle_comschema_CTD_ANON_21_httpwww_litle_comschemawalletSourceTypeId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2861, 16), )

    
    walletSourceTypeId = property(__walletSourceTypeId.value, __walletSourceTypeId.set, None, None)

    _ElementMap.update({
        __walletSourceType.name() : __walletSourceType,
        __walletSourceTypeId.name() : __walletSourceTypeId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type {http://www.litle.com/schema}applepayType with content type ELEMENT_ONLY
class applepayType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}applepayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'applepayType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2866, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}data uses Python identifier data
    __data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'data'), 'data', '__httpwww_litle_comschema_applepayType_httpwww_litle_comschemadata', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2868, 12), )

    
    data = property(__data.value, __data.set, None, None)

    
    # Element {http://www.litle.com/schema}header uses Python identifier header
    __header = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'header'), 'header', '__httpwww_litle_comschema_applepayType_httpwww_litle_comschemaheader', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2875, 12), )

    
    header = property(__header.value, __header.set, None, None)

    
    # Element {http://www.litle.com/schema}signature uses Python identifier signature
    __signature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signature'), 'signature', '__httpwww_litle_comschema_applepayType_httpwww_litle_comschemasignature', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2876, 12), )

    
    signature = property(__signature.value, __signature.set, None, None)

    
    # Element {http://www.litle.com/schema}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_litle_comschema_applepayType_httpwww_litle_comschemaversion', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2883, 12), )

    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __data.name() : __data,
        __header.name() : __header,
        __signature.name() : __signature,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.applepayType = applepayType
Namespace.addCategoryObject('typeBinding', 'applepayType', applepayType)


# Complex type {http://www.litle.com/schema}applepayHeaderType with content type ELEMENT_ONLY
class applepayHeaderType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}applepayHeaderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'applepayHeaderType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2894, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}applicationData uses Python identifier applicationData
    __applicationData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicationData'), 'applicationData', '__httpwww_litle_comschema_applepayHeaderType_httpwww_litle_comschemaapplicationData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2896, 12), )

    
    applicationData = property(__applicationData.value, __applicationData.set, None, None)

    
    # Element {http://www.litle.com/schema}ephemeralPublicKey uses Python identifier ephemeralPublicKey
    __ephemeralPublicKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ephemeralPublicKey'), 'ephemeralPublicKey', '__httpwww_litle_comschema_applepayHeaderType_httpwww_litle_comschemaephemeralPublicKey', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2903, 12), )

    
    ephemeralPublicKey = property(__ephemeralPublicKey.value, __ephemeralPublicKey.set, None, None)

    
    # Element {http://www.litle.com/schema}publicKeyHash uses Python identifier publicKeyHash
    __publicKeyHash = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'publicKeyHash'), 'publicKeyHash', '__httpwww_litle_comschema_applepayHeaderType_httpwww_litle_comschemapublicKeyHash', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2910, 12), )

    
    publicKeyHash = property(__publicKeyHash.value, __publicKeyHash.set, None, None)

    
    # Element {http://www.litle.com/schema}transactionId uses Python identifier transactionId
    __transactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), 'transactionId', '__httpwww_litle_comschema_applepayHeaderType_httpwww_litle_comschematransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2917, 12), )

    
    transactionId = property(__transactionId.value, __transactionId.set, None, None)

    _ElementMap.update({
        __applicationData.name() : __applicationData,
        __ephemeralPublicKey.name() : __ephemeralPublicKey,
        __publicKeyHash.name() : __publicKeyHash,
        __transactionId.name() : __transactionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.applepayHeaderType = applepayHeaderType
Namespace.addCategoryObject('typeBinding', 'applepayHeaderType', applepayHeaderType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2928, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}applicationPrimaryAccountNumber uses Python identifier applicationPrimaryAccountNumber
    __applicationPrimaryAccountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicationPrimaryAccountNumber'), 'applicationPrimaryAccountNumber', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaapplicationPrimaryAccountNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2930, 13), )

    
    applicationPrimaryAccountNumber = property(__applicationPrimaryAccountNumber.value, __applicationPrimaryAccountNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}applicationExpirationDate uses Python identifier applicationExpirationDate
    __applicationExpirationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicationExpirationDate'), 'applicationExpirationDate', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaapplicationExpirationDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2931, 13), )

    
    applicationExpirationDate = property(__applicationExpirationDate.value, __applicationExpirationDate.set, None, None)

    
    # Element {http://www.litle.com/schema}currencyCode uses Python identifier currencyCode
    __currencyCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'currencyCode'), 'currencyCode', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemacurrencyCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2932, 13), )

    
    currencyCode = property(__currencyCode.value, __currencyCode.set, None, None)

    
    # Element {http://www.litle.com/schema}transactionAmount uses Python identifier transactionAmount
    __transactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionAmount'), 'transactionAmount', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschematransactionAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2933, 13), )

    
    transactionAmount = property(__transactionAmount.value, __transactionAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}cardholderName uses Python identifier cardholderName
    __cardholderName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), 'cardholderName', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemacardholderName', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2934, 13), )

    
    cardholderName = property(__cardholderName.value, __cardholderName.set, None, None)

    
    # Element {http://www.litle.com/schema}deviceManufacturerIdentifier uses Python identifier deviceManufacturerIdentifier
    __deviceManufacturerIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deviceManufacturerIdentifier'), 'deviceManufacturerIdentifier', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemadeviceManufacturerIdentifier', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2935, 13), )

    
    deviceManufacturerIdentifier = property(__deviceManufacturerIdentifier.value, __deviceManufacturerIdentifier.set, None, None)

    
    # Element {http://www.litle.com/schema}paymentDataType uses Python identifier paymentDataType
    __paymentDataType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentDataType'), 'paymentDataType', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemapaymentDataType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2936, 13), )

    
    paymentDataType = property(__paymentDataType.value, __paymentDataType.set, None, None)

    
    # Element {http://www.litle.com/schema}onlinePaymentCryptogram uses Python identifier onlinePaymentCryptogram
    __onlinePaymentCryptogram = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onlinePaymentCryptogram'), 'onlinePaymentCryptogram', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaonlinePaymentCryptogram', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2937, 13), )

    
    onlinePaymentCryptogram = property(__onlinePaymentCryptogram.value, __onlinePaymentCryptogram.set, None, None)

    
    # Element {http://www.litle.com/schema}eciIndicator uses Python identifier eciIndicator
    __eciIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator'), 'eciIndicator', '__httpwww_litle_comschema_CTD_ANON_22_httpwww_litle_comschemaeciIndicator', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2938, 13), )

    
    eciIndicator = property(__eciIndicator.value, __eciIndicator.set, None, None)

    _ElementMap.update({
        __applicationPrimaryAccountNumber.name() : __applicationPrimaryAccountNumber,
        __applicationExpirationDate.name() : __applicationExpirationDate,
        __currencyCode.name() : __currencyCode,
        __transactionAmount.name() : __transactionAmount,
        __cardholderName.name() : __cardholderName,
        __deviceManufacturerIdentifier.name() : __deviceManufacturerIdentifier,
        __paymentDataType.name() : __paymentDataType,
        __onlinePaymentCryptogram.name() : __onlinePaymentCryptogram,
        __eciIndicator.name() : __eciIndicator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2969, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}litleSessionId uses Python identifier litleSessionId
    __litleSessionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleSessionId'), 'litleSessionId', '__httpwww_litle_comschema_CTD_ANON_23_httpwww_litle_comschemalitleSessionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2971, 16), )

    
    litleSessionId = property(__litleSessionId.value, __litleSessionId.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdateFileRequestData uses Python identifier accountUpdateFileRequestData
    __accountUpdateFileRequestData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData'), 'accountUpdateFileRequestData', '__httpwww_litle_comschema_CTD_ANON_23_httpwww_litle_comschemaaccountUpdateFileRequestData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3173, 4), )

    
    accountUpdateFileRequestData = property(__accountUpdateFileRequestData.value, __accountUpdateFileRequestData.set, None, None)

    _ElementMap.update({
        __litleSessionId.name() : __litleSessionId,
        __accountUpdateFileRequestData.name() : __accountUpdateFileRequestData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3174, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_24_httpwww_litle_comschemamerchantId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3176, 16), )

    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    
    # Element {http://www.litle.com/schema}postDay uses Python identifier postDay
    __postDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDay'), 'postDay', '__httpwww_litle_comschema_CTD_ANON_24_httpwww_litle_comschemapostDay', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3177, 16), )

    
    postDay = property(__postDay.value, __postDay.set, None, None)

    _ElementMap.update({
        __merchantId.name() : __merchantId,
        __postDay.name() : __postDay
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type {http://www.litle.com/schema}voidRecyclingResponseType with content type ELEMENT_ONLY
class voidRecyclingResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}voidRecyclingResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'voidRecyclingResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3249, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}creditLitleTxnId uses Python identifier creditLitleTxnId
    __creditLitleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditLitleTxnId'), 'creditLitleTxnId', '__httpwww_litle_comschema_voidRecyclingResponseType_httpwww_litle_comschemacreditLitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3251, 12), )

    
    creditLitleTxnId = property(__creditLitleTxnId.value, __creditLitleTxnId.set, None, None)

    _ElementMap.update({
        __creditLitleTxnId.name() : __creditLitleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.voidRecyclingResponseType = voidRecyclingResponseType
Namespace.addCategoryObject('typeBinding', 'voidRecyclingResponseType', voidRecyclingResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 733, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_25_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 737, 25), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 745, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 749, 25), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 750, 25), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 753, 29), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 754, 29), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 755, 29), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.litle.com/schema}billingDate uses Python identifier billingDate
    __billingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billingDate'), 'billingDate', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemabillingDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 757, 25), )

    
    billingDate = property(__billingDate.value, __billingDate.set, None, None)

    
    # Element {http://www.litle.com/schema}createDiscount uses Python identifier createDiscount
    __createDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), 'createDiscount', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemacreateDiscount', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 758, 25), )

    
    createDiscount = property(__createDiscount.value, __createDiscount.set, None, None)

    
    # Element {http://www.litle.com/schema}updateDiscount uses Python identifier updateDiscount
    __updateDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updateDiscount'), 'updateDiscount', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemaupdateDiscount', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 759, 25), )

    
    updateDiscount = property(__updateDiscount.value, __updateDiscount.set, None, None)

    
    # Element {http://www.litle.com/schema}deleteDiscount uses Python identifier deleteDiscount
    __deleteDiscount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deleteDiscount'), 'deleteDiscount', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemadeleteDiscount', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 760, 25), )

    
    deleteDiscount = property(__deleteDiscount.value, __deleteDiscount.set, None, None)

    
    # Element {http://www.litle.com/schema}createAddOn uses Python identifier createAddOn
    __createAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), 'createAddOn', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemacreateAddOn', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 761, 25), )

    
    createAddOn = property(__createAddOn.value, __createAddOn.set, None, None)

    
    # Element {http://www.litle.com/schema}updateAddOn uses Python identifier updateAddOn
    __updateAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updateAddOn'), 'updateAddOn', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemaupdateAddOn', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 762, 25), )

    
    updateAddOn = property(__updateAddOn.value, __updateAddOn.set, None, None)

    
    # Element {http://www.litle.com/schema}deleteAddOn uses Python identifier deleteAddOn
    __deleteAddOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deleteAddOn'), 'deleteAddOn', '__httpwww_litle_comschema_CTD_ANON_26_httpwww_litle_comschemadeleteAddOn', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 763, 25), )

    
    deleteAddOn = property(__deleteAddOn.value, __deleteAddOn.set, None, None)

    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __subscriptionId.name() : __subscriptionId,
        __planCode.name() : __planCode,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __billingDate.name() : __billingDate,
        __createDiscount.name() : __createDiscount,
        __updateDiscount.name() : __updateDiscount,
        __deleteDiscount.name() : __deleteDiscount,
        __createAddOn.name() : __createAddOn,
        __updateAddOn.name() : __updateAddOn,
        __deleteAddOn.name() : __deleteAddOn
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 771, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 775, 25), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.litle.com/schema}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemaname', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 776, 25), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.litle.com/schema}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemadescription', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 777, 25), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.litle.com/schema}intervalType uses Python identifier intervalType
    __intervalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'intervalType'), 'intervalType', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemaintervalType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 778, 25), )

    
    intervalType = property(__intervalType.value, __intervalType.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 779, 25), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}numberOfPayments uses Python identifier numberOfPayments
    __numberOfPayments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), 'numberOfPayments', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemanumberOfPayments', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 780, 25), )

    
    numberOfPayments = property(__numberOfPayments.value, __numberOfPayments.set, None, None)

    
    # Element {http://www.litle.com/schema}trialNumberOfIntervals uses Python identifier trialNumberOfIntervals
    __trialNumberOfIntervals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'trialNumberOfIntervals'), 'trialNumberOfIntervals', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschematrialNumberOfIntervals', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 781, 25), )

    
    trialNumberOfIntervals = property(__trialNumberOfIntervals.value, __trialNumberOfIntervals.set, None, None)

    
    # Element {http://www.litle.com/schema}trialIntervalType uses Python identifier trialIntervalType
    __trialIntervalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'trialIntervalType'), 'trialIntervalType', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschematrialIntervalType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 782, 25), )

    
    trialIntervalType = property(__trialIntervalType.value, __trialIntervalType.set, None, None)

    
    # Element {http://www.litle.com/schema}active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'active'), 'active', '__httpwww_litle_comschema_CTD_ANON_27_httpwww_litle_comschemaactive', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 783, 25), )

    
    active = property(__active.value, __active.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __name.name() : __name,
        __description.name() : __description,
        __intervalType.name() : __intervalType,
        __amount.name() : __amount,
        __numberOfPayments.name() : __numberOfPayments,
        __trialNumberOfIntervals.name() : __trialNumberOfIntervals,
        __trialIntervalType.name() : __trialIntervalType,
        __active.name() : __active
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (recurringTransactionType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 791, 8)
    _ElementMap = recurringTransactionType._ElementMap.copy()
    _AttributeMap = recurringTransactionType._AttributeMap.copy()
    # Base type is recurringTransactionType
    
    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_28_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 795, 25), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    
    # Element {http://www.litle.com/schema}active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'active'), 'active', '__httpwww_litle_comschema_CTD_ANON_28_httpwww_litle_comschemaactive', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 796, 25), )

    
    active = property(__active.value, __active.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode,
        __active.name() : __active
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 804, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_29_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 808, 25), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 816, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element {http://www.litle.com/schema}subscriptionId uses Python identifier subscriptionId
    __subscriptionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), 'subscriptionId', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschemasubscriptionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 820, 25), )

    
    subscriptionId = property(__subscriptionId.value, __subscriptionId.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_30_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 821, 25), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    _ElementMap.update({
        __subscriptionId.name() : __subscriptionId,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 829, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_31_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 833, 25), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (recurringTransactionResponseType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 841, 8)
    _ElementMap = recurringTransactionResponseType._ElementMap.copy()
    _AttributeMap = recurringTransactionResponseType._AttributeMap.copy()
    # Base type is recurringTransactionResponseType
    
    # Element litleTxnId ({http://www.litle.com/schema}litleTxnId) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element response ({http://www.litle.com/schema}response) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element message ({http://www.litle.com/schema}message) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element responseTime ({http://www.litle.com/schema}responseTime) inherited from {http://www.litle.com/schema}recurringTransactionResponseType
    
    # Element {http://www.litle.com/schema}planCode uses Python identifier planCode
    __planCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'planCode'), 'planCode', '__httpwww_litle_comschema_CTD_ANON_32_httpwww_litle_comschemaplanCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 845, 25), )

    
    planCode = property(__planCode.value, __planCode.set, None, None)

    _ElementMap.update({
        __planCode.name() : __planCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type {http://www.litle.com/schema}transactionType with content type EMPTY
class transactionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}transactionType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 965, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_litle_comschema_transactionType_id', _module_typeBindings.string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 966, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 966, 8)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute customerId uses Python identifier customerId
    __customerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'customerId'), 'customerId', '__httpwww_litle_comschema_transactionType_customerId', _module_typeBindings.customerIdType)
    __customerId._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 967, 8)
    __customerId._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 967, 8)
    
    customerId = property(__customerId.value, __customerId.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id,
        __customerId.name() : __customerId
    })
_module_typeBindings.transactionType = transactionType
Namespace.addCategoryObject('typeBinding', 'transactionType', transactionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2955, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authentication'), 'authentication', '__httpwww_litle_comschema_CTD_ANON_33_httpwww_litle_comschemaauthentication', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 5, 4), )

    
    authentication = property(__authentication.value, __authentication.set, None, None)

    
    # Element {http://www.litle.com/schema}RFRRequest uses Python identifier RFRRequest
    __RFRRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest'), 'RFRRequest', '__httpwww_litle_comschema_CTD_ANON_33_httpwww_litle_comschemaRFRRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2968, 4), )

    
    RFRRequest = property(__RFRRequest.value, __RFRRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}batchRequest uses Python identifier batchRequest
    __batchRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'batchRequest'), 'batchRequest', '__httpwww_litle_comschema_CTD_ANON_33_httpwww_litle_comschemabatchRequest', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2976, 4), )

    
    batchRequest = property(__batchRequest.value, __batchRequest.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_litle_comschema_CTD_ANON_33_version', _module_typeBindings.versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2963, 12)
    __version._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2963, 12)
    
    version = property(__version.value, __version.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_33_id', _module_typeBindings.string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2964, 12)
    __id._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2964, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute numBatchRequests uses Python identifier numBatchRequests
    __numBatchRequests = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numBatchRequests'), 'numBatchRequests', '__httpwww_litle_comschema_CTD_ANON_33_numBatchRequests', pyxb.binding.datatypes.integer, required=True)
    __numBatchRequests._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2965, 12)
    __numBatchRequests._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2965, 12)
    
    numBatchRequests = property(__numBatchRequests.value, __numBatchRequests.set, None, None)

    _ElementMap.update({
        __authentication.name() : __authentication,
        __RFRRequest.name() : __RFRRequest,
        __batchRequest.name() : __batchRequest
    })
    _AttributeMap.update({
        __version.name() : __version,
        __id.name() : __id,
        __numBatchRequests.name() : __numBatchRequests
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2977, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}recurringTransaction uses Python identifier recurringTransaction
    __recurringTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), 'recurringTransaction', '__httpwww_litle_comschema_CTD_ANON_34_httpwww_litle_comschemarecurringTransaction', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 717, 4), )

    
    recurringTransaction = property(__recurringTransaction.value, __recurringTransaction.set, None, None)

    
    # Element {http://www.litle.com/schema}transaction uses Python identifier transaction
    __transaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transaction'), 'transaction', '__httpwww_litle_comschema_CTD_ANON_34_httpwww_litle_comschematransaction', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 963, 4), )

    
    transaction = property(__transaction.value, __transaction.set, None, None)

    
    # Attribute merchantSdk uses Python identifier merchantSdk
    __merchantSdk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantSdk'), 'merchantSdk', '__httpwww_litle_comschema_CTD_ANON_34_merchantSdk', pyxb.binding.datatypes.string)
    __merchantSdk._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2982, 12)
    __merchantSdk._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2982, 12)
    
    merchantSdk = property(__merchantSdk.value, __merchantSdk.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_34_id', _module_typeBindings.string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2983, 12)
    __id._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2983, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute numAuths uses Python identifier numAuths
    __numAuths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAuths'), 'numAuths', '__httpwww_litle_comschema_CTD_ANON_34_numAuths', pyxb.binding.datatypes.integer)
    __numAuths._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2984, 12)
    __numAuths._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2984, 12)
    
    numAuths = property(__numAuths.value, __numAuths.set, None, None)

    
    # Attribute authAmount uses Python identifier authAmount
    __authAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authAmount'), 'authAmount', '__httpwww_litle_comschema_CTD_ANON_34_authAmount', _module_typeBindings.batchTotalAmountType)
    __authAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2985, 12)
    __authAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2985, 12)
    
    authAmount = property(__authAmount.value, __authAmount.set, None, None)

    
    # Attribute numAuthReversals uses Python identifier numAuthReversals
    __numAuthReversals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAuthReversals'), 'numAuthReversals', '__httpwww_litle_comschema_CTD_ANON_34_numAuthReversals', pyxb.binding.datatypes.integer)
    __numAuthReversals._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2986, 12)
    __numAuthReversals._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2986, 12)
    
    numAuthReversals = property(__numAuthReversals.value, __numAuthReversals.set, None, None)

    
    # Attribute authReversalAmount uses Python identifier authReversalAmount
    __authReversalAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authReversalAmount'), 'authReversalAmount', '__httpwww_litle_comschema_CTD_ANON_34_authReversalAmount', _module_typeBindings.batchTotalAmountType)
    __authReversalAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2987, 12)
    __authReversalAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2987, 12)
    
    authReversalAmount = property(__authReversalAmount.value, __authReversalAmount.set, None, None)

    
    # Attribute numCaptures uses Python identifier numCaptures
    __numCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCaptures'), 'numCaptures', '__httpwww_litle_comschema_CTD_ANON_34_numCaptures', pyxb.binding.datatypes.integer)
    __numCaptures._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2988, 12)
    __numCaptures._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2988, 12)
    
    numCaptures = property(__numCaptures.value, __numCaptures.set, None, None)

    
    # Attribute captureAmount uses Python identifier captureAmount
    __captureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'captureAmount'), 'captureAmount', '__httpwww_litle_comschema_CTD_ANON_34_captureAmount', _module_typeBindings.batchTotalAmountType)
    __captureAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2989, 12)
    __captureAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2989, 12)
    
    captureAmount = property(__captureAmount.value, __captureAmount.set, None, None)

    
    # Attribute numExtCaptures uses Python identifier numExtCaptures
    __numExtCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numExtCaptures'), 'numExtCaptures', '__httpwww_litle_comschema_CTD_ANON_34_numExtCaptures', pyxb.binding.datatypes.integer)
    __numExtCaptures._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2990, 12)
    __numExtCaptures._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2990, 12)
    
    numExtCaptures = property(__numExtCaptures.value, __numExtCaptures.set, None, None)

    
    # Attribute extCaptureAmount uses Python identifier extCaptureAmount
    __extCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'extCaptureAmount'), 'extCaptureAmount', '__httpwww_litle_comschema_CTD_ANON_34_extCaptureAmount', _module_typeBindings.batchTotalAmountType)
    __extCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2991, 12)
    __extCaptureAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2991, 12)
    
    extCaptureAmount = property(__extCaptureAmount.value, __extCaptureAmount.set, None, None)

    
    # Attribute numCredits uses Python identifier numCredits
    __numCredits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCredits'), 'numCredits', '__httpwww_litle_comschema_CTD_ANON_34_numCredits', pyxb.binding.datatypes.integer)
    __numCredits._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2992, 12)
    __numCredits._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2992, 12)
    
    numCredits = property(__numCredits.value, __numCredits.set, None, None)

    
    # Attribute creditAmount uses Python identifier creditAmount
    __creditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'creditAmount'), 'creditAmount', '__httpwww_litle_comschema_CTD_ANON_34_creditAmount', _module_typeBindings.batchTotalAmountType)
    __creditAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2993, 12)
    __creditAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2993, 12)
    
    creditAmount = property(__creditAmount.value, __creditAmount.set, None, None)

    
    # Attribute numForceCaptures uses Python identifier numForceCaptures
    __numForceCaptures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numForceCaptures'), 'numForceCaptures', '__httpwww_litle_comschema_CTD_ANON_34_numForceCaptures', pyxb.binding.datatypes.integer)
    __numForceCaptures._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2994, 12)
    __numForceCaptures._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2994, 12)
    
    numForceCaptures = property(__numForceCaptures.value, __numForceCaptures.set, None, None)

    
    # Attribute forceCaptureAmount uses Python identifier forceCaptureAmount
    __forceCaptureAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'forceCaptureAmount'), 'forceCaptureAmount', '__httpwww_litle_comschema_CTD_ANON_34_forceCaptureAmount', _module_typeBindings.batchTotalAmountType)
    __forceCaptureAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2995, 12)
    __forceCaptureAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2995, 12)
    
    forceCaptureAmount = property(__forceCaptureAmount.value, __forceCaptureAmount.set, None, None)

    
    # Attribute numSales uses Python identifier numSales
    __numSales = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numSales'), 'numSales', '__httpwww_litle_comschema_CTD_ANON_34_numSales', pyxb.binding.datatypes.integer)
    __numSales._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2996, 12)
    __numSales._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2996, 12)
    
    numSales = property(__numSales.value, __numSales.set, None, None)

    
    # Attribute saleAmount uses Python identifier saleAmount
    __saleAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'saleAmount'), 'saleAmount', '__httpwww_litle_comschema_CTD_ANON_34_saleAmount', _module_typeBindings.batchTotalAmountType)
    __saleAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2997, 12)
    __saleAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2997, 12)
    
    saleAmount = property(__saleAmount.value, __saleAmount.set, None, None)

    
    # Attribute numCaptureGivenAuths uses Python identifier numCaptureGivenAuths
    __numCaptureGivenAuths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCaptureGivenAuths'), 'numCaptureGivenAuths', '__httpwww_litle_comschema_CTD_ANON_34_numCaptureGivenAuths', pyxb.binding.datatypes.integer)
    __numCaptureGivenAuths._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2998, 12)
    __numCaptureGivenAuths._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2998, 12)
    
    numCaptureGivenAuths = property(__numCaptureGivenAuths.value, __numCaptureGivenAuths.set, None, None)

    
    # Attribute captureGivenAuthAmount uses Python identifier captureGivenAuthAmount
    __captureGivenAuthAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'captureGivenAuthAmount'), 'captureGivenAuthAmount', '__httpwww_litle_comschema_CTD_ANON_34_captureGivenAuthAmount', _module_typeBindings.batchTotalAmountType)
    __captureGivenAuthAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2999, 12)
    __captureGivenAuthAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2999, 12)
    
    captureGivenAuthAmount = property(__captureGivenAuthAmount.value, __captureGivenAuthAmount.set, None, None)

    
    # Attribute numEcheckSales uses Python identifier numEcheckSales
    __numEcheckSales = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckSales'), 'numEcheckSales', '__httpwww_litle_comschema_CTD_ANON_34_numEcheckSales', pyxb.binding.datatypes.integer)
    __numEcheckSales._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3000, 12)
    __numEcheckSales._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3000, 12)
    
    numEcheckSales = property(__numEcheckSales.value, __numEcheckSales.set, None, None)

    
    # Attribute echeckSalesAmount uses Python identifier echeckSalesAmount
    __echeckSalesAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'echeckSalesAmount'), 'echeckSalesAmount', '__httpwww_litle_comschema_CTD_ANON_34_echeckSalesAmount', _module_typeBindings.batchTotalAmountType)
    __echeckSalesAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3001, 12)
    __echeckSalesAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3001, 12)
    
    echeckSalesAmount = property(__echeckSalesAmount.value, __echeckSalesAmount.set, None, None)

    
    # Attribute numEcheckCredit uses Python identifier numEcheckCredit
    __numEcheckCredit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckCredit'), 'numEcheckCredit', '__httpwww_litle_comschema_CTD_ANON_34_numEcheckCredit', pyxb.binding.datatypes.integer)
    __numEcheckCredit._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3002, 12)
    __numEcheckCredit._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3002, 12)
    
    numEcheckCredit = property(__numEcheckCredit.value, __numEcheckCredit.set, None, None)

    
    # Attribute echeckCreditAmount uses Python identifier echeckCreditAmount
    __echeckCreditAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'echeckCreditAmount'), 'echeckCreditAmount', '__httpwww_litle_comschema_CTD_ANON_34_echeckCreditAmount', _module_typeBindings.batchTotalAmountType)
    __echeckCreditAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3003, 12)
    __echeckCreditAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3003, 12)
    
    echeckCreditAmount = property(__echeckCreditAmount.value, __echeckCreditAmount.set, None, None)

    
    # Attribute numEcheckVerification uses Python identifier numEcheckVerification
    __numEcheckVerification = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckVerification'), 'numEcheckVerification', '__httpwww_litle_comschema_CTD_ANON_34_numEcheckVerification', pyxb.binding.datatypes.integer)
    __numEcheckVerification._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3004, 12)
    __numEcheckVerification._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3004, 12)
    
    numEcheckVerification = property(__numEcheckVerification.value, __numEcheckVerification.set, None, None)

    
    # Attribute echeckVerificationAmount uses Python identifier echeckVerificationAmount
    __echeckVerificationAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'echeckVerificationAmount'), 'echeckVerificationAmount', '__httpwww_litle_comschema_CTD_ANON_34_echeckVerificationAmount', _module_typeBindings.batchTotalAmountType)
    __echeckVerificationAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3005, 12)
    __echeckVerificationAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3005, 12)
    
    echeckVerificationAmount = property(__echeckVerificationAmount.value, __echeckVerificationAmount.set, None, None)

    
    # Attribute numEcheckRedeposit uses Python identifier numEcheckRedeposit
    __numEcheckRedeposit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numEcheckRedeposit'), 'numEcheckRedeposit', '__httpwww_litle_comschema_CTD_ANON_34_numEcheckRedeposit', pyxb.binding.datatypes.integer)
    __numEcheckRedeposit._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3006, 12)
    __numEcheckRedeposit._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3006, 12)
    
    numEcheckRedeposit = property(__numEcheckRedeposit.value, __numEcheckRedeposit.set, None, None)

    
    # Attribute numAccountUpdates uses Python identifier numAccountUpdates
    __numAccountUpdates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numAccountUpdates'), 'numAccountUpdates', '__httpwww_litle_comschema_CTD_ANON_34_numAccountUpdates', pyxb.binding.datatypes.integer)
    __numAccountUpdates._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3007, 12)
    __numAccountUpdates._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3007, 12)
    
    numAccountUpdates = property(__numAccountUpdates.value, __numAccountUpdates.set, None, None)

    
    # Attribute numTokenRegistrations uses Python identifier numTokenRegistrations
    __numTokenRegistrations = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numTokenRegistrations'), 'numTokenRegistrations', '__httpwww_litle_comschema_CTD_ANON_34_numTokenRegistrations', pyxb.binding.datatypes.integer)
    __numTokenRegistrations._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3008, 12)
    __numTokenRegistrations._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3008, 12)
    
    numTokenRegistrations = property(__numTokenRegistrations.value, __numTokenRegistrations.set, None, None)

    
    # Attribute numUpdateCardValidationNumOnTokens uses Python identifier numUpdateCardValidationNumOnTokens
    __numUpdateCardValidationNumOnTokens = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUpdateCardValidationNumOnTokens'), 'numUpdateCardValidationNumOnTokens', '__httpwww_litle_comschema_CTD_ANON_34_numUpdateCardValidationNumOnTokens', pyxb.binding.datatypes.integer)
    __numUpdateCardValidationNumOnTokens._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3009, 12)
    __numUpdateCardValidationNumOnTokens._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3009, 12)
    
    numUpdateCardValidationNumOnTokens = property(__numUpdateCardValidationNumOnTokens.value, __numUpdateCardValidationNumOnTokens.set, None, None)

    
    # Attribute numCancelSubscriptions uses Python identifier numCancelSubscriptions
    __numCancelSubscriptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCancelSubscriptions'), 'numCancelSubscriptions', '__httpwww_litle_comschema_CTD_ANON_34_numCancelSubscriptions', pyxb.binding.datatypes.integer)
    __numCancelSubscriptions._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3010, 12)
    __numCancelSubscriptions._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3010, 12)
    
    numCancelSubscriptions = property(__numCancelSubscriptions.value, __numCancelSubscriptions.set, None, None)

    
    # Attribute numUpdateSubscriptions uses Python identifier numUpdateSubscriptions
    __numUpdateSubscriptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUpdateSubscriptions'), 'numUpdateSubscriptions', '__httpwww_litle_comschema_CTD_ANON_34_numUpdateSubscriptions', pyxb.binding.datatypes.integer)
    __numUpdateSubscriptions._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3011, 12)
    __numUpdateSubscriptions._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3011, 12)
    
    numUpdateSubscriptions = property(__numUpdateSubscriptions.value, __numUpdateSubscriptions.set, None, None)

    
    # Attribute numCreatePlans uses Python identifier numCreatePlans
    __numCreatePlans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numCreatePlans'), 'numCreatePlans', '__httpwww_litle_comschema_CTD_ANON_34_numCreatePlans', pyxb.binding.datatypes.integer)
    __numCreatePlans._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3012, 12)
    __numCreatePlans._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3012, 12)
    
    numCreatePlans = property(__numCreatePlans.value, __numCreatePlans.set, None, None)

    
    # Attribute numUpdatePlans uses Python identifier numUpdatePlans
    __numUpdatePlans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUpdatePlans'), 'numUpdatePlans', '__httpwww_litle_comschema_CTD_ANON_34_numUpdatePlans', pyxb.binding.datatypes.integer)
    __numUpdatePlans._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3013, 12)
    __numUpdatePlans._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3013, 12)
    
    numUpdatePlans = property(__numUpdatePlans.value, __numUpdatePlans.set, None, None)

    
    # Attribute numActivates uses Python identifier numActivates
    __numActivates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numActivates'), 'numActivates', '__httpwww_litle_comschema_CTD_ANON_34_numActivates', pyxb.binding.datatypes.integer)
    __numActivates._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3014, 12)
    __numActivates._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3014, 12)
    
    numActivates = property(__numActivates.value, __numActivates.set, None, None)

    
    # Attribute numDeactivates uses Python identifier numDeactivates
    __numDeactivates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numDeactivates'), 'numDeactivates', '__httpwww_litle_comschema_CTD_ANON_34_numDeactivates', pyxb.binding.datatypes.integer)
    __numDeactivates._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3015, 12)
    __numDeactivates._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3015, 12)
    
    numDeactivates = property(__numDeactivates.value, __numDeactivates.set, None, None)

    
    # Attribute activateAmount uses Python identifier activateAmount
    __activateAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'activateAmount'), 'activateAmount', '__httpwww_litle_comschema_CTD_ANON_34_activateAmount', _module_typeBindings.batchTotalAmountType)
    __activateAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3016, 12)
    __activateAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3016, 12)
    
    activateAmount = property(__activateAmount.value, __activateAmount.set, None, None)

    
    # Attribute numLoads uses Python identifier numLoads
    __numLoads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numLoads'), 'numLoads', '__httpwww_litle_comschema_CTD_ANON_34_numLoads', pyxb.binding.datatypes.integer)
    __numLoads._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3017, 12)
    __numLoads._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3017, 12)
    
    numLoads = property(__numLoads.value, __numLoads.set, None, None)

    
    # Attribute loadAmount uses Python identifier loadAmount
    __loadAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'loadAmount'), 'loadAmount', '__httpwww_litle_comschema_CTD_ANON_34_loadAmount', _module_typeBindings.batchTotalAmountType)
    __loadAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3018, 12)
    __loadAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3018, 12)
    
    loadAmount = property(__loadAmount.value, __loadAmount.set, None, None)

    
    # Attribute numUnloads uses Python identifier numUnloads
    __numUnloads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numUnloads'), 'numUnloads', '__httpwww_litle_comschema_CTD_ANON_34_numUnloads', pyxb.binding.datatypes.integer)
    __numUnloads._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3019, 12)
    __numUnloads._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3019, 12)
    
    numUnloads = property(__numUnloads.value, __numUnloads.set, None, None)

    
    # Attribute unloadAmount uses Python identifier unloadAmount
    __unloadAmount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'unloadAmount'), 'unloadAmount', '__httpwww_litle_comschema_CTD_ANON_34_unloadAmount', _module_typeBindings.batchTotalAmountType)
    __unloadAmount._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3020, 12)
    __unloadAmount._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3020, 12)
    
    unloadAmount = property(__unloadAmount.value, __unloadAmount.set, None, None)

    
    # Attribute numBalanceInquirys uses Python identifier numBalanceInquirys
    __numBalanceInquirys = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'numBalanceInquirys'), 'numBalanceInquirys', '__httpwww_litle_comschema_CTD_ANON_34_numBalanceInquirys', pyxb.binding.datatypes.integer)
    __numBalanceInquirys._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3021, 12)
    __numBalanceInquirys._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3021, 12)
    
    numBalanceInquirys = property(__numBalanceInquirys.value, __numBalanceInquirys.set, None, None)

    
    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_34_merchantId', _module_typeBindings.merchantIdentificationType, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3023, 12)
    __merchantId._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3023, 12)
    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    _ElementMap.update({
        __recurringTransaction.name() : __recurringTransaction,
        __transaction.name() : __transaction
    })
    _AttributeMap.update({
        __merchantSdk.name() : __merchantSdk,
        __id.name() : __id,
        __numAuths.name() : __numAuths,
        __authAmount.name() : __authAmount,
        __numAuthReversals.name() : __numAuthReversals,
        __authReversalAmount.name() : __authReversalAmount,
        __numCaptures.name() : __numCaptures,
        __captureAmount.name() : __captureAmount,
        __numExtCaptures.name() : __numExtCaptures,
        __extCaptureAmount.name() : __extCaptureAmount,
        __numCredits.name() : __numCredits,
        __creditAmount.name() : __creditAmount,
        __numForceCaptures.name() : __numForceCaptures,
        __forceCaptureAmount.name() : __forceCaptureAmount,
        __numSales.name() : __numSales,
        __saleAmount.name() : __saleAmount,
        __numCaptureGivenAuths.name() : __numCaptureGivenAuths,
        __captureGivenAuthAmount.name() : __captureGivenAuthAmount,
        __numEcheckSales.name() : __numEcheckSales,
        __echeckSalesAmount.name() : __echeckSalesAmount,
        __numEcheckCredit.name() : __numEcheckCredit,
        __echeckCreditAmount.name() : __echeckCreditAmount,
        __numEcheckVerification.name() : __numEcheckVerification,
        __echeckVerificationAmount.name() : __echeckVerificationAmount,
        __numEcheckRedeposit.name() : __numEcheckRedeposit,
        __numAccountUpdates.name() : __numAccountUpdates,
        __numTokenRegistrations.name() : __numTokenRegistrations,
        __numUpdateCardValidationNumOnTokens.name() : __numUpdateCardValidationNumOnTokens,
        __numCancelSubscriptions.name() : __numCancelSubscriptions,
        __numUpdateSubscriptions.name() : __numUpdateSubscriptions,
        __numCreatePlans.name() : __numCreatePlans,
        __numUpdatePlans.name() : __numUpdatePlans,
        __numActivates.name() : __numActivates,
        __numDeactivates.name() : __numDeactivates,
        __activateAmount.name() : __activateAmount,
        __numLoads.name() : __numLoads,
        __loadAmount.name() : __loadAmount,
        __numUnloads.name() : __numUnloads,
        __unloadAmount.name() : __unloadAmount,
        __numBalanceInquirys.name() : __numBalanceInquirys,
        __merchantId.name() : __merchantId
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3100, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}RFRResponse uses Python identifier RFRResponse
    __RFRResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse'), 'RFRResponse', '__httpwww_litle_comschema_CTD_ANON_35_httpwww_litle_comschemaRFRResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3114, 4), )

    
    RFRResponse = property(__RFRResponse.value, __RFRResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}batchResponse uses Python identifier batchResponse
    __batchResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'batchResponse'), 'batchResponse', '__httpwww_litle_comschema_CTD_ANON_35_httpwww_litle_comschemabatchResponse', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3120, 4), )

    
    batchResponse = property(__batchResponse.value, __batchResponse.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_litle_comschema_CTD_ANON_35_version', _module_typeBindings.versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3107, 12)
    __version._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3107, 12)
    
    version = property(__version.value, __version.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_35_id', _module_typeBindings.string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3108, 12)
    __id._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3108, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_35_response', _module_typeBindings.responseType, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3109, 12)
    __response._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3109, 12)
    
    response = property(__response.value, __response.set, None, None)

    
    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_35_message', _module_typeBindings.messageType, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3110, 12)
    __message._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3110, 12)
    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute litleSessionId uses Python identifier litleSessionId
    __litleSessionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'litleSessionId'), 'litleSessionId', '__httpwww_litle_comschema_CTD_ANON_35_litleSessionId', _module_typeBindings.litleIdType, required=True)
    __litleSessionId._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3111, 12)
    __litleSessionId._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3111, 12)
    
    litleSessionId = property(__litleSessionId.value, __litleSessionId.set, None, None)

    _ElementMap.update({
        __RFRResponse.name() : __RFRResponse,
        __batchResponse.name() : __batchResponse
    })
    _AttributeMap.update({
        __version.name() : __version,
        __id.name() : __id,
        __response.name() : __response,
        __message.name() : __message,
        __litleSessionId.name() : __litleSessionId
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3115, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_36_response', _module_typeBindings.responseType, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3116, 12)
    __response._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3116, 12)
    
    response = property(__response.value, __response.set, None, None)

    
    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_36_message', _module_typeBindings.messageType, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3117, 12)
    __message._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3117, 12)
    
    message = property(__message.value, __message.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __response.name() : __response,
        __message.name() : __message
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3121, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}recurringTransactionResponse uses Python identifier recurringTransactionResponse
    __recurringTransactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), 'recurringTransactionResponse', '__httpwww_litle_comschema_CTD_ANON_37_httpwww_litle_comschemarecurringTransactionResponse', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 718, 4), )

    
    recurringTransactionResponse = property(__recurringTransactionResponse.value, __recurringTransactionResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), 'transactionResponse', '__httpwww_litle_comschema_CTD_ANON_37_httpwww_litle_comschematransactionResponse', True, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1754, 4), )

    
    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_litle_comschema_CTD_ANON_37_id', _module_typeBindings.string25Type)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3126, 12)
    __id._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3126, 12)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute litleBatchId uses Python identifier litleBatchId
    __litleBatchId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'litleBatchId'), 'litleBatchId', '__httpwww_litle_comschema_CTD_ANON_37_litleBatchId', _module_typeBindings.litleIdType, required=True)
    __litleBatchId._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3127, 12)
    __litleBatchId._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3127, 12)
    
    litleBatchId = property(__litleBatchId.value, __litleBatchId.set, None, None)

    
    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_37_merchantId', _module_typeBindings.merchantIdentificationType, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3128, 12)
    __merchantId._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3128, 12)
    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    _ElementMap.update({
        __recurringTransactionResponse.name() : __recurringTransactionResponse,
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        __id.name() : __id,
        __litleBatchId.name() : __litleBatchId,
        __merchantId.name() : __merchantId
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type {http://www.litle.com/schema}cardTokenTypeAU with content type ELEMENT_ONLY
class cardTokenTypeAU (cardTokenType):
    """Complex type {http://www.litle.com/schema}cardTokenTypeAU with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cardTokenTypeAU')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3152, 4)
    _ElementMap = cardTokenType._ElementMap.copy()
    _AttributeMap = cardTokenType._AttributeMap.copy()
    # Base type is cardTokenType
    
    # Element litleToken ({http://www.litle.com/schema}litleToken) inherited from {http://www.litle.com/schema}cardTokenType
    
    # Element expDate ({http://www.litle.com/schema}expDate) inherited from {http://www.litle.com/schema}cardTokenType
    
    # Element cardValidationNum ({http://www.litle.com/schema}cardValidationNum) inherited from {http://www.litle.com/schema}cardTokenType
    
    # Element type ({http://www.litle.com/schema}type) inherited from {http://www.litle.com/schema}cardTokenType
    
    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_litle_comschema_cardTokenTypeAU_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3156, 20), )

    
    bin = property(__bin.value, __bin.set, None, None)

    _ElementMap.update({
        __bin.name() : __bin
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cardTokenTypeAU = cardTokenTypeAU
Namespace.addCategoryObject('typeBinding', 'cardTokenTypeAU', cardTokenTypeAU)


# Complex type {http://www.litle.com/schema}baseRequest with content type ELEMENT_ONLY
class baseRequest (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.litle.com/schema}baseRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'baseRequest')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3182, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}authentication uses Python identifier authentication
    __authentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authentication'), 'authentication', '__httpwww_litle_comschema_baseRequest_httpwww_litle_comschemaauthentication', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 5, 4), )

    
    authentication = property(__authentication.value, __authentication.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringTransaction uses Python identifier recurringTransaction
    __recurringTransaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), 'recurringTransaction', '__httpwww_litle_comschema_baseRequest_httpwww_litle_comschemarecurringTransaction', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 717, 4), )

    
    recurringTransaction = property(__recurringTransaction.value, __recurringTransaction.set, None, None)

    
    # Element {http://www.litle.com/schema}transaction uses Python identifier transaction
    __transaction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transaction'), 'transaction', '__httpwww_litle_comschema_baseRequest_httpwww_litle_comschematransaction', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 963, 4), )

    
    transaction = property(__transaction.value, __transaction.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_litle_comschema_baseRequest_version', _module_typeBindings.versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3190, 8)
    __version._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3190, 8)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __authentication.name() : __authentication,
        __recurringTransaction.name() : __recurringTransaction,
        __transaction.name() : __transaction
    })
    _AttributeMap.update({
        __version.name() : __version
    })
_module_typeBindings.baseRequest = baseRequest
Namespace.addCategoryObject('typeBinding', 'baseRequest', baseRequest)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3206, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.litle.com/schema}recurringTransactionResponse uses Python identifier recurringTransactionResponse
    __recurringTransactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), 'recurringTransactionResponse', '__httpwww_litle_comschema_CTD_ANON_38_httpwww_litle_comschemarecurringTransactionResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 718, 4), )

    
    recurringTransactionResponse = property(__recurringTransactionResponse.value, __recurringTransactionResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}transactionResponse uses Python identifier transactionResponse
    __transactionResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), 'transactionResponse', '__httpwww_litle_comschema_CTD_ANON_38_httpwww_litle_comschematransactionResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1754, 4), )

    
    transactionResponse = property(__transactionResponse.value, __transactionResponse.set, None, None)

    
    # Attribute response uses Python identifier response
    __response = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_38_response', _module_typeBindings.responseType, required=True)
    __response._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3211, 12)
    __response._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3211, 12)
    
    response = property(__response.value, __response.set, None, None)

    
    # Attribute message uses Python identifier message
    __message = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_38_message', _module_typeBindings.messageType, required=True)
    __message._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3212, 12)
    __message._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3212, 12)
    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_litle_comschema_CTD_ANON_38_version', _module_typeBindings.versionType, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3213, 12)
    __version._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3213, 12)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __recurringTransactionResponse.name() : __recurringTransactionResponse,
        __transactionResponse.name() : __transactionResponse
    })
    _AttributeMap.update({
        __response.name() : __response,
        __message.name() : __message,
        __version.name() : __version
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type {http://www.litle.com/schema}transactionTypeWithReportGroup with content type EMPTY
class transactionTypeWithReportGroup (transactionType):
    """Complex type {http://www.litle.com/schema}transactionTypeWithReportGroup with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionTypeWithReportGroup')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 970, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType
    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reportGroup'), 'reportGroup', '__httpwww_litle_comschema_transactionTypeWithReportGroup_reportGroup', _module_typeBindings.reportGroupType, required=True)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 973, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 973, 16)
    
    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup
    })
_module_typeBindings.transactionTypeWithReportGroup = transactionTypeWithReportGroup
Namespace.addCategoryObject('typeBinding', 'transactionTypeWithReportGroup', transactionTypeWithReportGroup)


# Complex type {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial with content type EMPTY
class transactionTypeWithReportGroupAndPartial (transactionType):
    """Complex type {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionTypeWithReportGroupAndPartial')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 986, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType
    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reportGroup'), 'reportGroup', '__httpwww_litle_comschema_transactionTypeWithReportGroupAndPartial_reportGroup', _module_typeBindings.reportGroupType, required=True)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 989, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 989, 16)
    
    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    
    # Attribute partial uses Python identifier partial
    __partial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'partial'), 'partial', '__httpwww_litle_comschema_transactionTypeWithReportGroupAndPartial_partial', pyxb.binding.datatypes.boolean)
    __partial._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 990, 16)
    __partial._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 990, 16)
    
    partial = property(__partial.value, __partial.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup,
        __partial.name() : __partial
    })
_module_typeBindings.transactionTypeWithReportGroupAndPartial = transactionTypeWithReportGroupAndPartial
Namespace.addCategoryObject('typeBinding', 'transactionTypeWithReportGroupAndPartial', transactionTypeWithReportGroupAndPartial)


# Complex type {http://www.litle.com/schema}transactionTypeOptionReportGroup with content type EMPTY
class transactionTypeOptionReportGroup (transactionType):
    """Complex type {http://www.litle.com/schema}transactionTypeOptionReportGroup with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transactionTypeOptionReportGroup')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 995, 4)
    _ElementMap = transactionType._ElementMap.copy()
    _AttributeMap = transactionType._AttributeMap.copy()
    # Base type is transactionType
    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup uses Python identifier reportGroup
    __reportGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reportGroup'), 'reportGroup', '__httpwww_litle_comschema_transactionTypeOptionReportGroup_reportGroup', _module_typeBindings.reportGroupType)
    __reportGroup._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 998, 16)
    __reportGroup._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 998, 16)
    
    reportGroup = property(__reportGroup.value, __reportGroup.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reportGroup.name() : __reportGroup
    })
_module_typeBindings.transactionTypeOptionReportGroup = transactionTypeOptionReportGroup
Namespace.addCategoryObject('typeBinding', 'transactionTypeOptionReportGroup', transactionTypeOptionReportGroup)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (baseRequest):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3194, 8)
    _ElementMap = baseRequest._ElementMap.copy()
    _AttributeMap = baseRequest._AttributeMap.copy()
    # Base type is baseRequest
    
    # Element authentication ({http://www.litle.com/schema}authentication) inherited from {http://www.litle.com/schema}baseRequest
    
    # Element recurringTransaction ({http://www.litle.com/schema}recurringTransaction) inherited from {http://www.litle.com/schema}baseRequest
    
    # Element transaction ({http://www.litle.com/schema}transaction) inherited from {http://www.litle.com/schema}baseRequest
    
    # Attribute version inherited from {http://www.litle.com/schema}baseRequest
    
    # Attribute merchantId uses Python identifier merchantId
    __merchantId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantId'), 'merchantId', '__httpwww_litle_comschema_CTD_ANON_39_merchantId', _module_typeBindings.merchantIdentificationType, required=True)
    __merchantId._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3197, 20)
    __merchantId._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3197, 20)
    
    merchantId = property(__merchantId.value, __merchantId.set, None, None)

    
    # Attribute merchantSdk uses Python identifier merchantSdk
    __merchantSdk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'merchantSdk'), 'merchantSdk', '__httpwww_litle_comschema_CTD_ANON_39_merchantSdk', pyxb.binding.datatypes.string)
    __merchantSdk._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3198, 20)
    __merchantSdk._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3198, 20)
    
    merchantSdk = property(__merchantSdk.value, __merchantSdk.set, None, None)

    
    # Attribute loggedInUser uses Python identifier loggedInUser
    __loggedInUser = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'loggedInUser'), 'loggedInUser', '__httpwww_litle_comschema_CTD_ANON_39_loggedInUser', pyxb.binding.datatypes.string)
    __loggedInUser._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3199, 20)
    __loggedInUser._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3199, 20)
    
    loggedInUser = property(__loggedInUser.value, __loggedInUser.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __merchantId.name() : __merchantId,
        __merchantSdk.name() : __merchantSdk,
        __loggedInUser.name() : __loggedInUser
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1152, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}customerInfo uses Python identifier customerInfo
    __customerInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), 'customerInfo', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemacustomerInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1011, 4), )

    
    customerInfo = property(__customerInfo.value, __customerInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4), )

    
    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1157, 28), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1160, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1161, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1162, 28), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1163, 28), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1164, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemampos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1169, 32), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1170, 32), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypal'), 'paypal', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemapaypal', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1171, 32), )

    
    paypal = property(__paypal.value, __paypal.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1172, 32), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1173, 32), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.litle.com/schema}applepay uses Python identifier applepay
    __applepay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepay'), 'applepay', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaapplepay', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1174, 32), )

    
    applepay = property(__applepay.value, __applepay.set, None, None)

    
    # Element {http://www.litle.com/schema}cardholderAuthentication uses Python identifier cardholderAuthentication
    __cardholderAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), 'cardholderAuthentication', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemacardholderAuthentication', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1177, 28), )

    
    cardholderAuthentication = property(__cardholderAuthentication.value, __cardholderAuthentication.set, None, None)

    
    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1181, 28), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.litle.com/schema}allowPartialAuth uses Python identifier allowPartialAuth
    __allowPartialAuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), 'allowPartialAuth', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaallowPartialAuth', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1184, 28), )

    
    allowPartialAuth = property(__allowPartialAuth.value, __allowPartialAuth.set, None, None)

    
    # Element {http://www.litle.com/schema}filtering uses Python identifier filtering
    __filtering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'filtering'), 'filtering', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemafiltering', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1186, 28), )

    
    filtering = property(__filtering.value, __filtering.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1187, 28), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.litle.com/schema}recyclingRequest uses Python identifier recyclingRequest
    __recyclingRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), 'recyclingRequest', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemarecyclingRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1188, 28), )

    
    recyclingRequest = property(__recyclingRequest.value, __recyclingRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudFilterOverride uses Python identifier fraudFilterOverride
    __fraudFilterOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), 'fraudFilterOverride', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemafraudFilterOverride', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1189, 28), )

    
    fraudFilterOverride = property(__fraudFilterOverride.value, __fraudFilterOverride.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringRequest uses Python identifier recurringRequest
    __recurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), 'recurringRequest', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemarecurringRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1190, 28), )

    
    recurringRequest = property(__recurringRequest.value, __recurringRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1191, 28), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.litle.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1192, 28), )

    
    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)

    
    # Element {http://www.litle.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaprocessingType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1194, 28), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.litle.com/schema}originalNetworkTransactionId uses Python identifier originalNetworkTransactionId
    __originalNetworkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), 'originalNetworkTransactionId', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaoriginalNetworkTransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1195, 28), )

    
    originalNetworkTransactionId = property(__originalNetworkTransactionId.value, __originalNetworkTransactionId.set, None, None)

    
    # Element {http://www.litle.com/schema}originalTransactionAmount uses Python identifier originalTransactionAmount
    __originalTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), 'originalTransactionAmount', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaoriginalTransactionAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1196, 28), )

    
    originalTransactionAmount = property(__originalTransactionAmount.value, __originalTransactionAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}healthcareIIAS uses Python identifier healthcareIIAS
    __healthcareIIAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), 'healthcareIIAS', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemahealthcareIIAS', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1527, 4), )

    
    healthcareIIAS = property(__healthcareIIAS.value, __healthcareIIAS.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4), )

    
    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.litle.com/schema}wallet uses Python identifier wallet
    __wallet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wallet'), 'wallet', '__httpwww_litle_comschema_CTD_ANON_40_httpwww_litle_comschemawallet', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2857, 4), )

    
    wallet = property(__wallet.value, __wallet.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customerInfo.name() : __customerInfo,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __paypal.name() : __paypal,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __applepay.name() : __applepay,
        __cardholderAuthentication.name() : __cardholderAuthentication,
        __taxType.name() : __taxType,
        __allowPartialAuth.name() : __allowPartialAuth,
        __filtering.name() : __filtering,
        __merchantData.name() : __merchantData,
        __recyclingRequest.name() : __recyclingRequest,
        __fraudFilterOverride.name() : __fraudFilterOverride,
        __recurringRequest.name() : __recurringRequest,
        __debtRepayment.name() : __debtRepayment,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __processingType.name() : __processingType,
        __originalNetworkTransactionId.name() : __originalNetworkTransactionId,
        __originalTransactionAmount.name() : __originalTransactionAmount,
        __shipToAddress.name() : __shipToAddress,
        __healthcareIIAS.name() : __healthcareIIAS,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __wallet.name() : __wallet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1206, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1210, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1211, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1212, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1213, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.litle.com/schema}actionReason uses Python identifier actionReason
    __actionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), 'actionReason', '__httpwww_litle_comschema_CTD_ANON_41_httpwww_litle_comschemaactionReason', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1214, 24), )

    
    actionReason = property(__actionReason.value, __actionReason.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __payPalNotes.name() : __payPalNotes,
        __actionReason.name() : __actionReason
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (transactionTypeWithReportGroupAndPartial):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1222, 8)
    _ElementMap = transactionTypeWithReportGroupAndPartial._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroupAndPartial._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroupAndPartial
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1226, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1227, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1228, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}payPalOrderComplete uses Python identifier payPalOrderComplete
    __payPalOrderComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), 'payPalOrderComplete', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemapayPalOrderComplete', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1231, 24), )

    
    payPalOrderComplete = property(__payPalOrderComplete.value, __payPalOrderComplete.set, None, None)

    
    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1232, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_42_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial
    
    # Attribute partial inherited from {http://www.litle.com/schema}transactionTypeWithReportGroupAndPartial
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __payPalOrderComplete.name() : __payPalOrderComplete,
        __payPalNotes.name() : __payPalNotes,
        __enhancedData.name() : __enhancedData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1241, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1245, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1246, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1247, 24), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1248, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1249, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemampos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1252, 32), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1253, 32), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1254, 32), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1255, 32), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1258, 24), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1263, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1264, 24), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.litle.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaprocessingType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1265, 24), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4), )

    
    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_43_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __debtRepayment.name() : __debtRepayment,
        __processingType.name() : __processingType,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1273, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4), )

    
    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1277, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1279, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1280, 24), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1281, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1282, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemampos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1286, 32), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1287, 32), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1288, 32), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1289, 32), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1292, 24), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1298, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1299, 24), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.litle.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaprocessingType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1300, 24), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.litle.com/schema}originalNetworkTransactionId uses Python identifier originalNetworkTransactionId
    __originalNetworkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), 'originalNetworkTransactionId', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaoriginalNetworkTransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1301, 24), )

    
    originalNetworkTransactionId = property(__originalNetworkTransactionId.value, __originalNetworkTransactionId.set, None, None)

    
    # Element {http://www.litle.com/schema}originalTransactionAmount uses Python identifier originalTransactionAmount
    __originalTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), 'originalTransactionAmount', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaoriginalTransactionAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1302, 24), )

    
    originalTransactionAmount = property(__originalTransactionAmount.value, __originalTransactionAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}authInformation uses Python identifier authInformation
    __authInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authInformation'), 'authInformation', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaauthInformation', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1502, 4), )

    
    authInformation = property(__authInformation.value, __authInformation.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4), )

    
    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_44_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __debtRepayment.name() : __debtRepayment,
        __processingType.name() : __processingType,
        __originalNetworkTransactionId.name() : __originalNetworkTransactionId,
        __originalTransactionAmount.name() : __originalTransactionAmount,
        __shipToAddress.name() : __shipToAddress,
        __authInformation.name() : __authInformation,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1310, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}customerInfo uses Python identifier customerInfo
    __customerInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), 'customerInfo', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemacustomerInfo', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1011, 4), )

    
    customerInfo = property(__customerInfo.value, __customerInfo.set, None, None)

    
    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4), )

    
    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1315, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1316, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1317, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1318, 24), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1319, 24), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1320, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemampos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1325, 28), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1326, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypal'), 'paypal', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemapaypal', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1327, 28), )

    
    paypal = property(__paypal.value, __paypal.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1328, 28), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1329, 28), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.litle.com/schema}applepay uses Python identifier applepay
    __applepay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepay'), 'applepay', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaapplepay', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1330, 28), )

    
    applepay = property(__applepay.value, __applepay.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudCheck uses Python identifier fraudCheck
    __fraudCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck'), 'fraudCheck', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemafraudCheck', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1336, 28), )

    
    fraudCheck = property(__fraudCheck.value, __fraudCheck.set, None, None)

    
    # Element {http://www.litle.com/schema}cardholderAuthentication uses Python identifier cardholderAuthentication
    __cardholderAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), 'cardholderAuthentication', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemacardholderAuthentication', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1337, 28), )

    
    cardholderAuthentication = property(__cardholderAuthentication.value, __cardholderAuthentication.set, None, None)

    
    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1340, 24), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.litle.com/schema}payPalOrderComplete uses Python identifier payPalOrderComplete
    __payPalOrderComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), 'payPalOrderComplete', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemapayPalOrderComplete', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1344, 24), )

    
    payPalOrderComplete = property(__payPalOrderComplete.value, __payPalOrderComplete.set, None, None)

    
    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1345, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.litle.com/schema}allowPartialAuth uses Python identifier allowPartialAuth
    __allowPartialAuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), 'allowPartialAuth', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaallowPartialAuth', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1347, 24), )

    
    allowPartialAuth = property(__allowPartialAuth.value, __allowPartialAuth.set, None, None)

    
    # Element {http://www.litle.com/schema}filtering uses Python identifier filtering
    __filtering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'filtering'), 'filtering', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemafiltering', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1349, 24), )

    
    filtering = property(__filtering.value, __filtering.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1350, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.litle.com/schema}recyclingRequest uses Python identifier recyclingRequest
    __recyclingRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), 'recyclingRequest', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemarecyclingRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1351, 24), )

    
    recyclingRequest = property(__recyclingRequest.value, __recyclingRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudFilterOverride uses Python identifier fraudFilterOverride
    __fraudFilterOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), 'fraudFilterOverride', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemafraudFilterOverride', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1352, 24), )

    
    fraudFilterOverride = property(__fraudFilterOverride.value, __fraudFilterOverride.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringRequest uses Python identifier recurringRequest
    __recurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), 'recurringRequest', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemarecurringRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1353, 24), )

    
    recurringRequest = property(__recurringRequest.value, __recurringRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}litleInternalRecurringRequest uses Python identifier litleInternalRecurringRequest
    __litleInternalRecurringRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleInternalRecurringRequest'), 'litleInternalRecurringRequest', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemalitleInternalRecurringRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1354, 24), )

    
    litleInternalRecurringRequest = property(__litleInternalRecurringRequest.value, __litleInternalRecurringRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}debtRepayment uses Python identifier debtRepayment
    __debtRepayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), 'debtRepayment', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemadebtRepayment', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1355, 24), )

    
    debtRepayment = property(__debtRepayment.value, __debtRepayment.set, None, None)

    
    # Element {http://www.litle.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1356, 24), )

    
    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)

    
    # Element {http://www.litle.com/schema}processingType uses Python identifier processingType
    __processingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingType'), 'processingType', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaprocessingType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1358, 24), )

    
    processingType = property(__processingType.value, __processingType.set, None, None)

    
    # Element {http://www.litle.com/schema}originalNetworkTransactionId uses Python identifier originalNetworkTransactionId
    __originalNetworkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), 'originalNetworkTransactionId', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaoriginalNetworkTransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1359, 24), )

    
    originalNetworkTransactionId = property(__originalNetworkTransactionId.value, __originalNetworkTransactionId.set, None, None)

    
    # Element {http://www.litle.com/schema}originalTransactionAmount uses Python identifier originalTransactionAmount
    __originalTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), 'originalTransactionAmount', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaoriginalTransactionAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1360, 24), )

    
    originalTransactionAmount = property(__originalTransactionAmount.value, __originalTransactionAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}healthcareIIAS uses Python identifier healthcareIIAS
    __healthcareIIAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), 'healthcareIIAS', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemahealthcareIIAS', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1527, 4), )

    
    healthcareIIAS = property(__healthcareIIAS.value, __healthcareIIAS.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4), )

    
    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.litle.com/schema}wallet uses Python identifier wallet
    __wallet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wallet'), 'wallet', '__httpwww_litle_comschema_CTD_ANON_45_httpwww_litle_comschemawallet', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2857, 4), )

    
    wallet = property(__wallet.value, __wallet.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customerInfo.name() : __customerInfo,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __secondaryAmount.name() : __secondaryAmount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __paypal.name() : __paypal,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __applepay.name() : __applepay,
        __fraudCheck.name() : __fraudCheck,
        __cardholderAuthentication.name() : __cardholderAuthentication,
        __taxType.name() : __taxType,
        __payPalOrderComplete.name() : __payPalOrderComplete,
        __payPalNotes.name() : __payPalNotes,
        __allowPartialAuth.name() : __allowPartialAuth,
        __filtering.name() : __filtering,
        __merchantData.name() : __merchantData,
        __recyclingRequest.name() : __recyclingRequest,
        __fraudFilterOverride.name() : __fraudFilterOverride,
        __recurringRequest.name() : __recurringRequest,
        __litleInternalRecurringRequest.name() : __litleInternalRecurringRequest,
        __debtRepayment.name() : __debtRepayment,
        __advancedFraudChecks.name() : __advancedFraudChecks,
        __processingType.name() : __processingType,
        __originalNetworkTransactionId.name() : __originalNetworkTransactionId,
        __originalTransactionAmount.name() : __originalTransactionAmount,
        __shipToAddress.name() : __shipToAddress,
        __healthcareIIAS.name() : __healthcareIIAS,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos,
        __wallet.name() : __wallet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1369, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}billMeLaterRequest uses Python identifier billMeLaterRequest
    __billMeLaterRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), 'billMeLaterRequest', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemabillMeLaterRequest', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4), )

    
    billMeLaterRequest = property(__billMeLaterRequest.value, __billMeLaterRequest.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1375, 32), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1376, 32), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}surchargeAmount uses Python identifier surchargeAmount
    __surchargeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), 'surchargeAmount', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemasurchargeAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1377, 32), )

    
    surchargeAmount = property(__surchargeAmount.value, __surchargeAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1384, 32), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1386, 32), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1388, 32), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemampos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1391, 36), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1392, 36), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}token uses Python identifier token
    __token = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'token'), 'token', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschematoken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1393, 36), )

    
    token = property(__token.value, __token.set, None, None)

    
    # Element {http://www.litle.com/schema}paypage uses Python identifier paypage
    __paypage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypage'), 'paypage', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemapaypage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1394, 36), )

    
    paypage = property(__paypage.value, __paypage.set, None, None)

    
    # Element {http://www.litle.com/schema}paypal uses Python identifier paypal
    __paypal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypal'), 'paypal', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemapaypal', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1395, 36), )

    
    paypal = property(__paypal.value, __paypal.set, None, None)

    
    # Element {http://www.litle.com/schema}taxType uses Python identifier taxType
    __taxType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxType'), 'taxType', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemataxType', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1421, 32), )

    
    taxType = property(__taxType.value, __taxType.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1427, 32), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Element {http://www.litle.com/schema}payPalNotes uses Python identifier payPalNotes
    __payPalNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), 'payPalNotes', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemapayPalNotes', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1430, 24), )

    
    payPalNotes = property(__payPalNotes.value, __payPalNotes.set, None, None)

    
    # Element {http://www.litle.com/schema}actionReason uses Python identifier actionReason
    __actionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), 'actionReason', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaactionReason', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1431, 24), )

    
    actionReason = property(__actionReason.value, __actionReason.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedData uses Python identifier enhancedData
    __enhancedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), 'enhancedData', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaenhancedData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4), )

    
    enhancedData = property(__enhancedData.value, __enhancedData.set, None, None)

    
    # Element {http://www.litle.com/schema}amexAggregatorData uses Python identifier amexAggregatorData
    __amexAggregatorData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), 'amexAggregatorData', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaamexAggregatorData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4), )

    
    amexAggregatorData = property(__amexAggregatorData.value, __amexAggregatorData.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.litle.com/schema}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pos'), 'pos', '__httpwww_litle_comschema_CTD_ANON_46_httpwww_litle_comschemapos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4), )

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __billMeLaterRequest.name() : __billMeLaterRequest,
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __surchargeAmount.name() : __surchargeAmount,
        __orderId.name() : __orderId,
        __secondaryAmount.name() : __secondaryAmount,
        __orderSource.name() : __orderSource,
        __mpos.name() : __mpos,
        __card.name() : __card,
        __token.name() : __token,
        __paypage.name() : __paypage,
        __paypal.name() : __paypal,
        __taxType.name() : __taxType,
        __merchantData.name() : __merchantData,
        __payPalNotes.name() : __payPalNotes,
        __actionReason.name() : __actionReason,
        __enhancedData.name() : __enhancedData,
        __amexAggregatorData.name() : __amexAggregatorData,
        __customBilling.name() : __customBilling,
        __processingInstructions.name() : __processingInstructions,
        __pos.name() : __pos
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1439, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1443, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1444, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1445, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1447, 37), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Element {http://www.litle.com/schema}virtualGiftCard uses Python identifier virtualGiftCard
    __virtualGiftCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCard'), 'virtualGiftCard', '__httpwww_litle_comschema_CTD_ANON_47_httpwww_litle_comschemavirtualGiftCard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1448, 37), )

    
    virtualGiftCard = property(__virtualGiftCard.value, __virtualGiftCard.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card,
        __virtualGiftCard.name() : __virtualGiftCard
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1457, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_48_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1461, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_48_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1462, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_48_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1463, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1471, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1475, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1476, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1477, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_49_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1478, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1486, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1490, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1491, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1492, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_50_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1493, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1514, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1518, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1519, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}card uses Python identifier card
    __card = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'card'), 'card', '__httpwww_litle_comschema_CTD_ANON_51_httpwww_litle_comschemacard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1520, 28), )

    
    card = property(__card.value, __card.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __orderSource.name() : __orderSource,
        __card.name() : __card
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type {http://www.litle.com/schema}registerTokenRequestType with content type ELEMENT_ONLY
class registerTokenRequestType (transactionTypeWithReportGroup):
    """Complex type {http://www.litle.com/schema}registerTokenRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'registerTokenRequestType')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1714, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1718, 20), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}mpos uses Python identifier mpos
    __mpos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mpos'), 'mpos', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemampos', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1720, 24), )

    
    mpos = property(__mpos.value, __mpos.set, None, None)

    
    # Element {http://www.litle.com/schema}accountNumber uses Python identifier accountNumber
    __accountNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), 'accountNumber', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaaccountNumber', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1721, 24), )

    
    accountNumber = property(__accountNumber.value, __accountNumber.set, None, None)

    
    # Element {http://www.litle.com/schema}echeckForToken uses Python identifier echeckForToken
    __echeckForToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckForToken'), 'echeckForToken', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaecheckForToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1722, 24), )

    
    echeckForToken = property(__echeckForToken.value, __echeckForToken.set, None, None)

    
    # Element {http://www.litle.com/schema}paypageRegistrationId uses Python identifier paypageRegistrationId
    __paypageRegistrationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), 'paypageRegistrationId', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemapaypageRegistrationId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1723, 24), )

    
    paypageRegistrationId = property(__paypageRegistrationId.value, __paypageRegistrationId.set, None, None)

    
    # Element {http://www.litle.com/schema}applepay uses Python identifier applepay
    __applepay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepay'), 'applepay', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemaapplepay', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1724, 24), )

    
    applepay = property(__applepay.value, __applepay.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_registerTokenRequestType_httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1726, 20), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __mpos.name() : __mpos,
        __accountNumber.name() : __accountNumber,
        __echeckForToken.name() : __echeckForToken,
        __paypageRegistrationId.name() : __paypageRegistrationId,
        __applepay.name() : __applepay,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.registerTokenRequestType = registerTokenRequestType
Namespace.addCategoryObject('typeBinding', 'registerTokenRequestType', registerTokenRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1733, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1737, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1738, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1739, 24), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}bin uses Python identifier bin
    __bin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bin'), 'bin', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemabin', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1740, 24), )

    
    bin = property(__bin.value, __bin.set, None, None)

    
    # Element {http://www.litle.com/schema}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschematype', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1741, 24), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.litle.com/schema}eCheckAccountSuffix uses Python identifier eCheckAccountSuffix
    __eCheckAccountSuffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), 'eCheckAccountSuffix', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemaeCheckAccountSuffix', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1742, 24), )

    
    eCheckAccountSuffix = property(__eCheckAccountSuffix.value, __eCheckAccountSuffix.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1743, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1744, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1745, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}applepayResponse uses Python identifier applepayResponse
    __applepayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), 'applepayResponse', '__httpwww_litle_comschema_CTD_ANON_52_httpwww_litle_comschemaapplepayResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4), )

    
    applepayResponse = property(__applepayResponse.value, __applepayResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __litleToken.name() : __litleToken,
        __bin.name() : __bin,
        __type.name() : __type,
        __eCheckAccountSuffix.name() : __eCheckAccountSuffix,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime,
        __applepayResponse.name() : __applepayResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1757, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billMeLaterResponseData uses Python identifier billMeLaterResponseData
    __billMeLaterResponseData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData'), 'billMeLaterResponseData', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemabillMeLaterResponseData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1118, 4), )

    
    billMeLaterResponseData = property(__billMeLaterResponseData.value, __billMeLaterResponseData.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1761, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1762, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1763, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1764, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}cardProductId uses Python identifier cardProductId
    __cardProductId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), 'cardProductId', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemacardProductId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1765, 24), )

    
    cardProductId = property(__cardProductId.value, __cardProductId.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1767, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1768, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authCode'), 'authCode', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaauthCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1769, 24), )

    
    authCode = property(__authCode.value, __authCode.set, None, None)

    
    # Element {http://www.litle.com/schema}authorizationResponseSubCode uses Python identifier authorizationResponseSubCode
    __authorizationResponseSubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), 'authorizationResponseSubCode', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaauthorizationResponseSubCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1770, 24), )

    
    authorizationResponseSubCode = property(__authorizationResponseSubCode.value, __authorizationResponseSubCode.set, None, None)

    
    # Element {http://www.litle.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), 'approvedAmount', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaapprovedAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1771, 24), )

    
    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}accountInformation uses Python identifier accountInformation
    __accountInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), 'accountInformation', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaaccountInformation', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1772, 24), )

    
    accountInformation = property(__accountInformation.value, __accountInformation.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1777, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}recycling uses Python identifier recycling
    __recycling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycling'), 'recycling', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemarecycling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1779, 24), )

    
    recycling = property(__recycling.value, __recycling.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringResponse uses Python identifier recurringResponse
    __recurringResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), 'recurringResponse', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemarecurringResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1780, 24), )

    
    recurringResponse = property(__recurringResponse.value, __recurringResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}networkTransactionId uses Python identifier networkTransactionId
    __networkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), 'networkTransactionId', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemanetworkTransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1785, 24), )

    
    networkTransactionId = property(__networkTransactionId.value, __networkTransactionId.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedAuthResponse uses Python identifier enhancedAuthResponse
    __enhancedAuthResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), 'enhancedAuthResponse', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaenhancedAuthResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1854, 4), )

    
    enhancedAuthResponse = property(__enhancedAuthResponse.value, __enhancedAuthResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.litle.com/schema}applepayResponse uses Python identifier applepayResponse
    __applepayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), 'applepayResponse', '__httpwww_litle_comschema_CTD_ANON_53_httpwww_litle_comschemaapplepayResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4), )

    
    applepayResponse = property(__applepayResponse.value, __applepayResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billMeLaterResponseData.name() : __billMeLaterResponseData,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __cardProductId.name() : __cardProductId,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __authCode.name() : __authCode,
        __authorizationResponseSubCode.name() : __authorizationResponseSubCode,
        __approvedAmount.name() : __approvedAmount,
        __accountInformation.name() : __accountInformation,
        __tokenResponse.name() : __tokenResponse,
        __recycling.name() : __recycling,
        __recurringResponse.name() : __recurringResponse,
        __networkTransactionId.name() : __networkTransactionId,
        __enhancedAuthResponse.name() : __enhancedAuthResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater,
        __applepayResponse.name() : __applepayResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1876, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1880, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1881, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1882, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1883, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1885, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1886, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_54_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1896, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1900, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1901, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1902, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1903, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1905, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1906, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_55_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1916, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1920, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1921, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1922, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1923, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1925, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1926, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_56_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1936, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1940, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1941, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1942, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1943, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1945, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1946, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_57_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1956, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1960, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1961, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1962, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1963, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1965, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1966, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_58_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1976, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1980, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1981, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1982, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1983, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1985, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1986, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_59_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1996, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2000, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2001, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2002, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2003, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2005, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2006, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_60_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2016, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2020, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2022, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2023, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2024, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2026, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2027, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_61_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_61_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2034, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2034, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2041, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2045, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2046, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2047, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2048, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2050, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2051, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2053, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_62_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2067, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2071, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2072, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2073, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2074, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2076, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2077, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2079, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_63_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2092, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billMeLaterResponseData uses Python identifier billMeLaterResponseData
    __billMeLaterResponseData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData'), 'billMeLaterResponseData', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemabillMeLaterResponseData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1118, 4), )

    
    billMeLaterResponseData = property(__billMeLaterResponseData.value, __billMeLaterResponseData.set, None, None)

    
    # Element {http://www.litle.com/schema}enhancedAuthResponse uses Python identifier enhancedAuthResponse
    __enhancedAuthResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), 'enhancedAuthResponse', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaenhancedAuthResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1854, 4), )

    
    enhancedAuthResponse = property(__enhancedAuthResponse.value, __enhancedAuthResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2096, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2097, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2098, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2099, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}cardProductId uses Python identifier cardProductId
    __cardProductId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), 'cardProductId', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemacardProductId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2100, 24), )

    
    cardProductId = property(__cardProductId.value, __cardProductId.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2101, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2102, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}authCode uses Python identifier authCode
    __authCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authCode'), 'authCode', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaauthCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2103, 24), )

    
    authCode = property(__authCode.value, __authCode.set, None, None)

    
    # Element {http://www.litle.com/schema}authorizationResponseSubCode uses Python identifier authorizationResponseSubCode
    __authorizationResponseSubCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), 'authorizationResponseSubCode', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaauthorizationResponseSubCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2104, 24), )

    
    authorizationResponseSubCode = property(__authorizationResponseSubCode.value, __authorizationResponseSubCode.set, None, None)

    
    # Element {http://www.litle.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), 'approvedAmount', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaapprovedAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2105, 24), )

    
    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}accountInformation uses Python identifier accountInformation
    __accountInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), 'accountInformation', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaaccountInformation', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2106, 24), )

    
    accountInformation = property(__accountInformation.value, __accountInformation.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2110, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}recycling uses Python identifier recycling
    __recycling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycling'), 'recycling', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemarecycling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2113, 24), )

    
    recycling = property(__recycling.value, __recycling.set, None, None)

    
    # Element {http://www.litle.com/schema}recurringResponse uses Python identifier recurringResponse
    __recurringResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), 'recurringResponse', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemarecurringResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2114, 24), )

    
    recurringResponse = property(__recurringResponse.value, __recurringResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}networkTransactionId uses Python identifier networkTransactionId
    __networkTransactionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), 'networkTransactionId', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemanetworkTransactionId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2119, 24), )

    
    networkTransactionId = property(__networkTransactionId.value, __networkTransactionId.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.litle.com/schema}applepayResponse uses Python identifier applepayResponse
    __applepayResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), 'applepayResponse', '__httpwww_litle_comschema_CTD_ANON_64_httpwww_litle_comschemaapplepayResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4), )

    
    applepayResponse = property(__applepayResponse.value, __applepayResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_64_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2122, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2122, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __billMeLaterResponseData.name() : __billMeLaterResponseData,
        __enhancedAuthResponse.name() : __enhancedAuthResponse,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __cardProductId.name() : __cardProductId,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __authCode.name() : __authCode,
        __authorizationResponseSubCode.name() : __authorizationResponseSubCode,
        __approvedAmount.name() : __approvedAmount,
        __accountInformation.name() : __accountInformation,
        __tokenResponse.name() : __tokenResponse,
        __recycling.name() : __recycling,
        __recurringResponse.name() : __recurringResponse,
        __networkTransactionId.name() : __networkTransactionId,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __accountUpdater.name() : __accountUpdater,
        __applepayResponse.name() : __applepayResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2129, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2133, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2134, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2135, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2136, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2138, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2139, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2141, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_65_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_65_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2147, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2147, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __tokenResponse.name() : __tokenResponse,
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2167, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2171, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2172, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2173, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2174, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2176, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2177, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}virtualGiftCardResponse uses Python identifier virtualGiftCardResponse
    __virtualGiftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse'), 'virtualGiftCardResponse', '__httpwww_litle_comschema_CTD_ANON_66_httpwww_litle_comschemavirtualGiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2244, 4), )

    
    virtualGiftCardResponse = property(__virtualGiftCardResponse.value, __virtualGiftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_66_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2183, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2183, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse,
        __virtualGiftCardResponse.name() : __virtualGiftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2190, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2194, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2195, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2196, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2197, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2199, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2200, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_67_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_67_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2205, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2205, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2212, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2216, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2217, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2218, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2219, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2221, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2222, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_68_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_68_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2227, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2227, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __giftCardResponse.name() : __giftCardResponse
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2255, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2259, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2260, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2261, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2262, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2264, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_69_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2265, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2275, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}fraudResult uses Python identifier fraudResult
    __fraudResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), 'fraudResult', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemafraudResult', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4), )

    
    fraudResult = property(__fraudResult.value, __fraudResult.set, None, None)

    
    # Element {http://www.litle.com/schema}giftCardResponse uses Python identifier giftCardResponse
    __giftCardResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), 'giftCardResponse', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemagiftCardResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4), )

    
    giftCardResponse = property(__giftCardResponse.value, __giftCardResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2279, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2280, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2281, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2282, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2284, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2285, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}approvedAmount uses Python identifier approvedAmount
    __approvedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), 'approvedAmount', '__httpwww_litle_comschema_CTD_ANON_70_httpwww_litle_comschemaapprovedAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2287, 24), )

    
    approvedAmount = property(__approvedAmount.value, __approvedAmount.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __fraudResult.name() : __fraudResult,
        __giftCardResponse.name() : __giftCardResponse,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __approvedAmount.name() : __approvedAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2301, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}shipToAddress uses Python identifier shipToAddress
    __shipToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), 'shipToAddress', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemashipToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4), )

    
    shipToAddress = property(__shipToAddress.value, __shipToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4), )

    
    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2306, 28), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2307, 28), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2311, 28), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}verify uses Python identifier verify
    __verify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verify'), 'verify', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaverify', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2312, 28), )

    
    verify = property(__verify.value, __verify.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2314, 28), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2315, 28), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_71_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2320, 28), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __shipToAddress.name() : __shipToAddress,
        __customBilling.name() : __customBilling,
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __orderId.name() : __orderId,
        __verify.name() : __verify,
        __secondaryAmount.name() : __secondaryAmount,
        __orderSource.name() : __orderSource,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2329, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}customBilling uses Python identifier customBilling
    __customBilling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), 'customBilling', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemacustomBilling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4), )

    
    customBilling = property(__customBilling.value, __customBilling.set, None, None)

    
    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4), )

    
    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2335, 29), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2336, 29), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2340, 29), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}secondaryAmount uses Python identifier secondaryAmount
    __secondaryAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), 'secondaryAmount', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemasecondaryAmount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2342, 32), )

    
    secondaryAmount = property(__secondaryAmount.value, __secondaryAmount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2343, 29), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_72_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2347, 29), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __customBilling.name() : __customBilling,
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __amount.name() : __amount,
        __orderId.name() : __orderId,
        __secondaryAmount.name() : __secondaryAmount,
        __orderSource.name() : __orderSource,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2357, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}billToAddress uses Python identifier billToAddress
    __billToAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), 'billToAddress', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemabillToAddress', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4), )

    
    billToAddress = property(__billToAddress.value, __billToAddress.set, None, None)

    
    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4), )

    
    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2361, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2362, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemaamount', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2363, 24), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://www.litle.com/schema}orderSource uses Python identifier orderSource
    __orderSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), 'orderSource', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemaorderSource', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2364, 24), )

    
    orderSource = property(__orderSource.value, __orderSource.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_73_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2367, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __billToAddress.name() : __billToAddress,
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __amount.name() : __amount,
        __orderSource.name() : __orderSource,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2375, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2379, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2380, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2381, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2382, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2383, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}verificationCode uses Python identifier verificationCode
    __verificationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verificationCode'), 'verificationCode', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaverificationCode', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2384, 24), )

    
    verificationCode = property(__verificationCode.value, __verificationCode.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2386, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2388, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_74_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_74_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2390, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2390, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __verificationCode.name() : __verificationCode,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2397, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2401, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2402, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2403, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2404, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2405, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2407, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2409, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_75_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_75_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2411, 21)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2411, 21)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse,
        __accountUpdater.name() : __accountUpdater
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2491, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2495, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2496, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2497, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2498, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2499, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2501, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_76_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2502, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2510, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}echeckOrEcheckToken uses Python identifier echeckOrEcheckToken
    __echeckOrEcheckToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), 'echeckOrEcheckToken', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemaecheckOrEcheckToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4), )

    
    echeckOrEcheckToken = property(__echeckOrEcheckToken.value, __echeckOrEcheckToken.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2514, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}merchantData uses Python identifier merchantData
    __merchantData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), 'merchantData', '__httpwww_litle_comschema_CTD_ANON_77_httpwww_litle_comschemamerchantData', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2516, 24), )

    
    merchantData = property(__merchantData.value, __merchantData.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __echeckOrEcheckToken.name() : __echeckOrEcheckToken,
        __litleTxnId.name() : __litleTxnId,
        __merchantData.name() : __merchantData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2524, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}accountUpdater uses Python identifier accountUpdater
    __accountUpdater = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), 'accountUpdater', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemaaccountUpdater', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4), )

    
    accountUpdater = property(__accountUpdater.value, __accountUpdater.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2528, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2529, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2530, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2531, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2533, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}tokenResponse uses Python identifier tokenResponse
    __tokenResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), 'tokenResponse', '__httpwww_litle_comschema_CTD_ANON_78_httpwww_litle_comschematokenResponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2535, 24), )

    
    tokenResponse = property(__tokenResponse.value, __tokenResponse.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __accountUpdater.name() : __accountUpdater,
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __postDate.name() : __postDate,
        __tokenResponse.name() : __tokenResponse
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type {http://www.litle.com/schema}updateCardValidationNumOnToken with content type ELEMENT_ONLY
class updateCardValidationNumOnToken_ (transactionTypeWithReportGroup):
    """Complex type {http://www.litle.com/schema}updateCardValidationNumOnToken with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'updateCardValidationNumOnToken')
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2788, 4)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_updateCardValidationNumOnToken__httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2792, 20), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}litleToken uses Python identifier litleToken
    __litleToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), 'litleToken', '__httpwww_litle_comschema_updateCardValidationNumOnToken__httpwww_litle_comschemalitleToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2793, 20), )

    
    litleToken = property(__litleToken.value, __litleToken.set, None, None)

    
    # Element {http://www.litle.com/schema}cardValidationNum uses Python identifier cardValidationNum
    __cardValidationNum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), 'cardValidationNum', '__httpwww_litle_comschema_updateCardValidationNumOnToken__httpwww_litle_comschemacardValidationNum', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2794, 20), )

    
    cardValidationNum = property(__cardValidationNum.value, __cardValidationNum.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __orderId.name() : __orderId,
        __litleToken.name() : __litleToken,
        __cardValidationNum.name() : __cardValidationNum
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.updateCardValidationNumOnToken_ = updateCardValidationNumOnToken_
Namespace.addCategoryObject('typeBinding', 'updateCardValidationNumOnToken', updateCardValidationNumOnToken_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2801, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2805, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2806, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2807, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2808, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_79_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2809, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2824, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}advancedFraudChecks uses Python identifier advancedFraudChecks
    __advancedFraudChecks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), 'advancedFraudChecks', '__httpwww_litle_comschema_CTD_ANON_80_httpwww_litle_comschemaadvancedFraudChecks', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2828, 24), )

    
    advancedFraudChecks = property(__advancedFraudChecks.value, __advancedFraudChecks.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __advancedFraudChecks.name() : __advancedFraudChecks
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2836, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2840, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2841, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2842, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2843, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}advancedFraudResults uses Python identifier advancedFraudResults
    __advancedFraudResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), 'advancedFraudResults', '__httpwww_litle_comschema_CTD_ANON_81_httpwww_litle_comschemaadvancedFraudResults', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2844, 24), )

    
    advancedFraudResults = property(__advancedFraudResults.value, __advancedFraudResults.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __message.name() : __message,
        __responseTime.name() : __responseTime,
        __advancedFraudResults.name() : __advancedFraudResults
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3087, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}cardOrToken uses Python identifier cardOrToken
    __cardOrToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken'), 'cardOrToken', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemacardOrToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3081, 4), )

    
    cardOrToken = property(__cardOrToken.value, __cardOrToken.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_82_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3091, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __cardOrToken.name() : __cardOrToken,
        __orderId.name() : __orderId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3133, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3137, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}orderId uses Python identifier orderId
    __orderId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderId'), 'orderId', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaorderId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3138, 24), )

    
    orderId = property(__orderId.value, __orderId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3139, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3140, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3141, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}updatedCard uses Python identifier updatedCard
    __updatedCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updatedCard'), 'updatedCard', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaupdatedCard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3142, 24), )

    
    updatedCard = property(__updatedCard.value, __updatedCard.set, None, None)

    
    # Element {http://www.litle.com/schema}originalCard uses Python identifier originalCard
    __originalCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalCard'), 'originalCard', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaoriginalCard', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3143, 24), )

    
    originalCard = property(__originalCard.value, __originalCard.set, None, None)

    
    # Element {http://www.litle.com/schema}updatedToken uses Python identifier updatedToken
    __updatedToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updatedToken'), 'updatedToken', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaupdatedToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3144, 24), )

    
    updatedToken = property(__updatedToken.value, __updatedToken.set, None, None)

    
    # Element {http://www.litle.com/schema}originalToken uses Python identifier originalToken
    __originalToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalToken'), 'originalToken', '__httpwww_litle_comschema_CTD_ANON_83_httpwww_litle_comschemaoriginalToken', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3145, 24), )

    
    originalToken = property(__originalToken.value, __originalToken.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __orderId.name() : __orderId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __message.name() : __message,
        __updatedCard.name() : __updatedCard,
        __originalCard.name() : __originalCard,
        __updatedToken.name() : __updatedToken,
        __originalToken.name() : __originalToken
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3218, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}processingInstructions uses Python identifier processingInstructions
    __processingInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), 'processingInstructions', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemaprocessingInstructions', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4), )

    
    processingInstructions = property(__processingInstructions.value, __processingInstructions.set, None, None)

    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_84_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3222, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __processingInstructions.name() : __processingInstructions,
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3231, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3235, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3236, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3237, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3238, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3239, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.litle.com/schema}recycling uses Python identifier recycling
    __recycling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recycling'), 'recycling', '__httpwww_litle_comschema_CTD_ANON_85_httpwww_litle_comschemarecycling', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3240, 24), )

    
    recycling = property(__recycling.value, __recycling.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_85_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3242, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3242, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message,
        __recycling.name() : __recycling
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3256, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_86_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3260, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3268, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3272, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Element {http://www.litle.com/schema}response uses Python identifier response
    __response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'response'), 'response', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemaresponse', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3273, 24), )

    
    response = property(__response.value, __response.set, None, None)

    
    # Element {http://www.litle.com/schema}responseTime uses Python identifier responseTime
    __responseTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), 'responseTime', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemaresponseTime', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3274, 24), )

    
    responseTime = property(__responseTime.value, __responseTime.set, None, None)

    
    # Element {http://www.litle.com/schema}postDate uses Python identifier postDate
    __postDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postDate'), 'postDate', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemapostDate', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3275, 24), )

    
    postDate = property(__postDate.value, __postDate.set, None, None)

    
    # Element {http://www.litle.com/schema}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_litle_comschema_CTD_ANON_87_httpwww_litle_comschemamessage', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3276, 24), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    
    # Attribute duplicate uses Python identifier duplicate
    __duplicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'duplicate'), 'duplicate', '__httpwww_litle_comschema_CTD_ANON_87_duplicate', pyxb.binding.datatypes.boolean)
    __duplicate._DeclarationLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3278, 20)
    __duplicate._UseLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3278, 20)
    
    duplicate = property(__duplicate.value, __duplicate.set, None, None)

    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId,
        __response.name() : __response,
        __responseTime.name() : __responseTime,
        __postDate.name() : __postDate,
        __message.name() : __message
    })
    _AttributeMap.update({
        __duplicate.name() : __duplicate
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3285, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_88_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3289, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3297, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_89_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3301, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3309, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_90_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3313, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3321, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_91_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3325, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3333, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_92_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3337, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (transactionTypeWithReportGroup):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3345, 8)
    _ElementMap = transactionTypeWithReportGroup._ElementMap.copy()
    _AttributeMap = transactionTypeWithReportGroup._AttributeMap.copy()
    # Base type is transactionTypeWithReportGroup
    
    # Element {http://www.litle.com/schema}litleTxnId uses Python identifier litleTxnId
    __litleTxnId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), 'litleTxnId', '__httpwww_litle_comschema_CTD_ANON_93_httpwww_litle_comschemalitleTxnId', False, pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3349, 24), )

    
    litleTxnId = property(__litleTxnId.value, __litleTxnId.set, None, None)

    
    # Attribute id inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute customerId inherited from {http://www.litle.com/schema}transactionType
    
    # Attribute reportGroup inherited from {http://www.litle.com/schema}transactionTypeWithReportGroup
    _ElementMap.update({
        __litleTxnId.name() : __litleTxnId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


echeckOrEcheckToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4))
Namespace.addCategoryObject('elementBinding', echeckOrEcheckToken.name().localName(), echeckOrEcheckToken)

cardOrToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3081, 4))
Namespace.addCategoryObject('elementBinding', cardOrToken.name().localName(), cardOrToken)

authentication = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authentication'), CTD_ANON, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', authentication.name().localName(), authentication)

billToAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4))
Namespace.addCategoryObject('elementBinding', billToAddress.name().localName(), billToAddress)

recurringTransaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 717, 4))
Namespace.addCategoryObject('elementBinding', recurringTransaction.name().localName(), recurringTransaction)

recurringTransactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 718, 4))
Namespace.addCategoryObject('elementBinding', recurringTransactionResponse.name().localName(), recurringTransactionResponse)

customerInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1011, 4))
Namespace.addCategoryObject('elementBinding', customerInfo.name().localName(), customerInfo)

bmlProductType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bmlProductType'), STD_ANON_5, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1064, 4), unicode_default='BL')
Namespace.addCategoryObject('elementBinding', bmlProductType.name().localName(), bmlProductType)

billMeLaterRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4))
Namespace.addCategoryObject('elementBinding', billMeLaterRequest.name().localName(), billMeLaterRequest)

billMeLaterResponseData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData'), CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1118, 4))
Namespace.addCategoryObject('elementBinding', billMeLaterResponseData.name().localName(), billMeLaterResponseData)

shipToAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4))
Namespace.addCategoryObject('elementBinding', shipToAddress.name().localName(), shipToAddress)

authInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authInformation'), CTD_ANON_5, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1502, 4))
Namespace.addCategoryObject('elementBinding', authInformation.name().localName(), authInformation)

healthcareIIAS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), CTD_ANON_6, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1527, 4))
Namespace.addCategoryObject('elementBinding', healthcareIIAS.name().localName(), healthcareIIAS)

healthcareAmounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts'), CTD_ANON_7, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1536, 4))
Namespace.addCategoryObject('elementBinding', healthcareAmounts.name().localName(), healthcareAmounts)

enhancedData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4))
Namespace.addCategoryObject('elementBinding', enhancedData.name().localName(), enhancedData)

amexAggregatorData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), CTD_ANON_9, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4))
Namespace.addCategoryObject('elementBinding', amexAggregatorData.name().localName(), amexAggregatorData)

detailTax = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), CTD_ANON_10, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1588, 4))
Namespace.addCategoryObject('elementBinding', detailTax.name().localName(), detailTax)

lineItemData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemData'), CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1600, 4))
Namespace.addCategoryObject('elementBinding', lineItemData.name().localName(), lineItemData)

customBilling = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4))
Namespace.addCategoryObject('elementBinding', customBilling.name().localName(), customBilling)

processingInstructions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4))
Namespace.addCategoryObject('elementBinding', processingInstructions.name().localName(), processingInstructions)

pos = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_14, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4))
Namespace.addCategoryObject('elementBinding', pos.name().localName(), pos)

enhancedAuthResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), CTD_ANON_15, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1854, 4))
Namespace.addCategoryObject('elementBinding', enhancedAuthResponse.name().localName(), enhancedAuthResponse)

fraudResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4))
Namespace.addCategoryObject('elementBinding', fraudResult.name().localName(), fraudResult)

giftCardResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4))
Namespace.addCategoryObject('elementBinding', giftCardResponse.name().localName(), giftCardResponse)

virtualGiftCardResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse'), CTD_ANON_19, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2244, 4))
Namespace.addCategoryObject('elementBinding', virtualGiftCardResponse.name().localName(), virtualGiftCardResponse)

echeck = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeck'), echeckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2297, 4))
Namespace.addCategoryObject('elementBinding', echeck.name().localName(), echeck)

echeckToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckToken'), echeckTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2298, 4))
Namespace.addCategoryObject('elementBinding', echeckToken.name().localName(), echeckToken)

accountUpdater = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4))
Namespace.addCategoryObject('elementBinding', accountUpdater.name().localName(), accountUpdater)

wallet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wallet'), CTD_ANON_21, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2857, 4))
Namespace.addCategoryObject('elementBinding', wallet.name().localName(), wallet)

applepayResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4))
Namespace.addCategoryObject('elementBinding', applepayResponse.name().localName(), applepayResponse)

RFRRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest'), CTD_ANON_23, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2968, 4))
Namespace.addCategoryObject('elementBinding', RFRRequest.name().localName(), RFRRequest)

card = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3082, 4))
Namespace.addCategoryObject('elementBinding', card.name().localName(), card)

token = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3083, 4))
Namespace.addCategoryObject('elementBinding', token.name().localName(), token)

accountUpdateFileRequestData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData'), CTD_ANON_24, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3173, 4))
Namespace.addCategoryObject('elementBinding', accountUpdateFileRequestData.name().localName(), accountUpdateFileRequestData)

cancelSubscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelSubscription'), CTD_ANON_25, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 732, 4))
Namespace.addCategoryObject('elementBinding', cancelSubscription.name().localName(), cancelSubscription)

updateSubscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateSubscription'), CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 744, 4))
Namespace.addCategoryObject('elementBinding', updateSubscription.name().localName(), updateSubscription)

createPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createPlan'), CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 770, 4))
Namespace.addCategoryObject('elementBinding', createPlan.name().localName(), createPlan)

updatePlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatePlan'), CTD_ANON_28, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 790, 4))
Namespace.addCategoryObject('elementBinding', updatePlan.name().localName(), updatePlan)

cancelSubscriptionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelSubscriptionResponse'), CTD_ANON_29, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 803, 4))
Namespace.addCategoryObject('elementBinding', cancelSubscriptionResponse.name().localName(), cancelSubscriptionResponse)

updateSubscriptionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateSubscriptionResponse'), CTD_ANON_30, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 815, 4))
Namespace.addCategoryObject('elementBinding', updateSubscriptionResponse.name().localName(), updateSubscriptionResponse)

createPlanResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createPlanResponse'), CTD_ANON_31, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 828, 4))
Namespace.addCategoryObject('elementBinding', createPlanResponse.name().localName(), createPlanResponse)

updatePlanResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatePlanResponse'), CTD_ANON_32, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 840, 4))
Namespace.addCategoryObject('elementBinding', updatePlanResponse.name().localName(), updatePlanResponse)

transaction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 963, 4))
Namespace.addCategoryObject('elementBinding', transaction.name().localName(), transaction)

litleRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleRequest'), CTD_ANON_33, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2954, 4))
Namespace.addCategoryObject('elementBinding', litleRequest.name().localName(), litleRequest)

batchRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchRequest'), CTD_ANON_34, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2976, 4))
Namespace.addCategoryObject('elementBinding', batchRequest.name().localName(), batchRequest)

litleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleResponse'), CTD_ANON_35, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3099, 4))
Namespace.addCategoryObject('elementBinding', litleResponse.name().localName(), litleResponse)

RFRResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse'), CTD_ANON_36, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3114, 4))
Namespace.addCategoryObject('elementBinding', RFRResponse.name().localName(), RFRResponse)

batchResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchResponse'), CTD_ANON_37, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3120, 4))
Namespace.addCategoryObject('elementBinding', batchResponse.name().localName(), batchResponse)

litleOnlineResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleOnlineResponse'), CTD_ANON_38, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3205, 4))
Namespace.addCategoryObject('elementBinding', litleOnlineResponse.name().localName(), litleOnlineResponse)

transactionResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1754, 4))
Namespace.addCategoryObject('elementBinding', transactionResponse.name().localName(), transactionResponse)

litleOnlineRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleOnlineRequest'), CTD_ANON_39, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3193, 4))
Namespace.addCategoryObject('elementBinding', litleOnlineRequest.name().localName(), litleOnlineRequest)

authorization = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorization'), CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1151, 4))
Namespace.addCategoryObject('elementBinding', authorization.name().localName(), authorization)

authReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authReversal'), CTD_ANON_41, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1205, 4))
Namespace.addCategoryObject('elementBinding', authReversal.name().localName(), authReversal)

capture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'capture'), CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1221, 4))
Namespace.addCategoryObject('elementBinding', capture.name().localName(), capture)

forceCapture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'forceCapture'), CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1240, 4))
Namespace.addCategoryObject('elementBinding', forceCapture.name().localName(), forceCapture)

captureGivenAuth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureGivenAuth'), CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1272, 4))
Namespace.addCategoryObject('elementBinding', captureGivenAuth.name().localName(), captureGivenAuth)

sale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sale'), CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1309, 4))
Namespace.addCategoryObject('elementBinding', sale.name().localName(), sale)

credit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'credit'), CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1368, 4))
Namespace.addCategoryObject('elementBinding', credit.name().localName(), credit)

activate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activate'), CTD_ANON_47, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1438, 4))
Namespace.addCategoryObject('elementBinding', activate.name().localName(), activate)

deactivate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivate'), CTD_ANON_48, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1456, 4))
Namespace.addCategoryObject('elementBinding', deactivate.name().localName(), deactivate)

load = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'load'), CTD_ANON_49, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1470, 5))
Namespace.addCategoryObject('elementBinding', load.name().localName(), load)

unload = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unload'), CTD_ANON_50, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1485, 5))
Namespace.addCategoryObject('elementBinding', unload.name().localName(), unload)

balanceInquiry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'balanceInquiry'), CTD_ANON_51, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1513, 4))
Namespace.addCategoryObject('elementBinding', balanceInquiry.name().localName(), balanceInquiry)

registerTokenRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerTokenRequest'), registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1712, 4))
Namespace.addCategoryObject('elementBinding', registerTokenRequest.name().localName(), registerTokenRequest)

registerTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerTokenResponse'), CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1732, 4))
Namespace.addCategoryObject('elementBinding', registerTokenResponse.name().localName(), registerTokenResponse)

authorizationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponse'), CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1756, 4))
Namespace.addCategoryObject('elementBinding', authorizationResponse.name().localName(), authorizationResponse)

authReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authReversalResponse'), CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1875, 4))
Namespace.addCategoryObject('elementBinding', authReversalResponse.name().localName(), authReversalResponse)

depositReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'depositReversalResponse'), CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1895, 2))
Namespace.addCategoryObject('elementBinding', depositReversalResponse.name().localName(), depositReversalResponse)

refundReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundReversalResponse'), CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1915, 4))
Namespace.addCategoryObject('elementBinding', refundReversalResponse.name().localName(), refundReversalResponse)

activateReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activateReversalResponse'), CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1935, 4))
Namespace.addCategoryObject('elementBinding', activateReversalResponse.name().localName(), activateReversalResponse)

deactivateReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivateReversalResponse'), CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1955, 4))
Namespace.addCategoryObject('elementBinding', deactivateReversalResponse.name().localName(), deactivateReversalResponse)

loadReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadReversalResponse'), CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1975, 4))
Namespace.addCategoryObject('elementBinding', loadReversalResponse.name().localName(), loadReversalResponse)

unloadReversalResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unloadReversalResponse'), CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1995, 4))
Namespace.addCategoryObject('elementBinding', unloadReversalResponse.name().localName(), unloadReversalResponse)

captureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureResponse'), CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2015, 4))
Namespace.addCategoryObject('elementBinding', captureResponse.name().localName(), captureResponse)

forceCaptureResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'forceCaptureResponse'), CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2040, 4))
Namespace.addCategoryObject('elementBinding', forceCaptureResponse.name().localName(), forceCaptureResponse)

captureGivenAuthResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureGivenAuthResponse'), CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2066, 4))
Namespace.addCategoryObject('elementBinding', captureGivenAuthResponse.name().localName(), captureGivenAuthResponse)

saleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'saleResponse'), CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2091, 4))
Namespace.addCategoryObject('elementBinding', saleResponse.name().localName(), saleResponse)

creditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditResponse'), CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2128, 4))
Namespace.addCategoryObject('elementBinding', creditResponse.name().localName(), creditResponse)

activateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activateResponse'), CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2166, 4))
Namespace.addCategoryObject('elementBinding', activateResponse.name().localName(), activateResponse)

loadResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadResponse'), CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2189, 4))
Namespace.addCategoryObject('elementBinding', loadResponse.name().localName(), loadResponse)

unloadResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unloadResponse'), CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2211, 4))
Namespace.addCategoryObject('elementBinding', unloadResponse.name().localName(), unloadResponse)

balanceInquiryResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'balanceInquiryResponse'), CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2254, 4))
Namespace.addCategoryObject('elementBinding', balanceInquiryResponse.name().localName(), balanceInquiryResponse)

deactivateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivateResponse'), CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2274, 4))
Namespace.addCategoryObject('elementBinding', deactivateResponse.name().localName(), deactivateResponse)

echeckSale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckSale'), CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2300, 4))
Namespace.addCategoryObject('elementBinding', echeckSale.name().localName(), echeckSale)

echeckCredit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckCredit'), CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2328, 4))
Namespace.addCategoryObject('elementBinding', echeckCredit.name().localName(), echeckCredit)

echeckVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVerification'), CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2356, 4))
Namespace.addCategoryObject('elementBinding', echeckVerification.name().localName(), echeckVerification)

echeckSalesResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckSalesResponse'), CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2374, 4))
Namespace.addCategoryObject('elementBinding', echeckSalesResponse.name().localName(), echeckSalesResponse)

echeckCreditResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckCreditResponse'), CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2396, 4))
Namespace.addCategoryObject('elementBinding', echeckCreditResponse.name().localName(), echeckCreditResponse)

echeckVerificationResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVerificationResponse'), CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2490, 4))
Namespace.addCategoryObject('elementBinding', echeckVerificationResponse.name().localName(), echeckVerificationResponse)

echeckRedeposit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckRedeposit'), CTD_ANON_77, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2509, 4))
Namespace.addCategoryObject('elementBinding', echeckRedeposit.name().localName(), echeckRedeposit)

echeckRedepositResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckRedepositResponse'), CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2523, 4))
Namespace.addCategoryObject('elementBinding', echeckRedepositResponse.name().localName(), echeckRedepositResponse)

updateCardValidationNumOnToken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateCardValidationNumOnToken'), updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2786, 4))
Namespace.addCategoryObject('elementBinding', updateCardValidationNumOnToken.name().localName(), updateCardValidationNumOnToken)

updateCardValidationNumOnTokenResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateCardValidationNumOnTokenResponse'), CTD_ANON_79, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2800, 4))
Namespace.addCategoryObject('elementBinding', updateCardValidationNumOnTokenResponse.name().localName(), updateCardValidationNumOnTokenResponse)

fraudCheck = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck'), CTD_ANON_80, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2823, 4))
Namespace.addCategoryObject('elementBinding', fraudCheck.name().localName(), fraudCheck)

fraudCheckResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudCheckResponse'), CTD_ANON_81, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2835, 4))
Namespace.addCategoryObject('elementBinding', fraudCheckResponse.name().localName(), fraudCheckResponse)

accountUpdate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdate'), CTD_ANON_82, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3086, 4))
Namespace.addCategoryObject('elementBinding', accountUpdate.name().localName(), accountUpdate)

accountUpdateResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateResponse'), CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3132, 4))
Namespace.addCategoryObject('elementBinding', accountUpdateResponse.name().localName(), accountUpdateResponse)

void = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'void'), CTD_ANON_84, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3217, 4))
Namespace.addCategoryObject('elementBinding', void.name().localName(), void)

voidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'voidResponse'), CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3230, 4))
Namespace.addCategoryObject('elementBinding', voidResponse.name().localName(), voidResponse)

echeckVoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVoid'), CTD_ANON_86, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3255, 4))
Namespace.addCategoryObject('elementBinding', echeckVoid.name().localName(), echeckVoid)

echeckVoidResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckVoidResponse'), CTD_ANON_87, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3267, 4))
Namespace.addCategoryObject('elementBinding', echeckVoidResponse.name().localName(), echeckVoidResponse)

depositReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'depositReversal'), CTD_ANON_88, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3284, 4))
Namespace.addCategoryObject('elementBinding', depositReversal.name().localName(), depositReversal)

refundReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundReversal'), CTD_ANON_89, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3296, 4))
Namespace.addCategoryObject('elementBinding', refundReversal.name().localName(), refundReversal)

activateReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'activateReversal'), CTD_ANON_90, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3308, 5))
Namespace.addCategoryObject('elementBinding', activateReversal.name().localName(), activateReversal)

deactivateReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deactivateReversal'), CTD_ANON_91, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3320, 5))
Namespace.addCategoryObject('elementBinding', deactivateReversal.name().localName(), deactivateReversal)

loadReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loadReversal'), CTD_ANON_92, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3332, 5))
Namespace.addCategoryObject('elementBinding', loadReversal.name().localName(), loadReversal)

unloadReversal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unloadReversal'), CTD_ANON_93, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3344, 5))
Namespace.addCategoryObject('elementBinding', unloadReversal.name().localName(), unloadReversal)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'user'), string20Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 8, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'password'), string20Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 9, 16)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'user')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'password')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 9, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 563, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'firstName'), firstNameType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 564, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'middleInitial'), middleInitialType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 565, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lastName'), lastNameType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 566, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'companyName'), companyName, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 567, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressLine1'), addressLineType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 568, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressLine2'), addressLineType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 569, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressLine3'), addressLineType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 570, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'city'), cityType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 571, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), stateType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 572, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zip'), zipType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 573, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'country'), countryTypeEnum, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 574, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'email'), STD_ANON_20, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 575, 12)))

contact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phone'), phoneType, scope=contact, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 582, 12)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 563, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 563, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 564, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'firstName')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 564, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 565, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'middleInitial')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 565, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 566, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lastName')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 566, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 567, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'companyName')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 567, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 568, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressLine1')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 568, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 569, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressLine2')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 569, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 570, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressLine3')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 570, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 571, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'city')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 571, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 572, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'state')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 572, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 573, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zip')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 573, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 574, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'country')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 574, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 575, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'email')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 575, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 582, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(contact._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phone')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 582, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 563, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 564, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 565, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 566, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 567, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 568, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 569, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 570, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 571, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 572, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 573, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 574, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 575, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 582, 12))
    counters.add(cc_13)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_2())
    sub_automata.append(_BuildAutomaton_3())
    sub_automata.append(_BuildAutomaton_4())
    sub_automata.append(_BuildAutomaton_5())
    sub_automata.append(_BuildAutomaton_6())
    sub_automata.append(_BuildAutomaton_7())
    sub_automata.append(_BuildAutomaton_8())
    sub_automata.append(_BuildAutomaton_9())
    sub_automata.append(_BuildAutomaton_10())
    sub_automata.append(_BuildAutomaton_11())
    sub_automata.append(_BuildAutomaton_12())
    sub_automata.append(_BuildAutomaton_13())
    sub_automata.append(_BuildAutomaton_14())
    sub_automata.append(_BuildAutomaton_15())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 562, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
contact._Automaton = _BuildAutomaton_()




mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ksn'), ksnType, scope=mposType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 590, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formatId'), formatIdType, scope=mposType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 591, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'encryptedTrack'), encryptedTrackType, scope=mposType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 592, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track1Status'), trackStatusType, scope=mposType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 593, 12)))

mposType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track2Status'), trackStatusType, scope=mposType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 594, 12)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ksn')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 590, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formatId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 591, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'encryptedTrack')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 592, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track1Status')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 593, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mposType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track2Status')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 594, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
mposType._Automaton = _BuildAutomaton_16()




cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=cardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 602, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), ccAccountNumberType, scope=cardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 603, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), expDateType, scope=cardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 604, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track'), trackDataType, scope=cardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 607, 20)))

cardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), cvNumType, scope=cardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 610, 12)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 603, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 604, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 610, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 602, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 603, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 604, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 607, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 610, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardType._Automaton = _BuildAutomaton_17()




cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=cardTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 616, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), expDateType, scope=cardTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 617, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), cvNumType, scope=cardTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 618, 12)))

cardTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=cardTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 619, 12)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 617, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 618, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 619, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 616, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 617, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 618, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 619, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenType._Automaton = _BuildAutomaton_18()




cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), string512Type, scope=cardPaypageType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 625, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), expDateType, scope=cardPaypageType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 626, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), cvNumType, scope=cardPaypageType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 627, 12)))

cardPaypageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=cardPaypageType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 628, 12)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 626, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 627, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 628, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 625, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 626, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 627, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardPaypageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 628, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardPaypageType._Automaton = _BuildAutomaton_19()




tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=tokenResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 634, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponseCode'), responseType, scope=tokenResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 635, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenMessage'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 636, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=tokenResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 637, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 638, 12)))

tokenResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), pyxb.binding.datatypes.string, scope=tokenResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 639, 12)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 634, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 637, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 638, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 639, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 634, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponseCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 635, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenMessage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 636, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 637, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 638, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(tokenResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 639, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
tokenResponseType._Automaton = _BuildAutomaton_20()




advancedFraudChecksType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionId'), threatMetrixSessionIdType, scope=advancedFraudChecksType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 693, 12)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(advancedFraudChecksType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'threatMetrixSessionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 693, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
advancedFraudChecksType._Automaton = _BuildAutomaton_21()




advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceReviewStatus'), pyxb.binding.datatypes.string, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 705, 12)))

advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceReputationScore'), pyxb.binding.datatypes.int, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 706, 12)))

advancedFraudResultsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'triggeredRule'), pyxb.binding.datatypes.string, scope=advancedFraudResultsType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 707, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 705, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 706, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 707, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deviceReviewStatus')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 705, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deviceReputationScore')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 706, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(advancedFraudResultsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'triggeredRule')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 707, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
advancedFraudResultsType._Automaton = _BuildAutomaton_22()




recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12)))

recurringTransactionResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=recurringTransactionResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringTransactionResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringTransactionResponseType._Automaton = _BuildAutomaton_23()




recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), string25Type, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 855, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), numberOfPaymentsType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 856, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 857, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 858, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), createDiscountType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 859, 12)))

recurringSubscriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), createAddOnType, scope=recurringSubscriptionType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 860, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 856, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 857, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 858, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 859, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 860, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 855, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 856, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 857, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 858, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createDiscount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 859, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(recurringSubscriptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createAddOn')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 860, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringSubscriptionType._Automaton = _BuildAutomaton_24()




litleInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), litleIdType, scope=litleInternalRecurringRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 890, 12)))

litleInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), litleIdType, scope=litleInternalRecurringRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 891, 12)))

litleInternalRecurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'finalPayment'), pyxb.binding.datatypes.boolean, scope=litleInternalRecurringRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 892, 12)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(litleInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 890, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(litleInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 891, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(litleInternalRecurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'finalPayment')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 892, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
litleInternalRecurringRequestType._Automaton = _BuildAutomaton_25()




recurringRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscription'), recurringSubscriptionType, scope=recurringRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 898, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscription')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 898, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringRequestType._Automaton = _BuildAutomaton_26()




recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), litleIdType, scope=recurringResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 904, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseCode'), responseType, scope=recurringResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 905, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseMessage'), messageType, scope=recurringResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 906, 12)))

recurringResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId'), litleIdType, scope=recurringResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 907, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 907, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 904, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 905, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseMessage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 906, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recurringResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 907, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recurringResponseType._Automaton = _BuildAutomaton_27()




createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), string25Type, scope=createDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 913, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameType, scope=createDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 914, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=createDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 915, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=createDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 916, 12)))

createDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=createDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 917, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 913, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 914, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 915, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 916, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(createDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 917, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
createDiscountType._Automaton = _BuildAutomaton_28()




updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), string25Type, scope=updateDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 923, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameType, scope=updateDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 924, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=updateDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 925, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=updateDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 926, 12)))

updateDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=updateDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 927, 12)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 924, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 925, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 926, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 927, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 923, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 924, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 925, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 926, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(updateDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 927, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
updateDiscountType._Automaton = _BuildAutomaton_29()




deleteDiscountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountCode'), string25Type, scope=deleteDiscountType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 933, 12)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(deleteDiscountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 933, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
deleteDiscountType._Automaton = _BuildAutomaton_30()




createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), string25Type, scope=createAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 939, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameType, scope=createAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 940, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=createAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 941, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=createAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 942, 12)))

createAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=createAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 943, 12)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addOnCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 939, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 940, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 941, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 942, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(createAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 943, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
createAddOnType._Automaton = _BuildAutomaton_31()




updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), string25Type, scope=updateAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 949, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameType, scope=updateAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 950, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=updateAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 951, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=updateAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 952, 12)))

updateAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=updateAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 953, 12)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 950, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 951, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 952, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 953, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addOnCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 949, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 950, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 951, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 952, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(updateAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 953, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
updateAddOnType._Automaton = _BuildAutomaton_32()




deleteAddOnType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addOnCode'), string25Type, scope=deleteAddOnType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 959, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(deleteAddOnType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addOnCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 959, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
deleteAddOnType._Automaton = _BuildAutomaton_33()




merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'campaign'), campaignType, scope=merchantDataType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 980, 12)))

merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'affiliate'), affiliateType, scope=merchantDataType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 981, 12)))

merchantDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingId'), merchantGroupingIdType, scope=merchantDataType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 982, 12)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 980, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'campaign')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 980, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 981, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'affiliate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 981, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 982, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(merchantDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantGroupingId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 982, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 980, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 981, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 982, 12))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_35())
    sub_automata.append(_BuildAutomaton_36())
    sub_automata.append(_BuildAutomaton_37())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 979, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
merchantDataType._Automaton = _BuildAutomaton_34()




driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'licenseNumber'), driversLicenseType, scope=driversLicenseInfo, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1005, 12)))

driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), stateCodeType, scope=driversLicenseInfo, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1006, 12)))

driversLicenseInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), dateOfBirthType, scope=driversLicenseInfo, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1007, 12)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'licenseNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1005, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1006, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'state')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1006, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1007, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(driversLicenseInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1007, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1006, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1007, 12))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_39())
    sub_automata.append(_BuildAutomaton_40())
    sub_automata.append(_BuildAutomaton_41())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1004, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
driversLicenseInfo._Automaton = _BuildAutomaton_38()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ssn'), STD_ANON, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1014, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dob'), pyxb.binding.datatypes.date, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1021, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerRegistrationDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1022, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerType'), STD_ANON_, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1023, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'incomeAmount'), pyxb.binding.datatypes.long, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1031, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'incomeCurrency'), currencyCodeEnum, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1032, 16), unicode_default='USD'))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerCheckingAccount'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1033, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerSavingAccount'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1034, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'employerName'), string20Type, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1035, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerWorkTelephone'), phoneType, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1036, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'residenceStatus'), STD_ANON_2, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1037, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearsAtResidence'), STD_ANON_3, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1046, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearsAtEmployer'), STD_ANON_4, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1053, 16)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1014, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ssn')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1014, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1021, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dob')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1021, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1022, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerRegistrationDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1022, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1023, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1023, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1031, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'incomeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1031, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1032, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'incomeCurrency')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1032, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1033, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerCheckingAccount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1033, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1034, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerSavingAccount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1034, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1035, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'employerName')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1035, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1036, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerWorkTelephone')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1036, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1037, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'residenceStatus')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1037, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1046, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearsAtResidence')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1046, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1053, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearsAtEmployer')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1053, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1014, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1021, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1022, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1023, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1031, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1032, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1033, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1034, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1035, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1036, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1037, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1046, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1053, 16))
    counters.add(cc_12)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_43())
    sub_automata.append(_BuildAutomaton_44())
    sub_automata.append(_BuildAutomaton_45())
    sub_automata.append(_BuildAutomaton_46())
    sub_automata.append(_BuildAutomaton_47())
    sub_automata.append(_BuildAutomaton_48())
    sub_automata.append(_BuildAutomaton_49())
    sub_automata.append(_BuildAutomaton_50())
    sub_automata.append(_BuildAutomaton_51())
    sub_automata.append(_BuildAutomaton_52())
    sub_automata.append(_BuildAutomaton_53())
    sub_automata.append(_BuildAutomaton_54())
    sub_automata.append(_BuildAutomaton_55())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1013, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_42()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bmlProductType'), STD_ANON_5, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1064, 4), unicode_default='BL'))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bmlMerchantId'), litleIdType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1075, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'termsAndConditions'), STD_ANON_6, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1078, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preapprovalNumber'), ccAccountNumberType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1085, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantPromotionalCode'), STD_ANON_7, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1086, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerPasswordChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1094, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerBillingAddressChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1095, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerEmailChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1096, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerPhoneChanged'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1097, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secretQuestionCode'), string2Type, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1099, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secretQuestionAnswer'), string25Type, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1100, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyPresenceIndicator'), virtualAuthenticationKeyPresenceIndicator, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1101, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyData'), virtualAuthenticationKeyData, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1103, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemCategoryCode'), STD_ANON_8, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1105, 16)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationSourcePlatform'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1113, 16)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1075, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bmlMerchantId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1075, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1076, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bmlProductType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1076, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1078, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'termsAndConditions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1078, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1085, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preapprovalNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1085, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1086, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantPromotionalCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1086, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1094, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerPasswordChanged')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1094, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1095, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerBillingAddressChanged')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1095, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1096, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerEmailChanged')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1096, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1097, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerPhoneChanged')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1097, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1099, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secretQuestionCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1099, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1100, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secretQuestionAnswer')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1100, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1101, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyPresenceIndicator')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1101, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1103, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualAuthenticationKeyData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1103, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1105, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemCategoryCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1105, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1113, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationSourcePlatform')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1113, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1075, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1076, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1078, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1085, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1086, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1094, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1095, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1096, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1097, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1099, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1100, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1101, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1103, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1105, 16))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1113, 16))
    counters.add(cc_14)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_57())
    sub_automata.append(_BuildAutomaton_58())
    sub_automata.append(_BuildAutomaton_59())
    sub_automata.append(_BuildAutomaton_60())
    sub_automata.append(_BuildAutomaton_61())
    sub_automata.append(_BuildAutomaton_62())
    sub_automata.append(_BuildAutomaton_63())
    sub_automata.append(_BuildAutomaton_64())
    sub_automata.append(_BuildAutomaton_65())
    sub_automata.append(_BuildAutomaton_66())
    sub_automata.append(_BuildAutomaton_67())
    sub_automata.append(_BuildAutomaton_68())
    sub_automata.append(_BuildAutomaton_69())
    sub_automata.append(_BuildAutomaton_70())
    sub_automata.append(_BuildAutomaton_71())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1074, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_56()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bmlMerchantId'), litleIdType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1121, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'promotionalOfferCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1123, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedTermsCode'), STD_ANON_9, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1125, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditLine'), transactionAmountType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1132, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressIndicator'), addressIndicator, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1134, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loanToValueEstimator'), loanToValueEstimator, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1135, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'riskEstimator'), riskEstimator, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1136, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'riskQueueAssignment'), riskQueueAssignment, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1137, 16)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bmlMerchantId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1121, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1123, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'promotionalOfferCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1123, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1125, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedTermsCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1125, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1132, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditLine')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1132, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1134, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressIndicator')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1134, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1135, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loanToValueEstimator')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1135, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1136, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'riskEstimator')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1136, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1137, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'riskQueueAssignment')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1137, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1123, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1125, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1132, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1134, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1135, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1136, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1137, 16))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_73())
    sub_automata.append(_BuildAutomaton_74())
    sub_automata.append(_BuildAutomaton_75())
    sub_automata.append(_BuildAutomaton_76())
    sub_automata.append(_BuildAutomaton_77())
    sub_automata.append(_BuildAutomaton_78())
    sub_automata.append(_BuildAutomaton_79())
    sub_automata.append(_BuildAutomaton_80())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1120, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_72()




fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationValue'), authenticationValueType, scope=fraudCheckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1144, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionId'), authenticationTransactionIdType, scope=fraudCheckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1145, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerIpAddress'), ipAddress, scope=fraudCheckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1146, 12)))

fraudCheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticatedByMerchant'), pyxb.binding.datatypes.boolean, scope=fraudCheckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1147, 12)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1144, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationValue')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1144, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1145, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationTransactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1145, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1146, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerIpAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1146, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1147, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fraudCheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticatedByMerchant')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1147, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1144, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1145, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1146, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1147, 12))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_82())
    sub_automata.append(_BuildAutomaton_83())
    sub_automata.append(_BuildAutomaton_84())
    sub_automata.append(_BuildAutomaton_85())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1143, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
fraudCheckType._Automaton = _BuildAutomaton_81()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payerId'), STD_ANON_10, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1398, 48)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payerEmail'), STD_ANON_11, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1407, 48)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payerId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1398, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payerEmail')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1407, 48))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_86()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1505, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authCode'), authCodeType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1506, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authAmount'), transactionAmountType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1508, 16)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1505, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1506, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1507, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1507, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1508, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1508, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1507, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1508, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_88())
    sub_automata.append(_BuildAutomaton_89())
    sub_automata.append(_BuildAutomaton_90())
    sub_automata.append(_BuildAutomaton_91())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1504, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_87()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IIASFlag'), IIASFlagType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1531, 16)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts'), CTD_ANON_7, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1536, 4)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'healthcareAmounts')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1530, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IIASFlag')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1531, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_92()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalHealthcareAmount'), transactionAmountType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1539, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RxAmount'), transactionAmountType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1540, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'visionAmount'), transactionAmountType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1541, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clinicOtherAmount'), transactionAmountType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1542, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dentalAmount'), transactionAmountType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1543, 16)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1540, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1541, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1542, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1543, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalHealthcareAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1539, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RxAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1540, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visionAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1541, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clinicOtherAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1542, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dentalAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1543, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_93()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerReference'), customerReferenceType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1551, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'salesTax'), transactionAmountType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1552, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deliveryType'), STD_ANON_12, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1553, 16), unicode_default='TBD'))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxExempt'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1564, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'discountAmount'), transactionAmountType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1565, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shippingAmount'), transactionAmountType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1566, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dutyAmount'), transactionAmountType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1567, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipFromPostalCode'), zipType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1568, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationPostalCode'), zipType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1569, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationCountryCode'), countryTypeEnum, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1570, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumber'), invoiceReferenceNumberType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1571, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1572, 16)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), CTD_ANON_10, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1588, 4)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemData'), CTD_ANON_11, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1600, 4)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1551, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1552, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1553, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1564, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1565, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1566, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1567, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1568, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1569, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1570, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1571, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1572, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1573, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=99, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1574, 16))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerReference')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1551, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'salesTax')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1552, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deliveryType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1553, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxExempt')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1564, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'discountAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1565, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shippingAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1566, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dutyAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1567, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipFromPostalCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1568, 16))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationPostalCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1569, 16))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationCountryCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1570, 16))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'invoiceReferenceNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1571, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1572, 16))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'detailTax')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1573, 16))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lineItemData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1574, 16))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_94()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sellerId'), sellerIdType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1582, 16)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sellerMerchantCategoryCode'), merchantCategoryCodeType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1583, 16)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sellerId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1582, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sellerMerchantCategoryCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1583, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_95()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxIncludedInTotal'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1591, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), transactionAmountType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1592, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxRate'), taxRateType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1593, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifier'), taxTypeIdentifierEnum, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1594, 16)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxId'), cardAcceptorTaxIdType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1595, 16)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1591, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1593, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1594, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1595, 16))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxIncludedInTotal')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1591, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1592, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxRate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1593, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxTypeIdentifier')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1594, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardAcceptorTaxId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1595, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_96()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'detailTax'), CTD_ANON_10, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1588, 4)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumber'), itemSequenceNumberType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1603, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemDescription'), itemDescriptionType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1604, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productCode'), productCodeType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1605, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'quantity'), quantityType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1606, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasure'), unitOfMeasureType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1607, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxAmount'), transactionAmountType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1608, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotal'), transactionAmountType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1609, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotalWithTax'), transactionAmountType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1611, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'itemDiscountAmount'), transactionAmountType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1613, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commodityCode'), commodityCodeType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1614, 16)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unitCost'), unitCostType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1615, 16)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1603, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1605, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1606, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1607, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1608, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1609, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1611, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1613, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1614, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1615, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1616, 16))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemSequenceNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1603, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemDescription')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1604, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1605, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'quantity')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1606, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unitOfMeasure')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1607, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1608, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotal')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1609, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lineItemTotalWithTax')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1611, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'itemDiscountAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1613, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commodityCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1614, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unitCost')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1615, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'detailTax')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1616, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_97()




accountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=accountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1623, 12)))

accountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), ccAccountNumberType, scope=accountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1624, 12)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1624, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(accountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1623, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(accountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1624, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accountInfoType._Automaton = _BuildAutomaton_98()




echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=echeckTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1630, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), routingNumberType, scope=echeckTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1631, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), echeckAccountTypeEnum, scope=echeckTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1632, 12)))

echeckTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), checkNumberType, scope=echeckTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1633, 12)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1633, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1630, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1631, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1632, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1633, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckTokenType._Automaton = _BuildAutomaton_99()




payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payerId'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1639, 12)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1640, 12)))

payPal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), pyxb.binding.datatypes.string, scope=payPal, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1641, 12)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1640, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payerId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1639, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1640, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(payPal._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1641, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
payPal._Automaton = _BuildAutomaton_100()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phone'), customBillingPhoneType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1663, 20)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'city'), customBillingCityType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1664, 20)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'url'), customBillingUrlType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1665, 20)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'descriptor'), descriptorType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1667, 16)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1663, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1664, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1665, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1667, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phone')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1663, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'city')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1664, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'url')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1665, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'descriptor')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1667, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_101()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bypassVelocityCheck'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1695, 16)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1695, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bypassVelocityCheck')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1695, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_102()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'capability'), posCapabilityTypeEnum, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1703, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entryMode'), posEntryModeTypeEnum, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1704, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderId'), posCardholderIdTypeEnum, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1705, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'terminalId'), pyxb.binding.datatypes.string, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1706, 16)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'catLevel'), posCatLevelEnum, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1707, 16)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'capability')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1703, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entryMode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1704, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1705, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1706, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'terminalId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1706, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1707, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'catLevel')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1707, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1706, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1707, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_104())
    sub_automata.append(_BuildAutomaton_105())
    sub_automata.append(_BuildAutomaton_106())
    sub_automata.append(_BuildAutomaton_107())
    sub_automata.append(_BuildAutomaton_108())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1702, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_103()




recycleAdviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nextRecycleTime'), pyxb.binding.datatypes.dateTime, scope=recycleAdviceType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1827, 12)))

recycleAdviceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceEnd'), string20Type, scope=recycleAdviceType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1828, 12)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recycleAdviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nextRecycleTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1827, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(recycleAdviceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleAdviceEnd')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1828, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
recycleAdviceType._Automaton = _BuildAutomaton_109()




recyclingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleAdvice'), recycleAdviceType, scope=recyclingType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1842, 12)))

recyclingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleEngineActive'), pyxb.binding.datatypes.boolean, scope=recyclingType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1843, 12)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1842, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1843, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recyclingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleAdvice')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1842, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recyclingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleEngineActive')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1843, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recyclingType._Automaton = _BuildAutomaton_110()




recyclingRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleBy'), recycleByTypeEnum, scope=recyclingRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1849, 12)))

recyclingRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycleId'), string25Type, scope=recyclingRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1850, 12)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1849, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1850, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(recyclingRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleBy')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1849, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(recyclingRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycleId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1850, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
recyclingRequestType._Automaton = _BuildAutomaton_111()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fundingSource'), CTD_ANON_16, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1857, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'affluence'), affluenceTypeEnum, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1867, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'issuerCountry'), string3Type, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1868, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardProductType'), cardProductTypeEnum, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1869, 16)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualAccountNumber'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1870, 16)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1857, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1867, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1868, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1869, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1870, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fundingSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1857, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'affluence')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1867, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'issuerCountry')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1868, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardProductType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1869, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualAccountNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1870, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_112()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), fundingSourceTypeEnum, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1860, 28)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), string20Type, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1861, 28)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reloadable'), string50Type, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1862, 28)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prepaidCardType'), string50Type, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1863, 28)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1862, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1863, 28))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1860, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableBalance')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1861, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reloadable')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1862, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prepaidCardType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1863, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_113()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'avsResult'), string2Type, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2156, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationResult'), pyxb.binding.datatypes.string, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2157, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authenticationResult'), authenticationResultType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2159, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedAVSResult'), string3Type, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2160, 16)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), advancedFraudResultsType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2161, 16)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2156, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'avsResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2156, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2157, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2157, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2159, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authenticationResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2159, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2160, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedAVSResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2160, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2161, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2161, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2156, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2157, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2159, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2160, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2161, 16))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_115())
    sub_automata.append(_BuildAutomaton_116())
    sub_automata.append(_BuildAutomaton_117())
    sub_automata.append(_BuildAutomaton_118())
    sub_automata.append(_BuildAutomaton_119())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2155, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_114()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableBalance'), string20Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2236, 13)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'beginningBalance'), string20Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2237, 13)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endingBalance'), string20Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2238, 13)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cashBackAmount'), string20Type, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2239, 13)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2236, 13))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2237, 13))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2238, 13))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2239, 13))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableBalance')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2236, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'beginningBalance')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2237, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endingBalance')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2238, 13))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cashBackAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2239, 13))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_120()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), ccAccountNumberType, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2247, 13)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), pyxb.binding.datatypes.string, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2248, 13)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2247, 13))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2248, 13))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2247, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2248, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_121()




echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), echeckAccountTypeEnum, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2419, 16)))

echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), echeckAccountNumberType, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2420, 16)))

echeckAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), routingNumberType, scope=echeckAccountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2421, 16)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2419, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2420, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2421, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_123())
    sub_automata.append(_BuildAutomaton_124())
    sub_automata.append(_BuildAutomaton_125())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2418, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckAccountInfoType._Automaton = _BuildAutomaton_122()




echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), echeckAccountTypeEnum, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2427, 16)))

echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2428, 16)))

echeckTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), routingNumberType, scope=echeckTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2429, 16)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2427, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2428, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2429, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_127())
    sub_automata.append(_BuildAutomaton_128())
    sub_automata.append(_BuildAutomaton_129())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2426, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckTokenInfoType._Automaton = _BuildAutomaton_126()




cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=cardAccountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2436, 16)))

cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), ccAccountNumberType, scope=cardAccountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2437, 16)))

cardAccountInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), expDateType, scope=cardAccountInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2438, 16)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2436, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2437, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardAccountInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2438, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_131())
    sub_automata.append(_BuildAutomaton_132())
    sub_automata.append(_BuildAutomaton_133())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2435, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardAccountInfoType._Automaton = _BuildAutomaton_130()




cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2444, 16)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2445, 16)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expDate'), expDateType, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2446, 16)))

cardTokenInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=cardTokenInfoType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2447, 16)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2444, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2445, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2446, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2447, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2447, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2447, 16))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_135())
    sub_automata.append(_BuildAutomaton_136())
    sub_automata.append(_BuildAutomaton_137())
    sub_automata.append(_BuildAutomaton_138())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2443, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenInfoType._Automaton = _BuildAutomaton_134()




extendedCardResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=extendedCardResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2454, 16)))

extendedCardResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'code'), responseType, scope=extendedCardResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2455, 16)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(extendedCardResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2454, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(extendedCardResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'code')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2455, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_140())
    sub_automata.append(_BuildAutomaton_141())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2453, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
extendedCardResponseType._Automaton = _BuildAutomaton_139()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalAccountInfo'), echeckAccountInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2464, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newAccountInfo'), echeckAccountInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2465, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTokenInfo'), echeckTokenInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2469, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newTokenInfo'), echeckTokenInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2470, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalCardInfo'), cardAccountInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2474, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newCardInfo'), cardAccountInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2475, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse'), extendedCardResponseType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2476, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalCardTokenInfo'), cardTokenInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2480, 20)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'newCardTokenInfo'), cardTokenInfoType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2481, 20)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2476, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2482, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2485, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalAccountInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2464, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newAccountInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2465, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTokenInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2469, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newTokenInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2470, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalCardInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2474, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newCardInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2475, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2476, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalCardTokenInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2480, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'newCardTokenInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2481, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2482, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extendedCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2485, 16))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_142()




echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accType'), echeckAccountTypeEnum, scope=echeckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2546, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), echeckAccountNumberType, scope=echeckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2547, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), routingNumberType, scope=echeckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2548, 12)))

echeckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'checkNum'), checkNumberType, scope=echeckType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2549, 12)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2546, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2547, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2548, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2549, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(echeckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'checkNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2549, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2549, 12))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_144())
    sub_automata.append(_BuildAutomaton_145())
    sub_automata.append(_BuildAutomaton_146())
    sub_automata.append(_BuildAutomaton_147())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2545, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckType._Automaton = _BuildAutomaton_143()




echeckForTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accNum'), echeckAccountNumberType, scope=echeckForTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2555, 12)))

echeckForTokenType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingNum'), routingNumberType, scope=echeckForTokenType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2556, 12)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckForTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2555, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(echeckForTokenType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2556, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_149())
    sub_automata.append(_BuildAutomaton_150())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2554, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
echeckForTokenType._Automaton = _BuildAutomaton_148()




filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prepaid'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2756, 12)))

filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'international'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2757, 12)))

filteringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'chargeback'), pyxb.binding.datatypes.boolean, scope=filteringType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2758, 12)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2756, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2757, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2758, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prepaid')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2756, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'international')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2757, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(filteringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'chargeback')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2758, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
filteringType._Automaton = _BuildAutomaton_151()




virtualGiftCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountNumberLength'), pyxb.binding.datatypes.integer, scope=virtualGiftCardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2818, 20)))

virtualGiftCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardBin'), pyxb.binding.datatypes.string, scope=virtualGiftCardType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2819, 20)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(virtualGiftCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountNumberLength')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2818, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(virtualGiftCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardBin')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2819, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
virtualGiftCardType._Automaton = _BuildAutomaton_152()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'walletSourceType'), walletSourceType, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2860, 16)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'walletSourceTypeId'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2861, 16)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'walletSourceType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2860, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'walletSourceTypeId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2861, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_154())
    sub_automata.append(_BuildAutomaton_155())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2859, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_153()




applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'data'), STD_ANON_13, scope=applepayType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2868, 12)))

applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'header'), applepayHeaderType, scope=applepayType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2875, 12)))

applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signature'), STD_ANON_14, scope=applepayType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2876, 12)))

applepayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), STD_ANON_15, scope=applepayType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2883, 12)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'data')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2868, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'header')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2875, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signature')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2876, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(applepayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2883, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
applepayType._Automaton = _BuildAutomaton_156()




applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicationData'), STD_ANON_16, scope=applepayHeaderType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2896, 12)))

applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ephemeralPublicKey'), STD_ANON_17, scope=applepayHeaderType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2903, 12)))

applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'publicKeyHash'), STD_ANON_18, scope=applepayHeaderType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2910, 12)))

applepayHeaderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionId'), STD_ANON_19, scope=applepayHeaderType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2917, 12)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2896, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicationData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2896, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ephemeralPublicKey')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2903, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'publicKeyHash')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2910, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(applepayHeaderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2917, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
applepayHeaderType._Automaton = _BuildAutomaton_157()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicationPrimaryAccountNumber'), string20Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2930, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicationExpirationDate'), string20Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2931, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'currencyCode'), string3Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2932, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionAmount'), transactionAmountType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2933, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), string512Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2934, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deviceManufacturerIdentifier'), string20Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2935, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentDataType'), string20Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2936, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onlinePaymentCryptogram'), authenticationValueType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2937, 13)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator'), string2Type, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2938, 13)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2930, 13))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2931, 13))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2932, 13))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2933, 13))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2934, 13))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2935, 13))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2936, 13))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2937, 13))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2938, 13))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicationPrimaryAccountNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2930, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicationExpirationDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2931, 13))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'currencyCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2932, 13))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2933, 13))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderName')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2934, 13))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deviceManufacturerIdentifier')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2935, 13))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentDataType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2936, 13))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onlinePaymentCryptogram')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2937, 13))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eciIndicator')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2938, 13))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_158()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleSessionId'), litleIdType, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2971, 16)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData'), CTD_ANON_24, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3173, 4)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleSessionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2971, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdateFileRequestData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2972, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_159()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantId'), merchantIdentificationType, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3176, 16)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDay'), pyxb.binding.datatypes.date, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3177, 16)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3176, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3177, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDay')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3177, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3177, 16))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_161())
    sub_automata.append(_BuildAutomaton_162())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3175, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_160()




voidRecyclingResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditLitleTxnId'), litleIdType, scope=voidRecyclingResponseType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3251, 12)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3251, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(voidRecyclingResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditLitleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3251, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
voidRecyclingResponseType._Automaton = _BuildAutomaton_163()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), litleIdType, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 737, 25)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 737, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_164()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), litleIdType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 749, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), string25Type, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 750, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 753, 29)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 754, 29)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 755, 29)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billingDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 757, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createDiscount'), createDiscountType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 758, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateDiscount'), updateDiscountType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 759, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deleteDiscount'), deleteDiscountType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 760, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createAddOn'), createAddOnType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 761, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateAddOn'), updateAddOnType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 762, 25)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deleteAddOn'), deleteAddOnType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 763, 25)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 750, 25))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 751, 25))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 752, 25))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 757, 25))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 758, 25))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 759, 25))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 760, 25))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 761, 25))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 762, 25))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 763, 25))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 749, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 750, 25))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 751, 25))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 753, 29))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 754, 29))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 755, 29))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billingDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 757, 25))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createDiscount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 758, 25))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updateDiscount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 759, 25))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deleteDiscount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 760, 25))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createAddOn')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 761, 25))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updateAddOn')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 762, 25))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deleteAddOn')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 763, 25))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_165()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), string25Type, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 775, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 776, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), nameType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 777, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'intervalType'), intervalTypeEnum, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 778, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 779, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments'), numberOfPaymentsType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 780, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'trialNumberOfIntervals'), numberOfPaymentsType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 781, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'trialIntervalType'), trialIntervalTypeEnum, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 782, 25)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'active'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 783, 25)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 777, 25))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 780, 25))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 781, 25))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 782, 25))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 783, 25))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 775, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 776, 25))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 777, 25))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'intervalType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 778, 25))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 779, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfPayments')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 780, 25))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'trialNumberOfIntervals')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 781, 25))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'trialIntervalType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 782, 25))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'active')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 783, 25))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_166()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), string25Type, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 795, 25)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'active'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 796, 25)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 795, 25))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'active')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 796, 25))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_167()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), litleIdType, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 808, 25)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 808, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_168()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId'), litleIdType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 820, 25)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 821, 25)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 821, 25))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subscriptionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 820, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 821, 25))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_169()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), string25Type, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 833, 25)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 833, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_170()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'planCode'), string25Type, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 845, 25)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 725, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 726, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 727, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 728, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'planCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 845, 25))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_171()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authentication'), CTD_ANON, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 5, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest'), CTD_ANON_23, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2968, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchRequest'), CTD_ANON_34, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2976, 4)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2959, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2960, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authentication')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2957, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'batchRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2959, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RFRRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2960, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_172()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 717, 4)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 963, 4)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transaction')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2979, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2980, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_173()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse'), CTD_ANON_36, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3114, 4)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batchResponse'), CTD_ANON_37, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3120, 4)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3103, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'batchResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3103, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RFRResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3104, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_174()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 718, 4)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1754, 4)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3123, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3124, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3123, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3124, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_175()




cardTokenTypeAU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=cardTokenTypeAU, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3156, 20)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 617, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 618, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 619, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3156, 20))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 616, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 617, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 618, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 619, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(cardTokenTypeAU._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3156, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cardTokenTypeAU._Automaton = _BuildAutomaton_176()




baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authentication'), CTD_ANON, scope=baseRequest, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 5, 4)))

baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction'), recurringTransactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=baseRequest, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 717, 4)))

baseRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transaction'), transactionType, abstract=pyxb.binding.datatypes.boolean(1), scope=baseRequest, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 963, 4)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authentication')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3184, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transaction')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3186, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseRequest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3187, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
baseRequest._Automaton = _BuildAutomaton_177()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse'), recurringTransactionResponseType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 718, 4)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse'), transactionTypeWithReportGroup, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1754, 4)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3208, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3209, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3208, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransactionResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3209, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_178()




def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authentication')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3184, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transaction')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3186, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringTransaction')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3187, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_179()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), CTD_ANON_, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1011, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), CTD_ANON_2, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1157, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1160, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1161, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1162, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1163, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1164, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1169, 32)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1170, 32)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypal'), payPal, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1171, 32)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1172, 32)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1173, 32)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepay'), applepayType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1174, 32)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), fraudCheckType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1177, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), govtTaxTypeEnum, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1181, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1184, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'filtering'), filteringType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1186, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1187, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), recyclingRequestType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1188, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1189, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), recurringRequestType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1190, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1191, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1192, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), processingTypeEnum, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1194, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), string30Type, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1195, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), transactionAmountType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1196, 28)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), CTD_ANON_6, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1527, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), CTD_ANON_9, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_14, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wallet'), CTD_ANON_21, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2857, 4)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1162, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1163, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1165, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1166, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1167, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1176, 28))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1177, 28))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1178, 28))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1179, 28))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1180, 28))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1181, 28))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1182, 28))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1183, 28))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1184, 28))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1185, 28))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1186, 28))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1187, 28))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1188, 28))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1189, 28))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1190, 28))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1191, 28))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1192, 28))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1193, 28))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1194, 28))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1195, 28))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1196, 28))
    counters.add(cc_25)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1157, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1160, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1161, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1162, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1163, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1164, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1165, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1166, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1167, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1169, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1170, 32))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypal')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1171, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1172, 32))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1173, 32))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepay')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1174, 32))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1176, 28))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1177, 28))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1178, 28))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1179, 28))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1180, 28))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1181, 28))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1182, 28))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1183, 28))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1184, 28))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1185, 28))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'filtering')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1186, 28))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1187, 28))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1188, 28))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1189, 28))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1190, 28))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1191, 28))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1192, 28))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wallet')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1193, 28))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1194, 28))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1195, 28))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1196, 28))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, True) ]))
    st_35._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_180()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1210, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1211, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1212, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), payPalNotesType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1213, 24)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), actionReasonType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1214, 24)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1210, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1211, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1211, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1212, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1212, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1213, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1213, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1214, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'actionReason')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1214, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1211, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1212, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1213, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1214, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_182())
    sub_automata.append(_BuildAutomaton_183())
    sub_automata.append(_BuildAutomaton_184())
    sub_automata.append(_BuildAutomaton_185())
    sub_automata.append(_BuildAutomaton_186())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1209, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_181()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1226, 24)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1227, 24)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1228, 24)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1231, 24)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), payPalNotesType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1232, 24)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1226, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1227, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1227, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1228, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1228, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1229, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1229, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1230, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1230, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1231, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1231, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1232, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1232, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1233, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1233, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1227, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1228, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1229, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1230, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1231, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1232, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1233, 24))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_188())
    sub_automata.append(_BuildAutomaton_189())
    sub_automata.append(_BuildAutomaton_190())
    sub_automata.append(_BuildAutomaton_191())
    sub_automata.append(_BuildAutomaton_192())
    sub_automata.append(_BuildAutomaton_193())
    sub_automata.append(_BuildAutomaton_194())
    sub_automata.append(_BuildAutomaton_195())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1225, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_187()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1245, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1246, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1247, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1248, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1249, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1252, 32)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1253, 32)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1254, 32)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1255, 32)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), govtTaxTypeEnum, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1258, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1263, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1264, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), processingTypeEnum, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1265, 24)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), CTD_ANON_9, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_14, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1247, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1248, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1250, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1257, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1258, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1259, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1260, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1261, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1262, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1263, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1264, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1265, 24))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1245, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1246, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1247, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1248, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1249, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1250, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1252, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1253, 32))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1254, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1255, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1257, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1258, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1259, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1260, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1261, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1262, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1263, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1264, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1265, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_196()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), CTD_ANON_2, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1277, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1279, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1280, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1281, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1282, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1286, 32)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1287, 32)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1288, 32)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1289, 32)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), govtTaxTypeEnum, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1292, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1298, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1299, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), processingTypeEnum, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1300, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), string30Type, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1301, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), transactionAmountType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1302, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authInformation'), CTD_ANON_5, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1502, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), CTD_ANON_9, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_14, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1280, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1281, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1283, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1284, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1291, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1292, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1293, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1294, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1295, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1296, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1297, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1298, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1299, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1300, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1301, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1302, 24))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1277, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authInformation')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1278, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1279, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1280, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1281, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1282, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1283, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1284, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1286, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1287, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1288, 32))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1289, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1291, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1292, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1293, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1294, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1295, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1296, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1297, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1298, 24))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1299, 24))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1300, 24))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1301, 24))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1302, 24))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_197()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerInfo'), CTD_ANON_, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1011, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), CTD_ANON_2, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1315, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1316, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1317, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1318, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1319, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1320, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1325, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1326, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypal'), payPal, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1327, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1328, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1329, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepay'), applepayType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1330, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck'), fraudCheckType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1336, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication'), fraudCheckType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1337, 28)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), govtTaxTypeEnum, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1340, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1344, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), payPalNotesType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1345, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1347, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'filtering'), filteringType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1349, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1350, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest'), recyclingRequestType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1351, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1352, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest'), recurringRequestType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1353, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleInternalRecurringRequest'), litleInternalRecurringRequestType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1354, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1355, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1356, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingType'), processingTypeEnum, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1358, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId'), string30Type, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1359, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount'), transactionAmountType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1360, 24)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS'), CTD_ANON_6, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1527, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), CTD_ANON_9, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_14, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wallet'), CTD_ANON_21, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2857, 4)))

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1315, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1318, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1319, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1321, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1322, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1323, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1332, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1336, 28))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1337, 28))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1339, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1340, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1341, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1342, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1343, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1344, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1345, 24))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1346, 24))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1347, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1348, 24))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1349, 24))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1350, 24))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1351, 24))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1352, 24))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1353, 24))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1354, 24))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1355, 24))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1356, 24))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1357, 24))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1358, 24))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1359, 24))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1360, 24))
    counters.add(cc_30)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1315, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1316, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1317, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1318, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1319, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1320, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerInfo')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1321, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1322, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1323, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1325, 28))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1326, 28))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypal')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1327, 28))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1328, 28))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1329, 28))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepay')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1330, 28))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1332, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudCheck')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1336, 28))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderAuthentication')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1337, 28))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1339, 24))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1340, 24))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1341, 24))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1342, 24))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1343, 24))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalOrderComplete')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1344, 24))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1345, 24))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1346, 24))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'allowPartialAuth')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1347, 24))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'healthcareIIAS')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1348, 24))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'filtering')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1349, 24))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1350, 24))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recyclingRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1351, 24))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudFilterOverride')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1352, 24))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1353, 24))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleInternalRecurringRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1354, 24))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debtRepayment')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1355, 24))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1356, 24))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wallet')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1357, 24))
    st_36 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1358, 24))
    st_37 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalNetworkTransactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1359, 24))
    st_38 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalTransactionAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1360, 24))
    st_39 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    transitions.append(fac.Transition(st_39, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_30, True) ]))
    st_39._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_198()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest'), CTD_ANON_2, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1072, 4)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1375, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1376, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount'), transactionAmountType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1377, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1384, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1386, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1388, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1391, 36)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1392, 36)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'token'), cardTokenType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1393, 36)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypage'), cardPaypageType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1394, 36)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypal'), CTD_ANON_4, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1395, 36)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxType'), govtTaxTypeEnum, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1421, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1427, 32)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes'), payPalNotesType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1430, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'actionReason'), actionReasonType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1431, 24)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedData'), CTD_ANON_8, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1548, 4)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData'), CTD_ANON_9, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1579, 4)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pos'), CTD_ANON_14, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1700, 4)))

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1376, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1377, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1378, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1379, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1380, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1381, 32))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1386, 32))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1387, 32))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1389, 32))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1420, 32))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1421, 32))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1422, 32))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1423, 32))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1424, 32))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1425, 32))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1426, 32))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1427, 32))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1430, 24))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1431, 24))
    counters.add(cc_18)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1375, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1376, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1377, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1378, 32))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1379, 32))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1380, 32))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1381, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1384, 32))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1385, 32))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1386, 32))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surchargeAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1387, 32))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1388, 32))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1389, 32))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1391, 36))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1392, 36))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'token')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1393, 36))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypage')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1394, 36))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypal')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1395, 36))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1420, 32))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxType')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1421, 32))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterRequest')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1422, 32))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1423, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1424, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1425, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amexAggregatorData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1426, 32))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1427, 32))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payPalNotes')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1430, 24))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'actionReason')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1431, 24))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_27._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_199()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1443, 28)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1444, 28)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1445, 28)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1447, 37)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCard'), virtualGiftCardType, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1448, 37)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1443, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1444, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1445, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1447, 37))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCard')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1448, 37))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_200()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1461, 28)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1462, 28)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1463, 28)))

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1461, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1462, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1463, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_201()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1475, 28)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1476, 28)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1477, 28)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1478, 28)))

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1475, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1476, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1477, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1478, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_202()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1490, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1491, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1492, 28)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1493, 28)))

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1490, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1491, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1492, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1493, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_203()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1518, 28)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1519, 28)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'card'), cardType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1520, 28)))

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1518, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1519, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'card')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1520, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_204()




registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1718, 20)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mpos'), mposType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1720, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountNumber'), ccAccountNumberType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1721, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckForToken'), echeckForTokenType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1722, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId'), string512Type, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1723, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepay'), applepayType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1724, 24)))

registerTokenRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), cvNumType, scope=registerTokenRequestType, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1726, 20)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1718, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1726, 20))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1718, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mpos')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1720, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountNumber')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1721, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckForToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1722, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paypageRegistrationId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1723, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepay')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1724, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(registerTokenRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1726, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
registerTokenRequestType._Automaton = _BuildAutomaton_205()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1737, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1738, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1739, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bin'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1740, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), methodOfPaymentTypeEnum, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1741, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1742, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1743, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1744, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1745, 24)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_22, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4)))

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1737, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1738, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1738, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1739, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1739, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1740, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bin')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1740, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1741, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1741, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1742, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCheckAccountSuffix')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1742, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1743, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1744, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1745, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1746, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1746, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1738, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1739, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1740, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1741, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1742, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1746, 24))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_207())
    sub_automata.append(_BuildAutomaton_208())
    sub_automata.append(_BuildAutomaton_209())
    sub_automata.append(_BuildAutomaton_210())
    sub_automata.append(_BuildAutomaton_211())
    sub_automata.append(_BuildAutomaton_212())
    sub_automata.append(_BuildAutomaton_213())
    sub_automata.append(_BuildAutomaton_214())
    sub_automata.append(_BuildAutomaton_215())
    sub_automata.append(_BuildAutomaton_216())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1736, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_206()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData'), CTD_ANON_3, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1118, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1761, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1762, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1763, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1764, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1765, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1767, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1768, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authCode'), authCodeType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1769, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1770, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), transactionAmountType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1771, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), accountInfoType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1772, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1777, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycling'), recyclingType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1779, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), recurringResponseType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1780, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), string30Type, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1785, 24)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), CTD_ANON_15, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1854, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_22, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4)))

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1761, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1762, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1763, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1764, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1765, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardProductId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1765, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1767, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1767, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1768, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1769, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1769, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1770, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1770, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1771, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1771, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1772, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInformation')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1772, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1773, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1773, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1774, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1774, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1775, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1775, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1777, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1777, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1778, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1778, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1779, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1779, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1780, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1780, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1782, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1782, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1783, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1783, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1785, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1785, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1765, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1767, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1769, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1770, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1771, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1772, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1773, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1774, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1775, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1777, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1778, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1779, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1780, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1782, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1783, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1785, 24))
    counters.add(cc_15)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_218())
    sub_automata.append(_BuildAutomaton_219())
    sub_automata.append(_BuildAutomaton_220())
    sub_automata.append(_BuildAutomaton_221())
    sub_automata.append(_BuildAutomaton_222())
    sub_automata.append(_BuildAutomaton_223())
    sub_automata.append(_BuildAutomaton_224())
    sub_automata.append(_BuildAutomaton_225())
    sub_automata.append(_BuildAutomaton_226())
    sub_automata.append(_BuildAutomaton_227())
    sub_automata.append(_BuildAutomaton_228())
    sub_automata.append(_BuildAutomaton_229())
    sub_automata.append(_BuildAutomaton_230())
    sub_automata.append(_BuildAutomaton_231())
    sub_automata.append(_BuildAutomaton_232())
    sub_automata.append(_BuildAutomaton_233())
    sub_automata.append(_BuildAutomaton_234())
    sub_automata.append(_BuildAutomaton_235())
    sub_automata.append(_BuildAutomaton_236())
    sub_automata.append(_BuildAutomaton_237())
    sub_automata.append(_BuildAutomaton_238())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1760, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_217()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1880, 24)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1881, 24)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1882, 24)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1883, 24)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1885, 24)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1886, 24)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1880, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1881, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1882, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1883, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1885, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1885, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1886, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1888, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1888, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1885, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1888, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_240())
    sub_automata.append(_BuildAutomaton_241())
    sub_automata.append(_BuildAutomaton_242())
    sub_automata.append(_BuildAutomaton_243())
    sub_automata.append(_BuildAutomaton_244())
    sub_automata.append(_BuildAutomaton_245())
    sub_automata.append(_BuildAutomaton_246())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1879, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_239()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1900, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1901, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1902, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1903, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1905, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1906, 24)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1900, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1901, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1902, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1903, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1905, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1905, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1906, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1908, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1908, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1905, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1908, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_248())
    sub_automata.append(_BuildAutomaton_249())
    sub_automata.append(_BuildAutomaton_250())
    sub_automata.append(_BuildAutomaton_251())
    sub_automata.append(_BuildAutomaton_252())
    sub_automata.append(_BuildAutomaton_253())
    sub_automata.append(_BuildAutomaton_254())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1899, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_247()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1920, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1921, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1922, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1923, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1925, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1926, 24)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1920, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1921, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1922, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1923, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1925, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1925, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1926, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1928, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1928, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1925, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1928, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_256())
    sub_automata.append(_BuildAutomaton_257())
    sub_automata.append(_BuildAutomaton_258())
    sub_automata.append(_BuildAutomaton_259())
    sub_automata.append(_BuildAutomaton_260())
    sub_automata.append(_BuildAutomaton_261())
    sub_automata.append(_BuildAutomaton_262())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1919, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_255()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1940, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1941, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1942, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1943, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1945, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1946, 24)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1940, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1941, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1942, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1943, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1945, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1945, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1946, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1948, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1948, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1945, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1948, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_264())
    sub_automata.append(_BuildAutomaton_265())
    sub_automata.append(_BuildAutomaton_266())
    sub_automata.append(_BuildAutomaton_267())
    sub_automata.append(_BuildAutomaton_268())
    sub_automata.append(_BuildAutomaton_269())
    sub_automata.append(_BuildAutomaton_270())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1939, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_263()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1960, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1961, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1962, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1963, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1965, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1966, 24)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1960, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1961, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1962, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1963, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1965, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1965, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1966, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1968, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1968, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1965, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1968, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_272())
    sub_automata.append(_BuildAutomaton_273())
    sub_automata.append(_BuildAutomaton_274())
    sub_automata.append(_BuildAutomaton_275())
    sub_automata.append(_BuildAutomaton_276())
    sub_automata.append(_BuildAutomaton_277())
    sub_automata.append(_BuildAutomaton_278())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1959, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_271()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1980, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1981, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1982, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1983, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1985, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1986, 24)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1980, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1981, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1982, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1983, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1985, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1985, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1986, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1988, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1988, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1985, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1988, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_280())
    sub_automata.append(_BuildAutomaton_281())
    sub_automata.append(_BuildAutomaton_282())
    sub_automata.append(_BuildAutomaton_283())
    sub_automata.append(_BuildAutomaton_284())
    sub_automata.append(_BuildAutomaton_285())
    sub_automata.append(_BuildAutomaton_286())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1979, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_279()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2000, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2001, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2002, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2003, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2005, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2006, 24)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2000, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2001, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2002, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2003, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2005, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2005, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2006, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2008, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2008, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2005, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2008, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_288())
    sub_automata.append(_BuildAutomaton_289())
    sub_automata.append(_BuildAutomaton_290())
    sub_automata.append(_BuildAutomaton_291())
    sub_automata.append(_BuildAutomaton_292())
    sub_automata.append(_BuildAutomaton_293())
    sub_automata.append(_BuildAutomaton_294())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1999, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_287()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2020, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2022, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2023, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2024, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2026, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2027, 24)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2020, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2022, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2022, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2023, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2024, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2026, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2026, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2027, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2028, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2028, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2030, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2030, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2031, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2031, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2022, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2026, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2028, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2030, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2031, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_296())
    sub_automata.append(_BuildAutomaton_297())
    sub_automata.append(_BuildAutomaton_298())
    sub_automata.append(_BuildAutomaton_299())
    sub_automata.append(_BuildAutomaton_300())
    sub_automata.append(_BuildAutomaton_301())
    sub_automata.append(_BuildAutomaton_302())
    sub_automata.append(_BuildAutomaton_303())
    sub_automata.append(_BuildAutomaton_304())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2019, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_295()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2045, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2046, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2047, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2048, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2050, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2051, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2053, 24)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2045, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2046, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2047, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_309
    del _BuildAutomaton_309
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2048, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_310
    del _BuildAutomaton_310
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2050, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2050, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_311
    del _BuildAutomaton_311
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2051, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_312
    del _BuildAutomaton_312
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2053, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2053, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_313
    del _BuildAutomaton_313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2054, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2054, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_314
    del _BuildAutomaton_314
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2056, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2056, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_315
    del _BuildAutomaton_315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2057, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2057, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2050, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2053, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2054, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2056, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2057, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_306())
    sub_automata.append(_BuildAutomaton_307())
    sub_automata.append(_BuildAutomaton_308())
    sub_automata.append(_BuildAutomaton_309())
    sub_automata.append(_BuildAutomaton_310())
    sub_automata.append(_BuildAutomaton_311())
    sub_automata.append(_BuildAutomaton_312())
    sub_automata.append(_BuildAutomaton_313())
    sub_automata.append(_BuildAutomaton_314())
    sub_automata.append(_BuildAutomaton_315())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2044, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_305()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2071, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2072, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2073, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2074, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2076, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2077, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2079, 24)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_317
    del _BuildAutomaton_317
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2071, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_318
    del _BuildAutomaton_318
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2072, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_319
    del _BuildAutomaton_319
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2073, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_320
    del _BuildAutomaton_320
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2074, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_321
    del _BuildAutomaton_321
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2076, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2076, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_322
    del _BuildAutomaton_322
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2077, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_323
    del _BuildAutomaton_323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2079, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2079, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_324
    del _BuildAutomaton_324
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2081, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2081, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_325
    del _BuildAutomaton_325
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2082, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2082, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_316
    del _BuildAutomaton_316
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2076, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2079, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2081, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2082, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_317())
    sub_automata.append(_BuildAutomaton_318())
    sub_automata.append(_BuildAutomaton_319())
    sub_automata.append(_BuildAutomaton_320())
    sub_automata.append(_BuildAutomaton_321())
    sub_automata.append(_BuildAutomaton_322())
    sub_automata.append(_BuildAutomaton_323())
    sub_automata.append(_BuildAutomaton_324())
    sub_automata.append(_BuildAutomaton_325())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2070, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_316()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData'), CTD_ANON_3, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1118, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse'), CTD_ANON_15, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1854, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2096, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2097, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2098, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2099, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardProductId'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2100, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2101, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2102, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authCode'), authCodeType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2103, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2104, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), transactionAmountType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2105, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountInformation'), accountInfoType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2106, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2110, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycling'), recyclingType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2113, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse'), recurringResponseType, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2114, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId'), string30Type, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2119, 24)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse'), CTD_ANON_22, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2927, 4)))

def _BuildAutomaton_327 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_327
    del _BuildAutomaton_327
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2096, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_328 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_328
    del _BuildAutomaton_328
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2097, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_329 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_329
    del _BuildAutomaton_329
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2098, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_330 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_330
    del _BuildAutomaton_330
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2099, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_331 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_331
    del _BuildAutomaton_331
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2100, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardProductId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2100, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_332 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_332
    del _BuildAutomaton_332
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2101, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2101, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_333 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_333
    del _BuildAutomaton_333
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2102, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_334 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_334
    del _BuildAutomaton_334
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2103, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2103, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_335 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_335
    del _BuildAutomaton_335
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2104, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationResponseSubCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2104, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_336 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_336
    del _BuildAutomaton_336
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2105, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2105, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_337 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_337
    del _BuildAutomaton_337
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2106, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountInformation')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2106, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_338 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_338
    del _BuildAutomaton_338
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2107, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2107, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_339 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_339
    del _BuildAutomaton_339
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2108, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billMeLaterResponseData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2108, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_340 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_340
    del _BuildAutomaton_340
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2110, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2110, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_341 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_341
    del _BuildAutomaton_341
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2111, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enhancedAuthResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2111, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_342 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_342
    del _BuildAutomaton_342
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2112, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2112, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_343 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_343
    del _BuildAutomaton_343
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2113, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2113, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_344 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_344
    del _BuildAutomaton_344
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2114, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recurringResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2114, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_345 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_345
    del _BuildAutomaton_345
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2116, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2116, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_346 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_346
    del _BuildAutomaton_346
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2117, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applepayResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2117, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_347 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_347
    del _BuildAutomaton_347
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2119, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkTransactionId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2119, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_326 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_326
    del _BuildAutomaton_326
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2100, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2101, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2103, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2104, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2105, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2106, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2107, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2108, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2110, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2111, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2112, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2113, 24))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2114, 24))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2116, 24))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2117, 24))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2119, 24))
    counters.add(cc_15)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_327())
    sub_automata.append(_BuildAutomaton_328())
    sub_automata.append(_BuildAutomaton_329())
    sub_automata.append(_BuildAutomaton_330())
    sub_automata.append(_BuildAutomaton_331())
    sub_automata.append(_BuildAutomaton_332())
    sub_automata.append(_BuildAutomaton_333())
    sub_automata.append(_BuildAutomaton_334())
    sub_automata.append(_BuildAutomaton_335())
    sub_automata.append(_BuildAutomaton_336())
    sub_automata.append(_BuildAutomaton_337())
    sub_automata.append(_BuildAutomaton_338())
    sub_automata.append(_BuildAutomaton_339())
    sub_automata.append(_BuildAutomaton_340())
    sub_automata.append(_BuildAutomaton_341())
    sub_automata.append(_BuildAutomaton_342())
    sub_automata.append(_BuildAutomaton_343())
    sub_automata.append(_BuildAutomaton_344())
    sub_automata.append(_BuildAutomaton_345())
    sub_automata.append(_BuildAutomaton_346())
    sub_automata.append(_BuildAutomaton_347())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2095, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_326()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2133, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2134, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2135, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2136, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2138, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2139, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2141, 24)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_349 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_349
    del _BuildAutomaton_349
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2133, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_350 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_350
    del _BuildAutomaton_350
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2134, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2134, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_351 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_351
    del _BuildAutomaton_351
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2135, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_352 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_352
    del _BuildAutomaton_352
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2136, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_353 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_353
    del _BuildAutomaton_353
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2138, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2138, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_354 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_354
    del _BuildAutomaton_354
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2139, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_355 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_355
    del _BuildAutomaton_355
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2141, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2141, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_356 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_356
    del _BuildAutomaton_356
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2143, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2143, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_357 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_357
    del _BuildAutomaton_357
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2144, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2144, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_348 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_348
    del _BuildAutomaton_348
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2134, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2138, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2141, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2143, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2144, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_349())
    sub_automata.append(_BuildAutomaton_350())
    sub_automata.append(_BuildAutomaton_351())
    sub_automata.append(_BuildAutomaton_352())
    sub_automata.append(_BuildAutomaton_353())
    sub_automata.append(_BuildAutomaton_354())
    sub_automata.append(_BuildAutomaton_355())
    sub_automata.append(_BuildAutomaton_356())
    sub_automata.append(_BuildAutomaton_357())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2132, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_348()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2171, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2172, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2173, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2174, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2176, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2177, 24)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse'), CTD_ANON_19, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2244, 4)))

def _BuildAutomaton_359 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_359
    del _BuildAutomaton_359
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2171, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_360 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_360
    del _BuildAutomaton_360
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2172, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_361 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_361
    del _BuildAutomaton_361
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2173, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_362 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_362
    del _BuildAutomaton_362
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2174, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_363 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_363
    del _BuildAutomaton_363
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2176, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2176, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_364 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_364
    del _BuildAutomaton_364
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2177, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_365 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_365
    del _BuildAutomaton_365
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2178, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2178, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_366 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_366
    del _BuildAutomaton_366
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2179, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2179, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_367 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_367
    del _BuildAutomaton_367
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2180, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'virtualGiftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2180, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_358 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_358
    del _BuildAutomaton_358
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2176, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2178, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2179, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2180, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_359())
    sub_automata.append(_BuildAutomaton_360())
    sub_automata.append(_BuildAutomaton_361())
    sub_automata.append(_BuildAutomaton_362())
    sub_automata.append(_BuildAutomaton_363())
    sub_automata.append(_BuildAutomaton_364())
    sub_automata.append(_BuildAutomaton_365())
    sub_automata.append(_BuildAutomaton_366())
    sub_automata.append(_BuildAutomaton_367())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2170, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_358()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2194, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2195, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2196, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2197, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2199, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2200, 24)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_369 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_369
    del _BuildAutomaton_369
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2194, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_370 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_370
    del _BuildAutomaton_370
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2195, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_371 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_371
    del _BuildAutomaton_371
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2196, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_372 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_372
    del _BuildAutomaton_372
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2197, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_373 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_373
    del _BuildAutomaton_373
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2199, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2199, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_374 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_374
    del _BuildAutomaton_374
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2200, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_375 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_375
    del _BuildAutomaton_375
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2201, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2201, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_376 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_376
    del _BuildAutomaton_376
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2202, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2202, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_368 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_368
    del _BuildAutomaton_368
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2199, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2201, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2202, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_369())
    sub_automata.append(_BuildAutomaton_370())
    sub_automata.append(_BuildAutomaton_371())
    sub_automata.append(_BuildAutomaton_372())
    sub_automata.append(_BuildAutomaton_373())
    sub_automata.append(_BuildAutomaton_374())
    sub_automata.append(_BuildAutomaton_375())
    sub_automata.append(_BuildAutomaton_376())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2193, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_368()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2216, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2217, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2218, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2219, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2221, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2222, 24)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

def _BuildAutomaton_378 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_378
    del _BuildAutomaton_378
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2216, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_379 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_379
    del _BuildAutomaton_379
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2217, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_380 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_380
    del _BuildAutomaton_380
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2218, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_381 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_381
    del _BuildAutomaton_381
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2219, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_382 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_382
    del _BuildAutomaton_382
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2221, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2221, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_383 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_383
    del _BuildAutomaton_383
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2222, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_384 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_384
    del _BuildAutomaton_384
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2223, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2223, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_385 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_385
    del _BuildAutomaton_385
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2224, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2224, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_377 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_377
    del _BuildAutomaton_377
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2221, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2223, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2224, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_378())
    sub_automata.append(_BuildAutomaton_379())
    sub_automata.append(_BuildAutomaton_380())
    sub_automata.append(_BuildAutomaton_381())
    sub_automata.append(_BuildAutomaton_382())
    sub_automata.append(_BuildAutomaton_383())
    sub_automata.append(_BuildAutomaton_384())
    sub_automata.append(_BuildAutomaton_385())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2215, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_377()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2259, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2260, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2261, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2262, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2264, 24)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2265, 24)))

def _BuildAutomaton_387 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_387
    del _BuildAutomaton_387
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2259, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_388 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_388
    del _BuildAutomaton_388
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2260, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_389 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_389
    del _BuildAutomaton_389
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2261, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_390 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_390
    del _BuildAutomaton_390
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2262, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_391 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_391
    del _BuildAutomaton_391
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2264, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2264, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_392 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_392
    del _BuildAutomaton_392
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2265, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_393 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_393
    del _BuildAutomaton_393
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2266, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2266, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_394 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_394
    del _BuildAutomaton_394
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2267, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2267, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_386 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_386
    del _BuildAutomaton_386
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2264, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2266, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2267, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_387())
    sub_automata.append(_BuildAutomaton_388())
    sub_automata.append(_BuildAutomaton_389())
    sub_automata.append(_BuildAutomaton_390())
    sub_automata.append(_BuildAutomaton_391())
    sub_automata.append(_BuildAutomaton_392())
    sub_automata.append(_BuildAutomaton_393())
    sub_automata.append(_BuildAutomaton_394())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2258, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_386()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fraudResult'), CTD_ANON_17, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2153, 4)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse'), CTD_ANON_18, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2233, 4)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2279, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2280, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2281, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2282, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2284, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2285, 24)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount'), transactionAmountType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2287, 24)))

def _BuildAutomaton_396 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_396
    del _BuildAutomaton_396
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2279, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_397 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_397
    del _BuildAutomaton_397
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2280, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_398 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_398
    del _BuildAutomaton_398
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2281, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_399 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_399
    del _BuildAutomaton_399
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2282, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_400 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_400
    del _BuildAutomaton_400
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2284, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2284, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_401 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_401
    del _BuildAutomaton_401
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2285, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_402 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_402
    del _BuildAutomaton_402
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2286, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fraudResult')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2286, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_403 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_403
    del _BuildAutomaton_403
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2287, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvedAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2287, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_404 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_404
    del _BuildAutomaton_404
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2288, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'giftCardResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2288, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_395 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_395
    del _BuildAutomaton_395
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2284, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2286, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2287, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2288, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_396())
    sub_automata.append(_BuildAutomaton_397())
    sub_automata.append(_BuildAutomaton_398())
    sub_automata.append(_BuildAutomaton_399())
    sub_automata.append(_BuildAutomaton_400())
    sub_automata.append(_BuildAutomaton_401())
    sub_automata.append(_BuildAutomaton_402())
    sub_automata.append(_BuildAutomaton_403())
    sub_automata.append(_BuildAutomaton_404())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2278, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_395()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress'), contact, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1500, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2306, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2307, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2311, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verify'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2312, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2314, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2315, 28)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2320, 28)))

def _BuildAutomaton_405 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_405
    del _BuildAutomaton_405
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2307, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2308, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2312, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2314, 28))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2317, 28))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2319, 28))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2320, 28))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2306, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2307, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2308, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2311, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verify')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2312, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2313, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2314, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2315, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2316, 28))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2317, 28))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2318, 28))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2319, 28))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2320, 28))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_405()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customBilling'), CTD_ANON_12, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1659, 4)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2335, 29)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2336, 29)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2340, 29)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount'), transactionAmountType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2342, 32)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2343, 29)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2347, 29)))

def _BuildAutomaton_406 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_406
    del _BuildAutomaton_406
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2336, 29))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2337, 29))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2342, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2346, 29))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2347, 29))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2335, 29))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2336, 29))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2337, 29))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2340, 29))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2341, 29))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'secondaryAmount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2342, 32))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2343, 29))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2344, 29))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2345, 29))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customBilling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2346, 29))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2347, 29))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_406()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billToAddress'), contact, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 586, 4)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2361, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2362, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), transactionAmountType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2363, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderSource'), orderSourceType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2364, 24)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2367, 24)))

def _BuildAutomaton_408 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_408
    del _BuildAutomaton_408
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2361, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2361, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_409 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_409
    del _BuildAutomaton_409
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2362, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_410 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_410
    del _BuildAutomaton_410
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2363, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_411 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_411
    del _BuildAutomaton_411
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderSource')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2364, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_412 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_412
    del _BuildAutomaton_412
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billToAddress')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2365, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_413 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_413
    del _BuildAutomaton_413
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2366, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_414 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_414
    del _BuildAutomaton_414
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2367, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2367, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_407 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_407
    del _BuildAutomaton_407
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2361, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2367, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_408())
    sub_automata.append(_BuildAutomaton_409())
    sub_automata.append(_BuildAutomaton_410())
    sub_automata.append(_BuildAutomaton_411())
    sub_automata.append(_BuildAutomaton_412())
    sub_automata.append(_BuildAutomaton_413())
    sub_automata.append(_BuildAutomaton_414())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2360, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_407()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2379, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2380, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2381, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2382, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2383, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verificationCode'), authCodeType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2384, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2386, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2388, 24)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

def _BuildAutomaton_416 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_416
    del _BuildAutomaton_416
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2379, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_417 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_417
    del _BuildAutomaton_417
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2380, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2380, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_418 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_418
    del _BuildAutomaton_418
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2381, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_419 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_419
    del _BuildAutomaton_419
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2382, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_420 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_420
    del _BuildAutomaton_420
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2383, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_421 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_421
    del _BuildAutomaton_421
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2384, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verificationCode')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2384, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_422 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_422
    del _BuildAutomaton_422
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2386, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2386, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_423 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_423
    del _BuildAutomaton_423
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2387, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2387, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_424 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_424
    del _BuildAutomaton_424
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2388, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2388, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_415 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_415
    del _BuildAutomaton_415
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2380, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2384, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2386, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2387, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2388, 24))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_416())
    sub_automata.append(_BuildAutomaton_417())
    sub_automata.append(_BuildAutomaton_418())
    sub_automata.append(_BuildAutomaton_419())
    sub_automata.append(_BuildAutomaton_420())
    sub_automata.append(_BuildAutomaton_421())
    sub_automata.append(_BuildAutomaton_422())
    sub_automata.append(_BuildAutomaton_423())
    sub_automata.append(_BuildAutomaton_424())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2378, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_415()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2401, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2402, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2403, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2404, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2405, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2407, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2409, 24)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

def _BuildAutomaton_426 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_426
    del _BuildAutomaton_426
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2401, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_427 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_427
    del _BuildAutomaton_427
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2402, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2402, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_428 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_428
    del _BuildAutomaton_428
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2403, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_429 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_429
    del _BuildAutomaton_429
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2404, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_430 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_430
    del _BuildAutomaton_430
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2405, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_431 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_431
    del _BuildAutomaton_431
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2407, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2407, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_432 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_432
    del _BuildAutomaton_432
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2408, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2408, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_433 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_433
    del _BuildAutomaton_433
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2409, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2409, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_425 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_425
    del _BuildAutomaton_425
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2402, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2407, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2408, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2409, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_426())
    sub_automata.append(_BuildAutomaton_427())
    sub_automata.append(_BuildAutomaton_428())
    sub_automata.append(_BuildAutomaton_429())
    sub_automata.append(_BuildAutomaton_430())
    sub_automata.append(_BuildAutomaton_431())
    sub_automata.append(_BuildAutomaton_432())
    sub_automata.append(_BuildAutomaton_433())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2400, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_425()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2495, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2496, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2497, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2498, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2499, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2501, 24)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2502, 24)))

def _BuildAutomaton_435 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_435
    del _BuildAutomaton_435
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2495, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_436 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_436
    del _BuildAutomaton_436
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2496, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_437 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_437
    del _BuildAutomaton_437
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2497, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_438 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_438
    del _BuildAutomaton_438
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2498, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_439 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_439
    del _BuildAutomaton_439
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2499, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_440 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_440
    del _BuildAutomaton_440
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2501, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2501, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_441 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_441
    del _BuildAutomaton_441
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2502, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2502, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_434 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_434
    del _BuildAutomaton_434
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2501, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2502, 24))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_435())
    sub_automata.append(_BuildAutomaton_436())
    sub_automata.append(_BuildAutomaton_437())
    sub_automata.append(_BuildAutomaton_438())
    sub_automata.append(_BuildAutomaton_439())
    sub_automata.append(_BuildAutomaton_440())
    sub_automata.append(_BuildAutomaton_441())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2494, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_434()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2296, 4)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2514, 24)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merchantData'), merchantDataType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2516, 24)))

def _BuildAutomaton_442 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_442
    del _BuildAutomaton_442
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2515, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2516, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2514, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'echeckOrEcheckToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2515, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merchantData')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2516, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_442()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater'), CTD_ANON_20, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2460, 4)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2528, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2529, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2530, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2531, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2533, 24)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse'), tokenResponseType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2535, 24)))

def _BuildAutomaton_444 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_444
    del _BuildAutomaton_444
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2528, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_445 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_445
    del _BuildAutomaton_445
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2529, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_446 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_446
    del _BuildAutomaton_446
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2530, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_447 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_447
    del _BuildAutomaton_447
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2531, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_448 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_448
    del _BuildAutomaton_448
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2533, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2533, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_449 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_449
    del _BuildAutomaton_449
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2534, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountUpdater')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2534, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_450 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_450
    del _BuildAutomaton_450
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2535, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tokenResponse')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2535, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_443 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_443
    del _BuildAutomaton_443
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2533, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2534, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2535, 24))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_444())
    sub_automata.append(_BuildAutomaton_445())
    sub_automata.append(_BuildAutomaton_446())
    sub_automata.append(_BuildAutomaton_447())
    sub_automata.append(_BuildAutomaton_448())
    sub_automata.append(_BuildAutomaton_449())
    sub_automata.append(_BuildAutomaton_450())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2527, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_443()




updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2792, 20)))

updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleToken'), ccAccountNumberType, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2793, 20)))

updateCardValidationNumOnToken_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum'), cvNumType, scope=updateCardValidationNumOnToken_, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2794, 20)))

def _BuildAutomaton_451 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_451
    del _BuildAutomaton_451
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2792, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2792, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2793, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(updateCardValidationNumOnToken_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardValidationNum')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2794, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
updateCardValidationNumOnToken_._Automaton = _BuildAutomaton_451()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2805, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2806, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2807, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2808, 24)))

CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2809, 24)))

def _BuildAutomaton_453 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_453
    del _BuildAutomaton_453
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2805, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_454 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_454
    del _BuildAutomaton_454
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2806, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2806, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_455 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_455
    del _BuildAutomaton_455
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2807, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_456 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_456
    del _BuildAutomaton_456
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2808, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_457 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_457
    del _BuildAutomaton_457
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2809, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_452 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_452
    del _BuildAutomaton_452
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2806, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_453())
    sub_automata.append(_BuildAutomaton_454())
    sub_automata.append(_BuildAutomaton_455())
    sub_automata.append(_BuildAutomaton_456())
    sub_automata.append(_BuildAutomaton_457())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2804, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_452()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks'), advancedFraudChecksType, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2828, 24)))

def _BuildAutomaton_458 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_458
    del _BuildAutomaton_458
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudChecks')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2828, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_458()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2840, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2841, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2842, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2843, 24)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults'), advancedFraudResultsType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2844, 24)))

def _BuildAutomaton_460 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_460
    del _BuildAutomaton_460
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2840, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_461 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_461
    del _BuildAutomaton_461
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2841, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_462 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_462
    del _BuildAutomaton_462
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2842, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_463 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_463
    del _BuildAutomaton_463
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2843, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_464 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_464
    del _BuildAutomaton_464
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2844, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'advancedFraudResults')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2844, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_459 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_459
    del _BuildAutomaton_459
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2844, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_460())
    sub_automata.append(_BuildAutomaton_461())
    sub_automata.append(_BuildAutomaton_462())
    sub_automata.append(_BuildAutomaton_463())
    sub_automata.append(_BuildAutomaton_464())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 2839, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_459()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3081, 4)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3091, 24)))

def _BuildAutomaton_466 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_466
    del _BuildAutomaton_466
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3091, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_467 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_467
    del _BuildAutomaton_467
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardOrToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3092, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_465 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_465
    del _BuildAutomaton_465
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_466())
    sub_automata.append(_BuildAutomaton_467())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3090, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_465()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3137, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderId'), string25Type, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3138, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3139, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3140, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3141, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatedCard'), cardType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3142, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalCard'), cardType, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3143, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatedToken'), cardTokenTypeAU, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3144, 24)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalToken'), cardTokenTypeAU, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3145, 24)))

def _BuildAutomaton_469 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_469
    del _BuildAutomaton_469
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3137, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_470 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_470
    del _BuildAutomaton_470
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3138, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_471 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_471
    del _BuildAutomaton_471
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3139, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_472 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_472
    del _BuildAutomaton_472
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3140, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_473 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_473
    del _BuildAutomaton_473
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3141, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_474 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_474
    del _BuildAutomaton_474
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3142, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updatedCard')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3142, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_475 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_475
    del _BuildAutomaton_475
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3143, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalCard')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3143, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_476 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_476
    del _BuildAutomaton_476
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3144, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updatedToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3144, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_477 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_477
    del _BuildAutomaton_477
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3145, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalToken')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3145, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_468 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_468
    del _BuildAutomaton_468
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3142, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3143, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3144, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3145, 24))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_469())
    sub_automata.append(_BuildAutomaton_470())
    sub_automata.append(_BuildAutomaton_471())
    sub_automata.append(_BuildAutomaton_472())
    sub_automata.append(_BuildAutomaton_473())
    sub_automata.append(_BuildAutomaton_474())
    sub_automata.append(_BuildAutomaton_475())
    sub_automata.append(_BuildAutomaton_476())
    sub_automata.append(_BuildAutomaton_477())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3136, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_468()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions'), CTD_ANON_13, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 1692, 4)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3222, 24)))

def _BuildAutomaton_479 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_479
    del _BuildAutomaton_479
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3222, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_480 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_480
    del _BuildAutomaton_480
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3223, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processingInstructions')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3223, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_478 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_478
    del _BuildAutomaton_478
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3223, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_479())
    sub_automata.append(_BuildAutomaton_480())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3221, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_478()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3235, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3236, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3237, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3238, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3239, 24)))

CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recycling'), voidRecyclingResponseType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3240, 24)))

def _BuildAutomaton_482 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_482
    del _BuildAutomaton_482
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3235, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_483 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_483
    del _BuildAutomaton_483
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3236, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_484 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_484
    del _BuildAutomaton_484
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3237, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_485 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_485
    del _BuildAutomaton_485
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3238, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_486 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_486
    del _BuildAutomaton_486
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3239, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_487 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_487
    del _BuildAutomaton_487
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3240, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recycling')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3240, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_481 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_481
    del _BuildAutomaton_481
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3240, 24))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_482())
    sub_automata.append(_BuildAutomaton_483())
    sub_automata.append(_BuildAutomaton_484())
    sub_automata.append(_BuildAutomaton_485())
    sub_automata.append(_BuildAutomaton_486())
    sub_automata.append(_BuildAutomaton_487())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3234, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_481()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3260, 24)))

def _BuildAutomaton_488 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_488
    del _BuildAutomaton_488
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3260, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_488()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3272, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'response'), responseType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3273, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'responseTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3274, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3275, 24)))

CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), messageType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3276, 24)))

def _BuildAutomaton_490 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_490
    del _BuildAutomaton_490
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3272, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_491 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_491
    del _BuildAutomaton_491
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'response')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3273, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_492 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_492
    del _BuildAutomaton_492
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'responseTime')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3274, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_493 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_493
    del _BuildAutomaton_493
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postDate')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3275, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_494 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_494
    del _BuildAutomaton_494
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3276, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_489 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_489
    del _BuildAutomaton_489
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_490())
    sub_automata.append(_BuildAutomaton_491())
    sub_automata.append(_BuildAutomaton_492())
    sub_automata.append(_BuildAutomaton_493())
    sub_automata.append(_BuildAutomaton_494())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3271, 20)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_489()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3289, 24)))

def _BuildAutomaton_495 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_495
    del _BuildAutomaton_495
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3289, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_495()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3301, 24)))

def _BuildAutomaton_496 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_496
    del _BuildAutomaton_496
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3301, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_496()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3313, 24)))

def _BuildAutomaton_497 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_497
    del _BuildAutomaton_497
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3313, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_497()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3325, 24)))

def _BuildAutomaton_498 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_498
    del _BuildAutomaton_498
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3325, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_498()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3337, 24)))

def _BuildAutomaton_499 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_499
    del _BuildAutomaton_499
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3337, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_499()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId'), litleIdType, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3349, 24)))

def _BuildAutomaton_500 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_500
    del _BuildAutomaton_500
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'litleTxnId')), pyxb.utils.utility.Location('/usr/local/litle-home/hvora/git/python/8/litle-sdk-for-python/litleSdkPython/SchemaCombined831.xsd', 3349, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_500()


echeck._setSubstitutionGroup(echeckOrEcheckToken)

echeckToken._setSubstitutionGroup(echeckOrEcheckToken)

card._setSubstitutionGroup(cardOrToken)

token._setSubstitutionGroup(cardOrToken)

cancelSubscription._setSubstitutionGroup(recurringTransaction)

updateSubscription._setSubstitutionGroup(recurringTransaction)

createPlan._setSubstitutionGroup(recurringTransaction)

updatePlan._setSubstitutionGroup(recurringTransaction)

cancelSubscriptionResponse._setSubstitutionGroup(recurringTransactionResponse)

updateSubscriptionResponse._setSubstitutionGroup(recurringTransactionResponse)

createPlanResponse._setSubstitutionGroup(recurringTransactionResponse)

updatePlanResponse._setSubstitutionGroup(recurringTransactionResponse)

authorization._setSubstitutionGroup(transaction)

authReversal._setSubstitutionGroup(transaction)

capture._setSubstitutionGroup(transaction)

forceCapture._setSubstitutionGroup(transaction)

captureGivenAuth._setSubstitutionGroup(transaction)

sale._setSubstitutionGroup(transaction)

credit._setSubstitutionGroup(transaction)

activate._setSubstitutionGroup(transaction)

deactivate._setSubstitutionGroup(transaction)

load._setSubstitutionGroup(transaction)

unload._setSubstitutionGroup(transaction)

balanceInquiry._setSubstitutionGroup(transaction)

registerTokenRequest._setSubstitutionGroup(transaction)

registerTokenResponse._setSubstitutionGroup(transactionResponse)

authorizationResponse._setSubstitutionGroup(transactionResponse)

authReversalResponse._setSubstitutionGroup(transactionResponse)

depositReversalResponse._setSubstitutionGroup(transactionResponse)

refundReversalResponse._setSubstitutionGroup(transactionResponse)

activateReversalResponse._setSubstitutionGroup(transactionResponse)

deactivateReversalResponse._setSubstitutionGroup(transactionResponse)

loadReversalResponse._setSubstitutionGroup(transactionResponse)

unloadReversalResponse._setSubstitutionGroup(transactionResponse)

captureResponse._setSubstitutionGroup(transactionResponse)

forceCaptureResponse._setSubstitutionGroup(transactionResponse)

captureGivenAuthResponse._setSubstitutionGroup(transactionResponse)

saleResponse._setSubstitutionGroup(transactionResponse)

creditResponse._setSubstitutionGroup(transactionResponse)

activateResponse._setSubstitutionGroup(transactionResponse)

loadResponse._setSubstitutionGroup(transactionResponse)

unloadResponse._setSubstitutionGroup(transactionResponse)

balanceInquiryResponse._setSubstitutionGroup(transactionResponse)

deactivateResponse._setSubstitutionGroup(transactionResponse)

echeckSale._setSubstitutionGroup(transaction)

echeckCredit._setSubstitutionGroup(transaction)

echeckVerification._setSubstitutionGroup(transaction)

echeckSalesResponse._setSubstitutionGroup(transactionResponse)

echeckCreditResponse._setSubstitutionGroup(transactionResponse)

echeckVerificationResponse._setSubstitutionGroup(transactionResponse)

echeckRedeposit._setSubstitutionGroup(transaction)

echeckRedepositResponse._setSubstitutionGroup(transactionResponse)

updateCardValidationNumOnToken._setSubstitutionGroup(transaction)

updateCardValidationNumOnTokenResponse._setSubstitutionGroup(transactionResponse)

fraudCheck._setSubstitutionGroup(transaction)

fraudCheckResponse._setSubstitutionGroup(transactionResponse)

accountUpdate._setSubstitutionGroup(transaction)

accountUpdateResponse._setSubstitutionGroup(transactionResponse)

void._setSubstitutionGroup(transaction)

voidResponse._setSubstitutionGroup(transactionResponse)

echeckVoid._setSubstitutionGroup(transaction)

echeckVoidResponse._setSubstitutionGroup(transactionResponse)

depositReversal._setSubstitutionGroup(transaction)

refundReversal._setSubstitutionGroup(transaction)

activateReversal._setSubstitutionGroup(transaction)

deactivateReversal._setSubstitutionGroup(transaction)

loadReversal._setSubstitutionGroup(transaction)

unloadReversal._setSubstitutionGroup(transaction)
